
{==============================================================================
     _    _ _                      
    / \  | | | ___  __ _ _ __ ___  
   / _ \ | | |/ _ \/ _` | '__/ _ \ 
  / ___ \| | |  __/ (_| | | | (_) |
 /_/   \_\_|_|\___|\__, |_|  \___/ 
                   |___/           
    A game programming library


 Pascal bindings that allow you to use Allegro with Delphi.

 Inclued:
   - Allegro (https://github.com/liballeg/allegro5)
   - minizip (https://github.com/madler/zlib)
      
 Minimum Requirements:
   - Windows 10+ (64 bits)
   - Delphi Community Edition (Win64 platform only)
   
 Usage:
   You simply add Allegro to your uses section and everything will be linked in
   and ready for use. You will have direct access to all the above
   libraries.

 Copyright © 2021 tinyBigGAMES™ LLC
 All Rights Reserved.

 Website: https://tinybiggames.com
 Email  : support@tinybiggames.com

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software in
    a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 3. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

 4. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

 5. All video, audio, graphics and other content accessed through the
    software in this distro is the property of the applicable content owner
    and may be protected by applicable copyright law. This License gives
    Customer no rights to such content, and Company disclaims any liability
    for misuse of content.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
============================================================================= }

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}

unit Allegro;

interface

uses
  WinAPI.Windows;

const
  INT32_MIN = (-2147483647-1);
  _ALLEGRO_UNSTABLE_BIT_SET = INT32_MIN;
  ALLEGRO_VERSION = 5;
  ALLEGRO_SUB_VERSION = 2;
  ALLEGRO_WIP_VERSION = 8;
  ALLEGRO_UNSTABLE_BIT = _ALLEGRO_UNSTABLE_BIT_SET;
  ALLEGRO_RELEASE_NUMBER = 0;
  ALLEGRO_VERSION_STR = '5.2.8 (GIT)';
  ALLEGRO_DATE_STR = '2021';
  ALLEGRO_DATE = 20210307;
  ALLEGRO_VERSION_INT = ((ALLEGRO_VERSION shl 24) or (ALLEGRO_SUB_VERSION shl 16) or (ALLEGRO_WIP_VERSION shl 8) or ALLEGRO_RELEASE_NUMBER or ALLEGRO_UNSTABLE_BIT);
  ALLEGRO_PI = 3.14159265358979323846;
  ALLEGRO_NATIVE_PATH_SEP = '\';
  ALLEGRO_NATIVE_DRIVE_SEP = ':';
  ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE = 255;
  EOF = (-1);
  _AL_MAX_JOYSTICK_AXES = 3;
  _AL_MAX_JOYSTICK_STICKS = 16;
  _AL_MAX_JOYSTICK_BUTTONS = 32;
  ALLEGRO_MOUSE_MAX_EXTRA_AXES = 4;
  ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT = 16;
  ALLEGRO_SHADER_VAR_COLOR = 'al_color';
  ALLEGRO_SHADER_VAR_POS = 'al_pos';
  ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX = 'al_projview_matrix';
  ALLEGRO_SHADER_VAR_TEX = 'al_tex';
  ALLEGRO_SHADER_VAR_TEXCOORD = 'al_texcoord';
  ALLEGRO_SHADER_VAR_TEX_MATRIX = 'al_tex_matrix';
  ALLEGRO_SHADER_VAR_USER_ATTR = 'al_user_attr_';
  ALLEGRO_SHADER_VAR_USE_TEX = 'al_use_tex';
  ALLEGRO_SHADER_VAR_USE_TEX_MATRIX = 'al_use_tex_matrix';
  ALLEGRO_SHADER_VAR_ALPHA_TEST = 'al_alpha_test';
  ALLEGRO_SHADER_VAR_ALPHA_FUNCTION = 'al_alpha_func';
  ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE = 'al_alpha_test_val';
  GL_VERSION_1_2 = 1;
  GL_UNSIGNED_BYTE_3_3_2 = $8032;
  GL_UNSIGNED_SHORT_4_4_4_4 = $8033;
  GL_UNSIGNED_SHORT_5_5_5_1 = $8034;
  GL_UNSIGNED_INT_8_8_8_8 = $8035;
  GL_UNSIGNED_INT_10_10_10_2 = $8036;
  GL_RESCALE_NORMAL = $803A;
  GL_TEXTURE_BINDING_3D = $806A;
  GL_PACK_SKIP_IMAGES = $806B;
  GL_PACK_IMAGE_HEIGHT = $806C;
  GL_UNPACK_SKIP_IMAGES = $806D;
  GL_UNPACK_IMAGE_HEIGHT = $806E;
  GL_TEXTURE_3D = $806F;
  GL_PROXY_TEXTURE_3D = $8070;
  GL_TEXTURE_DEPTH = $8071;
  GL_TEXTURE_WRAP_R = $8072;
  GL_MAX_3D_TEXTURE_SIZE = $8073;
  GL_UNSIGNED_BYTE_2_3_3_REV = $8362;
  GL_UNSIGNED_SHORT_5_6_5 = $8363;
  GL_UNSIGNED_SHORT_5_6_5_REV = $8364;
  GL_UNSIGNED_SHORT_4_4_4_4_REV = $8365;
  GL_UNSIGNED_SHORT_1_5_5_5_REV = $8366;
  GL_UNSIGNED_INT_8_8_8_8_REV = $8367;
  GL_UNSIGNED_INT_2_10_10_10_REV = $8368;
  GL_BGR = $80E0;
  GL_BGRA = $80E1;
  GL_MAX_ELEMENTS_VERTICES = $80E8;
  GL_MAX_ELEMENTS_INDICES = $80E9;
  GL_CLAMP_TO_EDGE = $812F;
  GL_TEXTURE_MIN_LOD = $813A;
  GL_TEXTURE_MAX_LOD = $813B;
  GL_TEXTURE_BASE_LEVEL = $813C;
  GL_TEXTURE_MAX_LEVEL = $813D;
  GL_LIGHT_MODEL_COLOR_CONTROL = $81F8;
  GL_SINGLE_COLOR = $81F9;
  GL_SEPARATE_SPECULAR_COLOR = $81FA;
  GL_SMOOTH_POINT_SIZE_RANGE = $0B12;
  GL_SMOOTH_POINT_SIZE_GRANULARITY = $0B13;
  GL_SMOOTH_LINE_WIDTH_RANGE = $0B22;
  GL_SMOOTH_LINE_WIDTH_GRANULARITY = $0B23;
  GL_ALIASED_POINT_SIZE_RANGE = $846D;
  GL_ALIASED_LINE_WIDTH_RANGE = $846E;
  GL_CONSTANT_COLOR = $8001;
  GL_ONE_MINUS_CONSTANT_COLOR = $8002;
  GL_CONSTANT_ALPHA = $8003;
  GL_ONE_MINUS_CONSTANT_ALPHA = $8004;
  GL_BLEND_COLOR = $8005;
  GL_FUNC_ADD = $8006;
  GL_MIN = $8007;
  GL_MAX = $8008;
  GL_BLEND_EQUATION = $8009;
  GL_FUNC_SUBTRACT = $800A;
  GL_FUNC_REVERSE_SUBTRACT = $800B;
  GL_CONVOLUTION_1D = $8010;
  GL_CONVOLUTION_2D = $8011;
  GL_SEPARABLE_2D = $8012;
  GL_CONVOLUTION_BORDER_MODE = $8013;
  GL_CONVOLUTION_FILTER_SCALE = $8014;
  GL_CONVOLUTION_FILTER_BIAS = $8015;
  GL_REDUCE = $8016;
  GL_CONVOLUTION_FORMAT = $8017;
  GL_CONVOLUTION_WIDTH = $8018;
  GL_CONVOLUTION_HEIGHT = $8019;
  GL_MAX_CONVOLUTION_WIDTH = $801A;
  GL_MAX_CONVOLUTION_HEIGHT = $801B;
  GL_POST_CONVOLUTION_RED_SCALE = $801C;
  GL_POST_CONVOLUTION_GREEN_SCALE = $801D;
  GL_POST_CONVOLUTION_BLUE_SCALE = $801E;
  GL_POST_CONVOLUTION_ALPHA_SCALE = $801F;
  GL_POST_CONVOLUTION_RED_BIAS = $8020;
  GL_POST_CONVOLUTION_GREEN_BIAS = $8021;
  GL_POST_CONVOLUTION_BLUE_BIAS = $8022;
  GL_POST_CONVOLUTION_ALPHA_BIAS = $8023;
  GL_HISTOGRAM = $8024;
  GL_PROXY_HISTOGRAM = $8025;
  GL_HISTOGRAM_WIDTH = $8026;
  GL_HISTOGRAM_FORMAT = $8027;
  GL_HISTOGRAM_RED_SIZE = $8028;
  GL_HISTOGRAM_GREEN_SIZE = $8029;
  GL_HISTOGRAM_BLUE_SIZE = $802A;
  GL_HISTOGRAM_ALPHA_SIZE = $802B;
  GL_HISTOGRAM_LUMINANCE_SIZE = $802C;
  GL_HISTOGRAM_SINK = $802D;
  GL_MINMAX = $802E;
  GL_MINMAX_FORMAT = $802F;
  GL_MINMAX_SINK = $8030;
  GL_TABLE_TOO_LARGE = $8031;
  GL_COLOR_MATRIX = $80B1;
  GL_COLOR_MATRIX_STACK_DEPTH = $80B2;
  GL_MAX_COLOR_MATRIX_STACK_DEPTH = $80B3;
  GL_POST_COLOR_MATRIX_RED_SCALE = $80B4;
  GL_POST_COLOR_MATRIX_GREEN_SCALE = $80B5;
  GL_POST_COLOR_MATRIX_BLUE_SCALE = $80B6;
  GL_POST_COLOR_MATRIX_ALPHA_SCALE = $80B7;
  GL_POST_COLOR_MATRIX_RED_BIAS = $80B8;
  GL_POST_COLOR_MATRIX_GREEN_BIAS = $80B9;
  GL_POST_COLOR_MATRIX_BLUE_BIAS = $80BA;
  GL_POST_COLOR_MATRIX_ALPHA_BIAS = $80BB;
  GL_COLOR_TABLE = $80D0;
  GL_POST_CONVOLUTION_COLOR_TABLE = $80D1;
  GL_POST_COLOR_MATRIX_COLOR_TABLE = $80D2;
  GL_PROXY_COLOR_TABLE = $80D3;
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = $80D4;
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = $80D5;
  GL_COLOR_TABLE_SCALE = $80D6;
  GL_COLOR_TABLE_BIAS = $80D7;
  GL_COLOR_TABLE_FORMAT = $80D8;
  GL_COLOR_TABLE_WIDTH = $80D9;
  GL_COLOR_TABLE_RED_SIZE = $80DA;
  GL_COLOR_TABLE_GREEN_SIZE = $80DB;
  GL_COLOR_TABLE_BLUE_SIZE = $80DC;
  GL_COLOR_TABLE_ALPHA_SIZE = $80DD;
  GL_COLOR_TABLE_LUMINANCE_SIZE = $80DE;
  GL_COLOR_TABLE_INTENSITY_SIZE = $80DF;
  GL_CONSTANT_BORDER = $8151;
  GL_REPLICATE_BORDER = $8153;
  GL_CONVOLUTION_BORDER_COLOR = $8154;
  GL_VERSION_1_3 = 1;
  GL_TEXTURE0 = $84C0;
  GL_TEXTURE1 = $84C1;
  GL_TEXTURE2 = $84C2;
  GL_TEXTURE3 = $84C3;
  GL_TEXTURE4 = $84C4;
  GL_TEXTURE5 = $84C5;
  GL_TEXTURE6 = $84C6;
  GL_TEXTURE7 = $84C7;
  GL_TEXTURE8 = $84C8;
  GL_TEXTURE9 = $84C9;
  GL_TEXTURE10 = $84CA;
  GL_TEXTURE11 = $84CB;
  GL_TEXTURE12 = $84CC;
  GL_TEXTURE13 = $84CD;
  GL_TEXTURE14 = $84CE;
  GL_TEXTURE15 = $84CF;
  GL_TEXTURE16 = $84D0;
  GL_TEXTURE17 = $84D1;
  GL_TEXTURE18 = $84D2;
  GL_TEXTURE19 = $84D3;
  GL_TEXTURE20 = $84D4;
  GL_TEXTURE21 = $84D5;
  GL_TEXTURE22 = $84D6;
  GL_TEXTURE23 = $84D7;
  GL_TEXTURE24 = $84D8;
  GL_TEXTURE25 = $84D9;
  GL_TEXTURE26 = $84DA;
  GL_TEXTURE27 = $84DB;
  GL_TEXTURE28 = $84DC;
  GL_TEXTURE29 = $84DD;
  GL_TEXTURE30 = $84DE;
  GL_TEXTURE31 = $84DF;
  GL_ACTIVE_TEXTURE = $84E0;
  GL_CLIENT_ACTIVE_TEXTURE = $84E1;
  GL_MAX_TEXTURE_UNITS = $84E2;
  GL_TRANSPOSE_MODELVIEW_MATRIX = $84E3;
  GL_TRANSPOSE_PROJECTION_MATRIX = $84E4;
  GL_TRANSPOSE_TEXTURE_MATRIX = $84E5;
  GL_TRANSPOSE_COLOR_MATRIX = $84E6;
  GL_MULTISAMPLE = $809D;
  GL_SAMPLE_ALPHA_TO_COVERAGE = $809E;
  GL_SAMPLE_ALPHA_TO_ONE = $809F;
  GL_SAMPLE_COVERAGE = $80A0;
  GL_SAMPLE_BUFFERS = $80A8;
  GL_SAMPLES = $80A9;
  GL_SAMPLE_COVERAGE_VALUE = $80AA;
  GL_SAMPLE_COVERAGE_INVERT = $80AB;
  GL_MULTISAMPLE_BIT = $20000000;
  GL_NORMAL_MAP = $8511;
  GL_REFLECTION_MAP = $8512;
  GL_TEXTURE_CUBE_MAP = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $851A;
  GL_PROXY_TEXTURE_CUBE_MAP = $851B;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = $851C;
  GL_COMPRESSED_ALPHA = $84E9;
  GL_COMPRESSED_LUMINANCE = $84EA;
  GL_COMPRESSED_LUMINANCE_ALPHA = $84EB;
  GL_COMPRESSED_INTENSITY = $84EC;
  GL_COMPRESSED_RGB = $84ED;
  GL_COMPRESSED_RGBA = $84EE;
  GL_TEXTURE_COMPRESSION_HINT = $84EF;
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE = $86A0;
  GL_TEXTURE_COMPRESSED = $86A1;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
  GL_COMPRESSED_TEXTURE_FORMATS = $86A3;
  GL_CLAMP_TO_BORDER = $812D;
  GL_CLAMP_TO_BORDER_SGIS = $812D;
  GL_COMBINE = $8570;
  GL_COMBINE_RGB = $8571;
  GL_COMBINE_ALPHA = $8572;
  GL_SOURCE0_RGB = $8580;
  GL_SOURCE1_RGB = $8581;
  GL_SOURCE2_RGB = $8582;
  GL_SOURCE0_ALPHA = $8588;
  GL_SOURCE1_ALPHA = $8589;
  GL_SOURCE2_ALPHA = $858A;
  GL_OPERAND0_RGB = $8590;
  GL_OPERAND1_RGB = $8591;
  GL_OPERAND2_RGB = $8592;
  GL_OPERAND0_ALPHA = $8598;
  GL_OPERAND1_ALPHA = $8599;
  GL_OPERAND2_ALPHA = $859A;
  GL_RGB_SCALE = $8573;
  GL_ADD_SIGNED = $8574;
  GL_INTERPOLATE = $8575;
  GL_SUBTRACT = $84E7;
  GL_CONSTANT = $8576;
  GL_PRIMARY_COLOR = $8577;
  GL_PREVIOUS = $8578;
  GL_DOT3_RGB = $86AE;
  GL_DOT3_RGBA = $86AF;
  GL_VERSION_1_4 = 1;
  GL_BLEND_DST_RGB = $80C8;
  GL_BLEND_SRC_RGB = $80C9;
  GL_BLEND_DST_ALPHA = $80CA;
  GL_BLEND_SRC_ALPHA = $80CB;
  GL_POINT_SIZE_MIN = $8126;
  GL_POINT_SIZE_MAX = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE = $8128;
  GL_POINT_DISTANCE_ATTENUATION = $8129;
  GL_GENERATE_MIPMAP = $8191;
  GL_GENERATE_MIPMAP_HINT = $8192;
  GL_DEPTH_COMPONENT16 = $81A5;
  GL_DEPTH_COMPONENT24 = $81A6;
  GL_DEPTH_COMPONENT32 = $81A7;
  GL_MIRRORED_REPEAT = $8370;
  GL_FOG_COORDINATE_SOURCE = $8450;
  GL_FOG_COORDINATE = $8451;
  GL_FRAGMENT_DEPTH = $8452;
  GL_CURRENT_FOG_COORDINATE = $8453;
  GL_FOG_COORDINATE_ARRAY_TYPE = $8454;
  GL_FOG_COORDINATE_ARRAY_STRIDE = $8455;
  GL_FOG_COORDINATE_ARRAY_POINTER = $8456;
  GL_FOG_COORDINATE_ARRAY = $8457;
  GL_COLOR_SUM = $8458;
  GL_CURRENT_SECONDARY_COLOR = $8459;
  GL_SECONDARY_COLOR_ARRAY_SIZE = $845A;
  GL_SECONDARY_COLOR_ARRAY_TYPE = $845B;
  GL_SECONDARY_COLOR_ARRAY_STRIDE = $845C;
  GL_SECONDARY_COLOR_ARRAY_POINTER = $845D;
  GL_SECONDARY_COLOR_ARRAY = $845E;
  GL_MAX_TEXTURE_LOD_BIAS = $84FD;
  GL_TEXTURE_FILTER_CONTROL = $8500;
  GL_TEXTURE_LOD_BIAS = $8501;
  GL_INCR_WRAP = $8507;
  GL_DECR_WRAP = $8508;
  GL_TEXTURE_DEPTH_SIZE = $884A;
  GL_DEPTH_TEXTURE_MODE = $884B;
  GL_TEXTURE_COMPARE_MODE = $884C;
  GL_TEXTURE_COMPARE_FUNC = $884D;
  GL_COMPARE_R_TO_TEXTURE = $884E;
  GL_VERSION_1_5 = 1;
  GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
  GL_FOG_COORD = GL_FOG_COORDINATE;
  GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
  GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
  GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
  GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
  GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
  GL_SRC0_RGB = GL_SOURCE0_RGB;
  GL_SRC1_RGB = GL_SOURCE1_RGB;
  GL_SRC2_RGB = GL_SOURCE2_RGB;
  GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
  GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
  GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
  GL_BUFFER_SIZE = $8764;
  GL_BUFFER_USAGE = $8765;
  GL_ARRAY_BUFFER = $8892;
  GL_ELEMENT_ARRAY_BUFFER = $8893;
  GL_ARRAY_BUFFER_BINDING = $8894;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = $8895;
  GL_VERTEX_ARRAY_BUFFER_BINDING = $8896;
  GL_NORMAL_ARRAY_BUFFER_BINDING = $8897;
  GL_COLOR_ARRAY_BUFFER_BINDING = $8898;
  GL_INDEX_ARRAY_BUFFER_BINDING = $8899;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = $889A;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = $889B;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = $889C;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = $889D;
  GL_WEIGHT_ARRAY_BUFFER_BINDING = $889E;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
  GL_READ_ONLY = $88B8;
  GL_WRITE_ONLY = $88B9;
  GL_READ_WRITE = $88BA;
  GL_BUFFER_ACCESS = $88BB;
  GL_BUFFER_MAPPED = $88BC;
  GL_BUFFER_MAP_POINTER = $88BD;
  GL_STREAM_DRAW = $88E0;
  GL_STREAM_READ = $88E1;
  GL_STREAM_COPY = $88E2;
  GL_STATIC_DRAW = $88E4;
  GL_STATIC_READ = $88E5;
  GL_STATIC_COPY = $88E6;
  GL_DYNAMIC_DRAW = $88E8;
  GL_DYNAMIC_READ = $88E9;
  GL_DYNAMIC_COPY = $88EA;
  GL_SAMPLES_PASSED = $8914;
  GL_QUERY_COUNTER_BITS = $8864;
  GL_CURRENT_QUERY = $8865;
  GL_QUERY_RESULT = $8866;
  GL_QUERY_RESULT_AVAILABLE = $8867;
  GL_VERSION_2_0 = 1;
  GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = $8622;
  GL_VERTEX_ATTRIB_ARRAY_SIZE = $8623;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = $8624;
  GL_VERTEX_ATTRIB_ARRAY_TYPE = $8625;
  GL_CURRENT_VERTEX_ATTRIB = $8626;
  GL_VERTEX_PROGRAM_POINT_SIZE = $8642;
  GL_VERTEX_PROGRAM_TWO_SIDE = $8643;
  GL_VERTEX_ATTRIB_ARRAY_POINTER = $8645;
  GL_STENCIL_BACK_FUNC = $8800;
  GL_STENCIL_BACK_FAIL = $8801;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = $8802;
  GL_STENCIL_BACK_PASS_DEPTH_PASS = $8803;
  GL_MAX_DRAW_BUFFERS = $8824;
  GL_DRAW_BUFFER0 = $8825;
  GL_DRAW_BUFFER1 = $8826;
  GL_DRAW_BUFFER2 = $8827;
  GL_DRAW_BUFFER3 = $8828;
  GL_DRAW_BUFFER4 = $8829;
  GL_DRAW_BUFFER5 = $882A;
  GL_DRAW_BUFFER6 = $882B;
  GL_DRAW_BUFFER7 = $882C;
  GL_DRAW_BUFFER8 = $882D;
  GL_DRAW_BUFFER9 = $882E;
  GL_DRAW_BUFFER10 = $882F;
  GL_DRAW_BUFFER11 = $8830;
  GL_DRAW_BUFFER12 = $8831;
  GL_DRAW_BUFFER13 = $8832;
  GL_DRAW_BUFFER14 = $8833;
  GL_DRAW_BUFFER15 = $8834;
  GL_BLEND_EQUATION_ALPHA = $883D;
  GL_POINT_SPRITE = $8861;
  GL_COORD_REPLACE = $8862;
  GL_MAX_VERTEX_ATTRIBS = $8869;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = $886A;
  GL_MAX_TEXTURE_COORDS = $8871;
  GL_MAX_TEXTURE_IMAGE_UNITS = $8872;
  GL_FRAGMENT_SHADER = $8B30;
  GL_VERTEX_SHADER = $8B31;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS = $8B4A;
  GL_MAX_VARYING_FLOATS = $8B4B;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
  GL_SHADER_TYPE = $8B4F;
  GL_FLOAT_VEC2 = $8B50;
  GL_FLOAT_VEC3 = $8B51;
  GL_FLOAT_VEC4 = $8B52;
  GL_INT_VEC2 = $8B53;
  GL_INT_VEC3 = $8B54;
  GL_INT_VEC4 = $8B55;
  GL_BOOL = $8B56;
  GL_BOOL_VEC2 = $8B57;
  GL_BOOL_VEC3 = $8B58;
  GL_BOOL_VEC4 = $8B59;
  GL_FLOAT_MAT2 = $8B5A;
  GL_FLOAT_MAT3 = $8B5B;
  GL_FLOAT_MAT4 = $8B5C;
  GL_SAMPLER_1D = $8B5D;
  GL_SAMPLER_2D = $8B5E;
  GL_SAMPLER_3D = $8B5F;
  GL_SAMPLER_CUBE = $8B60;
  GL_SAMPLER_1D_SHADOW = $8B61;
  GL_SAMPLER_2D_SHADOW = $8B62;
  GL_DELETE_STATUS = $8B80;
  GL_COMPILE_STATUS = $8B81;
  GL_LINK_STATUS = $8B82;
  GL_VALIDATE_STATUS = $8B83;
  GL_INFO_LOG_LENGTH = $8B84;
  GL_ATTACHED_SHADERS = $8B85;
  GL_ACTIVE_UNIFORMS = $8B86;
  GL_ACTIVE_UNIFORM_MAX_LENGTH = $8B87;
  GL_SHADER_SOURCE_LENGTH = $8B88;
  GL_ACTIVE_ATTRIBUTES = $8B89;
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = $8B8A;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;
  GL_SHADING_LANGUAGE_VERSION = $8B8C;
  GL_CURRENT_PROGRAM = $8B8D;
  GL_POINT_SPRITE_COORD_ORIGIN = $8CA0;
  GL_LOWER_LEFT = $8CA1;
  GL_UPPER_LEFT = $8CA2;
  GL_STENCIL_BACK_REF = $8CA3;
  GL_STENCIL_BACK_VALUE_MASK = $8CA4;
  GL_STENCIL_BACK_WRITEMASK = $8CA5;
  GL_VERSION_2_1 = 1;
  GL_CURRENT_RASTER_SECONDARY_COLOR = $845F;
  GL_PIXEL_PACK_BUFFER = $88EB;
  GL_PIXEL_UNPACK_BUFFER = $88EC;
  GL_PIXEL_PACK_BUFFER_BINDING = $88ED;
  GL_PIXEL_UNPACK_BUFFER_BINDING = $88EF;
  GL_FLOAT_MAT2x3 = $8B65;
  GL_FLOAT_MAT2x4 = $8B66;
  GL_FLOAT_MAT3x2 = $8B67;
  GL_FLOAT_MAT3x4 = $8B68;
  GL_FLOAT_MAT4x2 = $8B69;
  GL_FLOAT_MAT4x3 = $8B6A;
  GL_SRGB = $8C40;
  GL_SRGB8 = $8C41;
  GL_SRGB_ALPHA = $8C42;
  GL_SRGB8_ALPHA8 = $8C43;
  GL_SLUMINANCE_ALPHA = $8C44;
  GL_SLUMINANCE8_ALPHA8 = $8C45;
  GL_SLUMINANCE = $8C46;
  GL_SLUMINANCE8 = $8C47;
  GL_COMPRESSED_SRGB = $8C48;
  GL_COMPRESSED_SRGB_ALPHA = $8C49;
  GL_COMPRESSED_SLUMINANCE = $8C4A;
  GL_COMPRESSED_SLUMINANCE_ALPHA = $8C4B;
  GL_COMPARE_R_TO_TEXTURE_ARB = $884E;
  GL_COMPARE_REF_TO_TEXTURE = GL_COMPARE_R_TO_TEXTURE_ARB;
  GL_CLIP_PLANE0 = $3000;
  GL_CLIP_DISTANCE0 = GL_CLIP_PLANE0;
  GL_CLIP_PLANE1 = $3001;
  GL_CLIP_DISTANCE1 = GL_CLIP_PLANE1;
  GL_CLIP_PLANE2 = $3002;
  GL_CLIP_DISTANCE2 = GL_CLIP_PLANE2;
  GL_CLIP_PLANE3 = $3003;
  GL_CLIP_DISTANCE3 = GL_CLIP_PLANE3;
  GL_CLIP_PLANE4 = $3004;
  GL_CLIP_DISTANCE4 = GL_CLIP_PLANE4;
  GL_CLIP_PLANE5 = $3005;
  GL_CLIP_DISTANCE5 = GL_CLIP_PLANE5;
  GL_MAX_CLIP_PLANES = $0D32;
  GL_MAX_CLIP_DISTANCES = GL_MAX_CLIP_PLANES;
  GL_MAJOR_VERSION = $821B;
  GL_MINOR_VERSION = $821C;
  GL_NUM_EXTENSIONS = $821D;
  GL_CONTEXT_FLAGS = $821E;
  GL_DEPTH_BUFFER = $8223;
  GL_STENCIL_BUFFER = $8224;
  GL_COMPRESSED_RED = $8225;
  GL_COMPRESSED_RG = $8226;
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = $0001;
  GL_RGBA32F = $8814;
  GL_RGB32F = $8815;
  GL_RGBA16F = $881A;
  GL_RGB16F = $881B;
  GL_VERTEX_ATTRIB_ARRAY_INTEGER = $88FD;
  GL_MAX_ARRAY_TEXTURE_LAYERS = $88FF;
  GL_MIN_PROGRAM_TEXEL_OFFSET = $8904;
  GL_MAX_PROGRAM_TEXEL_OFFSET = $8905;
  GL_CLAMP_VERTEX_COLOR = $891A;
  GL_CLAMP_FRAGMENT_COLOR = $891B;
  GL_CLAMP_READ_COLOR = $891C;
  GL_FIXED_ONLY = $891D;
  GL_MAX_VARYING_COMPONENTS = GL_MAX_VARYING_FLOATS;
  GL_TEXTURE_RED_TYPE = $8C10;
  GL_TEXTURE_GREEN_TYPE = $8C11;
  GL_TEXTURE_BLUE_TYPE = $8C12;
  GL_TEXTURE_ALPHA_TYPE = $8C13;
  GL_TEXTURE_LUMINANCE_TYPE = $8C14;
  GL_TEXTURE_INTENSITY_TYPE = $8C15;
  GL_TEXTURE_DEPTH_TYPE = $8C16;
  GL_UNSIGNED_NORMALIZED = $8C17;
  GL_TEXTURE_1D_ARRAY = $8C18;
  GL_PROXY_TEXTURE_1D_ARRAY = $8C19;
  GL_TEXTURE_2D_ARRAY = $8C1A;
  GL_PROXY_TEXTURE_2D_ARRAY = $8C1B;
  GL_TEXTURE_BINDING_1D_ARRAY = $8C1C;
  GL_TEXTURE_BINDING_2D_ARRAY = $8C1D;
  GL_R11F_G11F_B10F = $8C3A;
  GL_UNSIGNED_INT_10F_11F_11F_REV = $8C3B;
  GL_RGB9_E5 = $8C3D;
  GL_UNSIGNED_INT_5_9_9_9_REV = $8C3E;
  GL_TEXTURE_SHARED_SIZE = $8C3F;
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = $8C76;
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE = $8C7F;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = $8C80;
  GL_TRANSFORM_FEEDBACK_VARYINGS = $8C83;
  GL_TRANSFORM_FEEDBACK_BUFFER_START = $8C84;
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = $8C85;
  GL_PRIMITIVES_GENERATED = $8C87;
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = $8C88;
  GL_RASTERIZER_DISCARD = $8C89;
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = $8C8A;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = $8C8B;
  GL_INTERLEAVED_ATTRIBS = $8C8C;
  GL_SEPARATE_ATTRIBS = $8C8D;
  GL_TRANSFORM_FEEDBACK_BUFFER = $8C8E;
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = $8C8F;
  GL_RGBA32UI = $8D70;
  GL_RGB32UI = $8D71;
  GL_RGBA16UI = $8D76;
  GL_RGB16UI = $8D77;
  GL_RGBA8UI = $8D7C;
  GL_RGB8UI = $8D7D;
  GL_RGBA32I = $8D82;
  GL_RGB32I = $8D83;
  GL_RGBA16I = $8D88;
  GL_RGB16I = $8D89;
  GL_RGBA8I = $8D8E;
  GL_RGB8I = $8D8F;
  GL_RED_INTEGER = $8D94;
  GL_GREEN_INTEGER = $8D95;
  GL_BLUE_INTEGER = $8D96;
  GL_ALPHA_INTEGER = $8D97;
  GL_RGB_INTEGER = $8D98;
  GL_RGBA_INTEGER = $8D99;
  GL_BGR_INTEGER = $8D9A;
  GL_BGRA_INTEGER = $8D9B;
  GL_SAMPLER_1D_ARRAY = $8DC0;
  GL_SAMPLER_2D_ARRAY = $8DC1;
  GL_SAMPLER_1D_ARRAY_SHADOW = $8DC3;
  GL_SAMPLER_2D_ARRAY_SHADOW = $8DC4;
  GL_SAMPLER_CUBE_SHADOW = $8DC5;
  GL_UNSIGNED_INT_VEC2 = $8DC6;
  GL_UNSIGNED_INT_VEC3 = $8DC7;
  GL_UNSIGNED_INT_VEC4 = $8DC8;
  GL_INT_SAMPLER_1D = $8DC9;
  GL_INT_SAMPLER_2D = $8DCA;
  GL_INT_SAMPLER_3D = $8DCB;
  GL_INT_SAMPLER_CUBE = $8DCC;
  GL_INT_SAMPLER_1D_ARRAY = $8DCE;
  GL_INT_SAMPLER_2D_ARRAY = $8DCF;
  GL_UNSIGNED_INT_SAMPLER_1D = $8DD1;
  GL_UNSIGNED_INT_SAMPLER_2D = $8DD2;
  GL_UNSIGNED_INT_SAMPLER_3D = $8DD3;
  GL_UNSIGNED_INT_SAMPLER_CUBE = $8DD4;
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = $8DD6;
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = $8DD7;
  GL_QUERY_WAIT = $8E13;
  GL_QUERY_NO_WAIT = $8E14;
  GL_QUERY_BY_REGION_WAIT = $8E15;
  GL_QUERY_BY_REGION_NO_WAIT = $8E16;
  GL_SAMPLER_2D_TRect = $8B63;
  GL_SAMPLER_2D_TRect_SHADOW = $8B64;
  GL_SAMPLER_BUFFER = $8DC2;
  GL_INT_SAMPLER_2D_TRect = $8DCD;
  GL_INT_SAMPLER_BUFFER = $8DD0;
  GL_UNSIGNED_INT_SAMPLER_2D_TRect = $8DD5;
  GL_UNSIGNED_INT_SAMPLER_BUFFER = $8DD8;
  GL_TEXTURE_BUFFER = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE = $8C2B;
  GL_TEXTURE_BINDING_BUFFER = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING = $8C2D;
  GL_TEXTURE_BUFFER_FORMAT = $8C2E;
  GL_TEXTURE_TRectANGLE = $84F5;
  GL_TEXTURE_BINDING_TRectANGLE = $84F6;
  GL_PROXY_TEXTURE_TRectANGLE = $84F7;
  GL_MAX_TRectANGLE_TEXTURE_SIZE = $84F8;
  GL_RED_SNORM = $8F90;
  GL_RG_SNORM = $8F91;
  GL_RGB_SNORM = $8F92;
  GL_RGBA_SNORM = $8F93;
  GL_R8_SNORM = $8F94;
  GL_RG8_SNORM = $8F95;
  GL_RGB8_SNORM = $8F96;
  GL_RGBA8_SNORM = $8F97;
  GL_R16_SNORM = $8F98;
  GL_RG16_SNORM = $8F99;
  GL_RGB16_SNORM = $8F9A;
  GL_RGBA16_SNORM = $8F9B;
  GL_SIGNED_NORMALIZED = $8F9C;
  GL_PRIMITIVE_RESTART = $8F9D;
  GL_PRIMITIVE_RESTART_INDEX = $8F9E;
  GL_CONTEXT_CORE_PROFILE_BIT = $00000001;
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = $00000002;
  GL_LINES_ADJACENCY = $000A;
  GL_LINE_STRIP_ADJACENCY = $000B;
  GL_TRIANGLES_ADJACENCY = $000C;
  GL_TRIANGLE_STRIP_ADJACENCY = $000D;
  GL_PROGRAM_POINT_SIZE = $8642;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = $8C29;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED = $8DA7;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = $8DA8;
  GL_GEOMETRY_SHADER = $8DD9;
  GL_GEOMETRY_VERTICES_OUT = $8916;
  GL_GEOMETRY_INPUT_TYPE = $8917;
  GL_GEOMETRY_OUTPUT_TYPE = $8918;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = $8DDF;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = $8DE1;
  GL_MAX_VERTEX_OUTPUT_COMPONENTS = $9122;
  GL_MAX_GEOMETRY_INPUT_COMPONENTS = $9123;
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = $9124;
  GL_MAX_FRAGMENT_INPUT_COMPONENTS = $9125;
  GL_CONTEXT_PROFILE_MASK = $9126;
  GL_NUM_SHADING_LANGUAGE_VERSIONS = $82E9;
  GL_VERTEX_ATTRIB_ARRAY_LONG = $874E;
  GL_COMPRESSED_RGB8_ETC2 = $9274;
  GL_COMPRESSED_SRGB8_ETC2 = $9275;
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9276;
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9277;
  GL_COMPRESSED_RGBA8_ETC2_EAC = $9278;
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = $9279;
  GL_COMPRESSED_R11_EAC = $9270;
  GL_COMPRESSED_SIGNED_R11_EAC = $9271;
  GL_COMPRESSED_RG11_EAC = $9272;
  GL_COMPRESSED_SIGNED_RG11_EAC = $9273;
  GL_PRIMITIVE_RESTART_FIXED_INDEX = $8D69;
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE = $8D6A;
  GL_MAX_ELEMENT_INDEX = $8D6B;
  GL_COMPUTE_SHADER = $91B9;
  GL_MAX_COMPUTE_UNIFORM_BLOCKS = $91BB;
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = $91BC;
  GL_MAX_COMPUTE_IMAGE_UNIFORMS = $91BD;
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = $8262;
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS = $8263;
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = $8264;
  GL_MAX_COMPUTE_ATOMIC_COUNTERS = $8265;
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = $8266;
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = $90EB;
  GL_MAX_COMPUTE_WORK_GROUP_COUNT = $91BE;
  GL_MAX_COMPUTE_WORK_GROUP_SIZE = $91BF;
  GL_COMPUTE_WORK_GROUP_SIZE = $8267;
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = $90EC;
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = $90ED;
  GL_DISPATCH_INDITRect_BUFFER = $90EE;
  GL_DISPATCH_INDITRect_BUFFER_BINDING = $90EF;
  GL_COMPUTE_SHADER_BIT = $00000020;
  GL_DEBUG_OUTPUT_SYNCHRONOUS = $8242;
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = $8243;
  GL_DEBUG_CALLBACK_FUNCTION = $8244;
  GL_DEBUG_CALLBACK_USER_PARAM = $8245;
  GL_DEBUG_SOURCE_API = $8246;
  GL_DEBUG_SOURCE_WINDOW_SYSTEM = $8247;
  GL_DEBUG_SOURCE_SHADER_COMPILER = $8248;
  GL_DEBUG_SOURCE_THIRD_PARTY = $8249;
  GL_DEBUG_SOURCE_APPLICATION = $824A;
  GL_DEBUG_SOURCE_OTHER = $824B;
  GL_DEBUG_TYPE_ERROR = $824C;
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = $824D;
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = $824E;
  GL_DEBUG_TYPE_PORTABILITY = $824F;
  GL_DEBUG_TYPE_PERFORMANCE = $8250;
  GL_DEBUG_TYPE_OTHER = $8251;
  GL_MAX_DEBUG_MESSAGE_LENGTH = $9143;
  GL_MAX_DEBUG_LOGGED_MESSAGES = $9144;
  GL_DEBUG_LOGGED_MESSAGES = $9145;
  GL_DEBUG_SEVERITY_HIGH = $9146;
  GL_DEBUG_SEVERITY_MEDIUM = $9147;
  GL_DEBUG_SEVERITY_LOW = $9148;
  GL_DEBUG_TYPE_MARKER = $8268;
  GL_DEBUG_TYPE_PUSH_GROUP = $8269;
  GL_DEBUG_TYPE_POP_GROUP = $826A;
  GL_DEBUG_SEVERITY_NOTIFICATION = $826B;
  GL_MAX_DEBUG_GROUP_STACK_DEPTH = $826C;
  GL_DEBUG_GROUP_STACK_DEPTH = $826D;
  GL_BUFFER = $82E0;
  GL_SHADER = $82E1;
  GL_PROGRAM = $82E2;
  GL_QUERY = $82E3;
  GL_PROGRAM_PIPELINE = $82E4;
  GL_SAMPLER = $82E6;
  GL_MAX_LABEL_LENGTH = $82E8;
  GL_DEBUG_OUTPUT = $92E0;
  GL_CONTEXT_FLAG_DEBUG_BIT = $00000002;
  GL_MAX_UNIFORM_LOCATIONS = $826E;
  GL_FRAMEBUFFER_DEFAULT_WIDTH = $9310;
  GL_FRAMEBUFFER_DEFAULT_HEIGHT = $9311;
  GL_FRAMEBUFFER_DEFAULT_LAYERS = $9312;
  GL_FRAMEBUFFER_DEFAULT_SAMPLES = $9313;
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = $9314;
  GL_MAX_FRAMEBUFFER_WIDTH = $9315;
  GL_MAX_FRAMEBUFFER_HEIGHT = $9316;
  GL_MAX_FRAMEBUFFER_LAYERS = $9317;
  GL_MAX_FRAMEBUFFER_SAMPLES = $9318;
  GL_INTERNALFORMAT_SUPPORTED = $826F;
  GL_INTERNALFORMAT_PREFERRED = $8270;
  GL_INTERNALFORMAT_RED_SIZE = $8271;
  GL_INTERNALFORMAT_GREEN_SIZE = $8272;
  GL_INTERNALFORMAT_BLUE_SIZE = $8273;
  GL_INTERNALFORMAT_ALPHA_SIZE = $8274;
  GL_INTERNALFORMAT_DEPTH_SIZE = $8275;
  GL_INTERNALFORMAT_STENCIL_SIZE = $8276;
  GL_INTERNALFORMAT_SHARED_SIZE = $8277;
  GL_INTERNALFORMAT_RED_TYPE = $8278;
  GL_INTERNALFORMAT_GREEN_TYPE = $8279;
  GL_INTERNALFORMAT_BLUE_TYPE = $827A;
  GL_INTERNALFORMAT_ALPHA_TYPE = $827B;
  GL_INTERNALFORMAT_DEPTH_TYPE = $827C;
  GL_INTERNALFORMAT_STENCIL_TYPE = $827D;
  GL_MAX_WIDTH = $827E;
  GL_MAX_HEIGHT = $827F;
  GL_MAX_DEPTH = $8280;
  GL_MAX_LAYERS = $8281;
  GL_MAX_COMBINED_DIMENSIONS = $8282;
  GL_COLOR_COMPONENTS = $8283;
  GL_DEPTH_COMPONENTS = $8284;
  GL_STENCIL_COMPONENTS = $8285;
  GL_COLOR_RENDERABLE = $8286;
  GL_DEPTH_RENDERABLE = $8287;
  GL_STENCIL_RENDERABLE = $8288;
  GL_FRAMEBUFFER_RENDERABLE = $8289;
  GL_FRAMEBUFFER_RENDERABLE_LAYERED = $828A;
  GL_FRAMEBUFFER_BLEND = $828B;
  GL_READ_PIXELS = $828C;
  GL_READ_PIXELS_FORMAT = $828D;
  GL_READ_PIXELS_TYPE = $828E;
  GL_TEXTURE_IMAGE_FORMAT = $828F;
  GL_TEXTURE_IMAGE_TYPE = $8290;
  GL_GET_TEXTURE_IMAGE_FORMAT = $8291;
  GL_GET_TEXTURE_IMAGE_TYPE = $8292;
  GL_MIPMAP = $8293;
  GL_MANUAL_GENERATE_MIPMAP = $8294;
  GL_AUTO_GENERATE_MIPMAP = $8295;
  GL_COLOR_ENCODING = $8296;
  GL_SRGB_READ = $8297;
  GL_SRGB_WRITE = $8298;
  GL_FILTER = $829A;
  GL_VERTEX_TEXTURE = $829B;
  GL_TESS_CONTROL_TEXTURE = $829C;
  GL_TESS_EVALUATION_TEXTURE = $829D;
  GL_GEOMETRY_TEXTURE = $829E;
  GL_FRAGMENT_TEXTURE = $829F;
  GL_COMPUTE_TEXTURE = $82A0;
  GL_TEXTURE_SHADOW = $82A1;
  GL_TEXTURE_GATHER = $82A2;
  GL_TEXTURE_GATHER_SHADOW = $82A3;
  GL_SHADER_IMAGE_LOAD = $82A4;
  GL_SHADER_IMAGE_STORE = $82A5;
  GL_SHADER_IMAGE_ATOMIC = $82A6;
  GL_IMAGE_TEXEL_SIZE = $82A7;
  GL_IMAGE_COMPATIBILITY_CLASS = $82A8;
  GL_IMAGE_PIXEL_FORMAT = $82A9;
  GL_IMAGE_PIXEL_TYPE = $82AA;
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = $82AC;
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = $82AD;
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = $82AE;
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = $82AF;
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = $82B1;
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = $82B2;
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE = $82B3;
  GL_CLEAR_BUFFER = $82B4;
  GL_TEXTURE_VIEW = $82B5;
  GL_VIEW_COMPATIBILITY_CLASS = $82B6;
  GL_FULL_SUPPORT = $82B7;
  GL_CAVEAT_SUPPORT = $82B8;
  GL_IMAGE_CLASS_4_X_32 = $82B9;
  GL_IMAGE_CLASS_2_X_32 = $82BA;
  GL_IMAGE_CLASS_1_X_32 = $82BB;
  GL_IMAGE_CLASS_4_X_16 = $82BC;
  GL_IMAGE_CLASS_2_X_16 = $82BD;
  GL_IMAGE_CLASS_1_X_16 = $82BE;
  GL_IMAGE_CLASS_4_X_8 = $82BF;
  GL_IMAGE_CLASS_2_X_8 = $82C0;
  GL_IMAGE_CLASS_1_X_8 = $82C1;
  GL_IMAGE_CLASS_11_11_10 = $82C2;
  GL_IMAGE_CLASS_10_10_10_2 = $82C3;
  GL_VIEW_CLASS_128_BITS = $82C4;
  GL_VIEW_CLASS_96_BITS = $82C5;
  GL_VIEW_CLASS_64_BITS = $82C6;
  GL_VIEW_CLASS_48_BITS = $82C7;
  GL_VIEW_CLASS_32_BITS = $82C8;
  GL_VIEW_CLASS_24_BITS = $82C9;
  GL_VIEW_CLASS_16_BITS = $82CA;
  GL_VIEW_CLASS_8_BITS = $82CB;
  GL_VIEW_CLASS_S3TC_DXT1_RGB = $82CC;
  GL_VIEW_CLASS_S3TC_DXT1_RGBA = $82CD;
  GL_VIEW_CLASS_S3TC_DXT3_RGBA = $82CE;
  GL_VIEW_CLASS_S3TC_DXT5_RGBA = $82CF;
  GL_VIEW_CLASS_RGTC1_RED = $82D0;
  GL_VIEW_CLASS_RGTC2_RG = $82D1;
  GL_VIEW_CLASS_BPTC_UNORM = $82D2;
  GL_VIEW_CLASS_BPTC_FLOAT = $82D3;
  GL_UNIFORM = $92E1;
  GL_UNIFORM_BLOCK = $92E2;
  GL_PROGRAM_INPUT = $92E3;
  GL_PROGRAM_OUTPUT = $92E4;
  GL_BUFFER_VARIABLE = $92E5;
  GL_SHADER_STORAGE_BLOCK = $92E6;
  GL_VERTEX_SUBROUTINE = $92E8;
  GL_TESS_CONTROL_SUBROUTINE = $92E9;
  GL_TESS_EVALUATION_SUBROUTINE = $92EA;
  GL_GEOMETRY_SUBROUTINE = $92EB;
  GL_FRAGMENT_SUBROUTINE = $92EC;
  GL_COMPUTE_SUBROUTINE = $92ED;
  GL_VERTEX_SUBROUTINE_UNIFORM = $92EE;
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM = $92EF;
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = $92F0;
  GL_GEOMETRY_SUBROUTINE_UNIFORM = $92F1;
  GL_FRAGMENT_SUBROUTINE_UNIFORM = $92F2;
  GL_COMPUTE_SUBROUTINE_UNIFORM = $92F3;
  GL_TRANSFORM_FEEDBACK_VARYING = $92F4;
  GL_ACTIVE_RESOURCES = $92F5;
  GL_MAX_NAME_LENGTH = $92F6;
  GL_MAX_NUM_ACTIVE_VARIABLES = $92F7;
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES = $92F8;
  GL_NAME_LENGTH = $92F9;
  GL_TYPE = $92FA;
  GL_ARRAY_SIZE = $92FB;
  GL_OFFSET = $92FC;
  GL_BLOCK_INDEX = $92FD;
  GL_ARRAY_STRIDE = $92FE;
  GL_MATRIX_STRIDE = $92FF;
  GL_IS_ROW_MAJOR = $9300;
  GL_ATOMIC_COUNTER_BUFFER_INDEX = $9301;
  GL_BUFFER_BINDING = $9302;
  GL_BUFFER_DATA_SIZE = $9303;
  GL_NUM_ACTIVE_VARIABLES = $9304;
  GL_ACTIVE_VARIABLES = $9305;
  GL_REFERENCED_BY_VERTEX_SHADER = $9306;
  GL_REFERENCED_BY_TESS_CONTROL_SHADER = $9307;
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER = $9308;
  GL_REFERENCED_BY_GEOMETRY_SHADER = $9309;
  GL_REFERENCED_BY_FRAGMENT_SHADER = $930A;
  GL_REFERENCED_BY_COMPUTE_SHADER = $930B;
  GL_TOP_LEVEL_ARRAY_SIZE = $930C;
  GL_TOP_LEVEL_ARRAY_STRIDE = $930D;
  GL_LOCATION = $930E;
  GL_LOCATION_INDEX = $930F;
  GL_IS_PER_PATCH = $92E7;
  GL_SHADER_STORAGE_BUFFER = $90D2;
  GL_SHADER_STORAGE_BUFFER_BINDING = $90D3;
  GL_SHADER_STORAGE_BUFFER_START = $90D4;
  GL_SHADER_STORAGE_BUFFER_SIZE = $90D5;
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = $90D6;
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = $90D7;
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = $90D8;
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = $90D9;
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = $90DA;
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = $90DB;
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = $90DC;
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = $90DD;
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE = $90DE;
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = $90DF;
  GL_SHADER_STORAGE_BARRIER_BIT = $00002000;
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = $8F39;
  GL_DEPTH_STENCIL_TEXTURE_MODE = $90EA;
  GL_TEXTURE_BUFFER_OFFSET = $919D;
  GL_TEXTURE_BUFFER_SIZE = $919E;
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = $919F;
  GL_TEXTURE_VIEW_MIN_LEVEL = $82DB;
  GL_TEXTURE_VIEW_NUM_LEVELS = $82DC;
  GL_TEXTURE_VIEW_MIN_LAYER = $82DD;
  GL_TEXTURE_VIEW_NUM_LAYERS = $82DE;
  GL_TEXTURE_IMMUTABLE_LEVELS = $82DF;
  GL_VERTEX_ATTRIB_BINDING = $82D4;
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D5;
  GL_VERTEX_BINDING_DIVISOR = $82D6;
  GL_VERTEX_BINDING_OFFSET = $82D7;
  GL_VERTEX_BINDING_STRIDE = $82D8;
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D9;
  GL_MAX_VERTEX_ATTRIB_BINDINGS = $82DA;
  GL_VERTEX_BINDING_BUFFER = $8F4F;
  GL_DISPLAY_LIST = $82E7;
  GL_TEXTURE0_ARB = $84C0;
  GL_TEXTURE1_ARB = $84C1;
  GL_TEXTURE2_ARB = $84C2;
  GL_TEXTURE3_ARB = $84C3;
  GL_TEXTURE4_ARB = $84C4;
  GL_TEXTURE5_ARB = $84C5;
  GL_TEXTURE6_ARB = $84C6;
  GL_TEXTURE7_ARB = $84C7;
  GL_TEXTURE8_ARB = $84C8;
  GL_TEXTURE9_ARB = $84C9;
  GL_TEXTURE10_ARB = $84CA;
  GL_TEXTURE11_ARB = $84CB;
  GL_TEXTURE12_ARB = $84CC;
  GL_TEXTURE13_ARB = $84CD;
  GL_TEXTURE14_ARB = $84CE;
  GL_TEXTURE15_ARB = $84CF;
  GL_TEXTURE16_ARB = $84D0;
  GL_TEXTURE17_ARB = $84D1;
  GL_TEXTURE18_ARB = $84D2;
  GL_TEXTURE19_ARB = $84D3;
  GL_TEXTURE20_ARB = $84D4;
  GL_TEXTURE21_ARB = $84D5;
  GL_TEXTURE22_ARB = $84D6;
  GL_TEXTURE23_ARB = $84D7;
  GL_TEXTURE24_ARB = $84D8;
  GL_TEXTURE25_ARB = $84D9;
  GL_TEXTURE26_ARB = $84DA;
  GL_TEXTURE27_ARB = $84DB;
  GL_TEXTURE28_ARB = $84DC;
  GL_TEXTURE29_ARB = $84DD;
  GL_TEXTURE30_ARB = $84DE;
  GL_TEXTURE31_ARB = $84DF;
  GL_ACTIVE_TEXTURE_ARB = $84E0;
  GL_CLIENT_ACTIVE_TEXTURE_ARB = $84E1;
  GL_MAX_TEXTURE_UNITS_ARB = $84E2;
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = $84E3;
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB = $84E4;
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB = $84E5;
  GL_TRANSPOSE_COLOR_MATRIX_ARB = $84E6;
  GL_MULTISAMPLE_ARB = $809D;
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = $809E;
  GL_SAMPLE_ALPHA_TO_ONE_ARB = $809F;
  GL_SAMPLE_COVERAGE_ARB = $80A0;
  GL_SAMPLE_BUFFERS_ARB = $80A8;
  GL_SAMPLES_ARB = $80A9;
  GL_SAMPLE_COVERAGE_VALUE_ARB = $80AA;
  GL_SAMPLE_COVERAGE_INVERT_ARB = $80AB;
  GL_MULTISAMPLE_BIT_ARB = $20000000;
  GL_NORMAL_MAP_ARB = $8511;
  GL_REFLECTION_MAP_ARB = $8512;
  GL_TEXTURE_CUBE_MAP_ARB = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP_ARB = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = $851A;
  GL_PROXY_TEXTURE_CUBE_MAP_ARB = $851B;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = $851C;
  GL_COMPRESSED_ALPHA_ARB = $84E9;
  GL_COMPRESSED_LUMINANCE_ARB = $84EA;
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB = $84EB;
  GL_COMPRESSED_INTENSITY_ARB = $84EC;
  GL_COMPRESSED_RGB_ARB = $84ED;
  GL_COMPRESSED_RGBA_ARB = $84EE;
  GL_TEXTURE_COMPRESSION_HINT_ARB = $84EF;
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = $86A0;
  GL_TEXTURE_COMPRESSED_ARB = $86A1;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = $86A2;
  GL_COMPRESSED_TEXTURE_FORMATS_ARB = $86A3;
  GL_CLAMP_TO_BORDER_ARB = $812D;
  GL_POINT_SIZE_MIN_ARB = $8126;
  GL_POINT_SIZE_MAX_ARB = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE_ARB = $8128;
  GL_POINT_DISTANCE_ATTENUATION_ARB = $8129;
  GL_MAX_VERTEX_UNITS_ARB = $86A4;
  GL_ACTIVE_VERTEX_UNITS_ARB = $86A5;
  GL_WEIGHT_SUM_UNITY_ARB = $86A6;
  GL_VERTEX_BLEND_ARB = $86A7;
  GL_CURRENT_WEIGHT_ARB = $86A8;
  GL_WEIGHT_ARRAY_TYPE_ARB = $86A9;
  GL_WEIGHT_ARRAY_STRIDE_ARB = $86AA;
  GL_WEIGHT_ARRAY_SIZE_ARB = $86AB;
  GL_WEIGHT_ARRAY_POINTER_ARB = $86AC;
  GL_WEIGHT_ARRAY_ARB = $86AD;
  GL_MODELVIEW0_ARB = $1700;
  GL_MODELVIEW1_ARB = $850A;
  GL_MODELVIEW2_ARB = $8722;
  GL_MODELVIEW3_ARB = $8723;
  GL_MODELVIEW4_ARB = $8724;
  GL_MODELVIEW5_ARB = $8725;
  GL_MODELVIEW6_ARB = $8726;
  GL_MODELVIEW7_ARB = $8727;
  GL_MODELVIEW8_ARB = $8728;
  GL_MODELVIEW9_ARB = $8729;
  GL_MODELVIEW10_ARB = $872A;
  GL_MODELVIEW11_ARB = $872B;
  GL_MODELVIEW12_ARB = $872C;
  GL_MODELVIEW13_ARB = $872D;
  GL_MODELVIEW14_ARB = $872E;
  GL_MODELVIEW15_ARB = $872F;
  GL_MODELVIEW16_ARB = $8730;
  GL_MODELVIEW17_ARB = $8731;
  GL_MODELVIEW18_ARB = $8732;
  GL_MODELVIEW19_ARB = $8733;
  GL_MODELVIEW20_ARB = $8734;
  GL_MODELVIEW21_ARB = $8735;
  GL_MODELVIEW22_ARB = $8736;
  GL_MODELVIEW23_ARB = $8737;
  GL_MODELVIEW24_ARB = $8738;
  GL_MODELVIEW25_ARB = $8739;
  GL_MODELVIEW26_ARB = $873A;
  GL_MODELVIEW27_ARB = $873B;
  GL_MODELVIEW28_ARB = $873C;
  GL_MODELVIEW29_ARB = $873D;
  GL_MODELVIEW30_ARB = $873E;
  GL_MODELVIEW31_ARB = $873F;
  GL_MATRIX_PALETTE_ARB = $8840;
  GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = $8841;
  GL_MAX_PALETTE_MATRICES_ARB = $8842;
  GL_CURRENT_PALETTE_MATRIX_ARB = $8843;
  GL_MATRIX_INDEX_ARRAY_ARB = $8844;
  GL_CURRENT_MATRIX_INDEX_ARB = $8845;
  GL_MATRIX_INDEX_ARRAY_SIZE_ARB = $8846;
  GL_MATRIX_INDEX_ARRAY_TYPE_ARB = $8847;
  GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = $8848;
  GL_MATRIX_INDEX_ARRAY_POINTER_ARB = $8849;
  GL_COMBINE_ARB = $8570;
  GL_COMBINE_RGB_ARB = $8571;
  GL_COMBINE_ALPHA_ARB = $8572;
  GL_SOURCE0_RGB_ARB = $8580;
  GL_SOURCE1_RGB_ARB = $8581;
  GL_SOURCE2_RGB_ARB = $8582;
  GL_SOURCE0_ALPHA_ARB = $8588;
  GL_SOURCE1_ALPHA_ARB = $8589;
  GL_SOURCE2_ALPHA_ARB = $858A;
  GL_OPERAND0_RGB_ARB = $8590;
  GL_OPERAND1_RGB_ARB = $8591;
  GL_OPERAND2_RGB_ARB = $8592;
  GL_OPERAND0_ALPHA_ARB = $8598;
  GL_OPERAND1_ALPHA_ARB = $8599;
  GL_OPERAND2_ALPHA_ARB = $859A;
  GL_RGB_SCALE_ARB = $8573;
  GL_ADD_SIGNED_ARB = $8574;
  GL_INTERPOLATE_ARB = $8575;
  GL_SUBTRACT_ARB = $84E7;
  GL_CONSTANT_ARB = $8576;
  GL_PRIMARY_COLOR_ARB = $8577;
  GL_PREVIOUS_ARB = $8578;
  GL_DOT3_RGB_ARB = $86AE;
  GL_DOT3_RGBA_ARB = $86AF;
  GL_MIRRORED_REPEAT_ARB = $8370;
  GL_DEPTH_COMPONENT16_ARB = $81A5;
  GL_DEPTH_COMPONENT24_ARB = $81A6;
  GL_DEPTH_COMPONENT32_ARB = $81A7;
  GL_TEXTURE_DEPTH_SIZE_ARB = $884A;
  GL_DEPTH_TEXTURE_MODE_ARB = $884B;
  GL_TEXTURE_COMPARE_MODE_ARB = $884C;
  GL_TEXTURE_COMPARE_FUNC_ARB = $884D;
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = $80BF;
  GL_COLOR_SUM_ARB = $8458;
  GL_VERTEX_PROGRAM_ARB = $8620;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = $8622;
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = $8623;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = $8624;
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = $8625;
  GL_CURRENT_VERTEX_ATTRIB_ARB = $8626;
  GL_PROGRAM_LENGTH_ARB = $8627;
  GL_PROGRAM_STRING_ARB = $8628;
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = $862E;
  GL_MAX_PROGRAM_MATRICES_ARB = $862F;
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB = $8640;
  GL_CURRENT_MATRIX_ARB = $8641;
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB = $8642;
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB = $8643;
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = $8645;
  GL_PROGRAM_ERROR_POSITION_ARB = $864B;
  GL_PROGRAM_BINDING_ARB = $8677;
  GL_MAX_VERTEX_ATTRIBS_ARB = $8869;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = $886A;
  GL_PROGRAM_ERROR_STRING_ARB = $8874;
  GL_PROGRAM_FORMAT_ASCII_ARB = $8875;
  GL_PROGRAM_FORMAT_ARB = $8876;
  GL_PROGRAM_INSTRUCTIONS_ARB = $88A0;
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB = $88A1;
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = $88A2;
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = $88A3;
  GL_PROGRAM_TEMPORARIES_ARB = $88A4;
  GL_MAX_PROGRAM_TEMPORARIES_ARB = $88A5;
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB = $88A6;
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = $88A7;
  GL_PROGRAM_PARAMETERS_ARB = $88A8;
  GL_MAX_PROGRAM_PARAMETERS_ARB = $88A9;
  GL_PROGRAM_NATIVE_PARAMETERS_ARB = $88AA;
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = $88AB;
  GL_PROGRAM_ATTRIBS_ARB = $88AC;
  GL_MAX_PROGRAM_ATTRIBS_ARB = $88AD;
  GL_PROGRAM_NATIVE_ATTRIBS_ARB = $88AE;
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = $88AF;
  GL_PROGRAM_ADDRESS_REGISTERS_ARB = $88B0;
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = $88B1;
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = $88B2;
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = $88B3;
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = $88B4;
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = $88B5;
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = $88B6;
  GL_TRANSPOSE_CURRENT_MATRIX_ARB = $88B7;
  GL_MATRIX0_ARB = $88C0;
  GL_MATRIX1_ARB = $88C1;
  GL_MATRIX2_ARB = $88C2;
  GL_MATRIX3_ARB = $88C3;
  GL_MATRIX4_ARB = $88C4;
  GL_MATRIX5_ARB = $88C5;
  GL_MATRIX6_ARB = $88C6;
  GL_MATRIX7_ARB = $88C7;
  GL_MATRIX8_ARB = $88C8;
  GL_MATRIX9_ARB = $88C9;
  GL_MATRIX10_ARB = $88CA;
  GL_MATRIX11_ARB = $88CB;
  GL_MATRIX12_ARB = $88CC;
  GL_MATRIX13_ARB = $88CD;
  GL_MATRIX14_ARB = $88CE;
  GL_MATRIX15_ARB = $88CF;
  GL_MATRIX16_ARB = $88D0;
  GL_MATRIX17_ARB = $88D1;
  GL_MATRIX18_ARB = $88D2;
  GL_MATRIX19_ARB = $88D3;
  GL_MATRIX20_ARB = $88D4;
  GL_MATRIX21_ARB = $88D5;
  GL_MATRIX22_ARB = $88D6;
  GL_MATRIX23_ARB = $88D7;
  GL_MATRIX24_ARB = $88D8;
  GL_MATRIX25_ARB = $88D9;
  GL_MATRIX26_ARB = $88DA;
  GL_MATRIX27_ARB = $88DB;
  GL_MATRIX28_ARB = $88DC;
  GL_MATRIX29_ARB = $88DD;
  GL_MATRIX30_ARB = $88DE;
  GL_MATRIX31_ARB = $88DF;
  GL_FRAGMENT_PROGRAM_ARB = $8804;
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB = $8805;
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB = $8806;
  GL_PROGRAM_TEX_INDITRectIONS_ARB = $8807;
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = $8808;
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = $8809;
  GL_PROGRAM_NATIVE_TEX_INDITRectIONS_ARB = $880A;
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = $880B;
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = $880C;
  GL_MAX_PROGRAM_TEX_INDITRectIONS_ARB = $880D;
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = $880E;
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = $880F;
  GL_MAX_PROGRAM_NATIVE_TEX_INDITRectIONS_ARB = $8810;
  GL_MAX_TEXTURE_COORDS_ARB = $8871;
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB = $8872;
  GL_BUFFER_SIZE_ARB = $8764;
  GL_BUFFER_USAGE_ARB = $8765;
  GL_ARRAY_BUFFER_ARB = $8892;
  GL_ELEMENT_ARRAY_BUFFER_ARB = $8893;
  GL_ARRAY_BUFFER_BINDING_ARB = $8894;
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = $8895;
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = $8896;
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = $8897;
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB = $8898;
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB = $8899;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = $889A;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = $889B;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = $889C;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = $889D;
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = $889E;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = $889F;
  GL_READ_ONLY_ARB = $88B8;
  GL_WRITE_ONLY_ARB = $88B9;
  GL_READ_WRITE_ARB = $88BA;
  GL_BUFFER_ACCESS_ARB = $88BB;
  GL_BUFFER_MAPPED_ARB = $88BC;
  GL_BUFFER_MAP_POINTER_ARB = $88BD;
  GL_STREAM_DRAW_ARB = $88E0;
  GL_STREAM_READ_ARB = $88E1;
  GL_STREAM_COPY_ARB = $88E2;
  GL_STATIC_DRAW_ARB = $88E4;
  GL_STATIC_READ_ARB = $88E5;
  GL_STATIC_COPY_ARB = $88E6;
  GL_DYNAMIC_DRAW_ARB = $88E8;
  GL_DYNAMIC_READ_ARB = $88E9;
  GL_DYNAMIC_COPY_ARB = $88EA;
  GL_SAMPLES_PASSED_ARB = $8914;
  GL_QUERY_COUNTER_BITS_ARB = $8864;
  GL_CURRENT_QUERY_ARB = $8865;
  GL_QUERY_RESULT_ARB = $8866;
  GL_QUERY_RESULT_AVAILABLE_ARB = $8867;
  GL_PROGRAM_OBJECT_ARB = $8B40;
  GL_OBJECT_TYPE_ARB = $8B4E;
  GL_OBJECT_SUBTYPE_ARB = $8B4F;
  GL_OBJECT_DELETE_STATUS_ARB = $8B80;
  GL_OBJECT_COMPILE_STATUS_ARB = $8B81;
  GL_OBJECT_LINK_STATUS_ARB = $8B82;
  GL_OBJECT_VALIDATE_STATUS_ARB = $8B83;
  GL_OBJECT_INFO_LOG_LENGTH_ARB = $8B84;
  GL_OBJECT_ATTACHED_OBJECTS_ARB = $8B85;
  GL_OBJECT_ACTIVE_UNIFORMS_ARB = $8B86;
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = $8B87;
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = $8B88;
  GL_SHADER_OBJECT_ARB = $8B48;
  GL_FLOAT_VEC2_ARB = $8B50;
  GL_FLOAT_VEC3_ARB = $8B51;
  GL_FLOAT_VEC4_ARB = $8B52;
  GL_INT_VEC2_ARB = $8B53;
  GL_INT_VEC3_ARB = $8B54;
  GL_INT_VEC4_ARB = $8B55;
  GL_BOOL_ARB = $8B56;
  GL_BOOL_VEC2_ARB = $8B57;
  GL_BOOL_VEC3_ARB = $8B58;
  GL_BOOL_VEC4_ARB = $8B59;
  GL_FLOAT_MAT2_ARB = $8B5A;
  GL_FLOAT_MAT3_ARB = $8B5B;
  GL_FLOAT_MAT4_ARB = $8B5C;
  GL_SAMPLER_1D_ARB = $8B5D;
  GL_SAMPLER_2D_ARB = $8B5E;
  GL_SAMPLER_3D_ARB = $8B5F;
  GL_SAMPLER_CUBE_ARB = $8B60;
  GL_SAMPLER_1D_SHADOW_ARB = $8B61;
  GL_SAMPLER_2D_SHADOW_ARB = $8B62;
  GL_SAMPLER_2D_TRect_ARB = $8B63;
  GL_SAMPLER_2D_TRect_SHADOW_ARB = $8B64;
  GL_VERTEX_SHADER_ARB = $8B31;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = $8B4A;
  GL_MAX_VARYING_FLOATS_ARB = $8B4B;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = $8B4C;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = $8B4D;
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = $8B89;
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = $8B8A;
  GL_FRAGMENT_SHADER_ARB = $8B30;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = $8B49;
  GL_POINT_SPRITE_ARB = $8861;
  GL_COORD_REPLACE_ARB = $8862;
  GL_MAX_DRAW_BUFFERS_ARB = $8824;
  GL_DRAW_BUFFER0_ARB = $8825;
  GL_DRAW_BUFFER1_ARB = $8826;
  GL_DRAW_BUFFER2_ARB = $8827;
  GL_DRAW_BUFFER3_ARB = $8828;
  GL_DRAW_BUFFER4_ARB = $8829;
  GL_DRAW_BUFFER5_ARB = $882A;
  GL_DRAW_BUFFER6_ARB = $882B;
  GL_DRAW_BUFFER7_ARB = $882C;
  GL_DRAW_BUFFER8_ARB = $882D;
  GL_DRAW_BUFFER9_ARB = $882E;
  GL_DRAW_BUFFER10_ARB = $882F;
  GL_DRAW_BUFFER11_ARB = $8830;
  GL_DRAW_BUFFER12_ARB = $8831;
  GL_DRAW_BUFFER13_ARB = $8832;
  GL_DRAW_BUFFER14_ARB = $8833;
  GL_DRAW_BUFFER15_ARB = $8834;
  GL_TEXTURE_TRectANGLE_ARB = $84F5;
  GL_TEXTURE_BINDING_TRectANGLE_ARB = $84F6;
  GL_PROXY_TEXTURE_TRectANGLE_ARB = $84F7;
  GL_MAX_TRectANGLE_TEXTURE_SIZE_ARB = $84F8;
  GL_RGBA_FLOAT_MODE_ARB = $8820;
  GL_CLAMP_VERTEX_COLOR_ARB = $891A;
  GL_CLAMP_FRAGMENT_COLOR_ARB = $891B;
  GL_CLAMP_READ_COLOR_ARB = $891C;
  GL_FIXED_ONLY_ARB = $891D;
  GL_HALF_FLOAT_ARB = $140B;
  GL_TEXTURE_RED_TYPE_ARB = $8C10;
  GL_TEXTURE_GREEN_TYPE_ARB = $8C11;
  GL_TEXTURE_BLUE_TYPE_ARB = $8C12;
  GL_TEXTURE_ALPHA_TYPE_ARB = $8C13;
  GL_TEXTURE_LUMINANCE_TYPE_ARB = $8C14;
  GL_TEXTURE_INTENSITY_TYPE_ARB = $8C15;
  GL_TEXTURE_DEPTH_TYPE_ARB = $8C16;
  GL_UNSIGNED_NORMALIZED_ARB = $8C17;
  GL_RGBA32F_ARB = $8814;
  GL_RGB32F_ARB = $8815;
  GL_ALPHA32F_ARB = $8816;
  GL_INTENSITY32F_ARB = $8817;
  GL_LUMINANCE32F_ARB = $8818;
  GL_LUMINANCE_ALPHA32F_ARB = $8819;
  GL_RGBA16F_ARB = $881A;
  GL_RGB16F_ARB = $881B;
  GL_ALPHA16F_ARB = $881C;
  GL_INTENSITY16F_ARB = $881D;
  GL_LUMINANCE16F_ARB = $881E;
  GL_LUMINANCE_ALPHA16F_ARB = $881F;
  GL_PIXEL_PACK_BUFFER_ARB = $88EB;
  GL_PIXEL_UNPACK_BUFFER_ARB = $88EC;
  GL_PIXEL_PACK_BUFFER_BINDING_ARB = $88ED;
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = $88EF;
  GL_DEPTH_COMPONENT32F = $8CAC;
  GL_DEPTH32F_STENCIL8 = $8CAD;
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV = $8DAD;
  GL_INVALID_FRAMEBUFFER_OPERATION = $0506;
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = $8210;
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = $8211;
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = $8212;
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = $8213;
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = $8214;
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = $8215;
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = $8216;
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = $8217;
  GL_FRAMEBUFFER_DEFAULT = $8218;
  GL_FRAMEBUFFER_UNDEFINED = $8219;
  GL_DEPTH_STENCIL_ATTACHMENT = $821A;
  GL_INDEX = $8222;
  GL_MAX_RENDERBUFFER_SIZE = $84E8;
  GL_DEPTH_STENCIL = $84F9;
  GL_UNSIGNED_INT_24_8 = $84FA;
  GL_DEPTH24_STENCIL8 = $88F0;
  GL_TEXTURE_STENCIL_SIZE = $88F1;
  GL_FRAMEBUFFER_BINDING = $8CA6;
  GL_DRAW_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING;
  GL_RENDERBUFFER_BINDING = $8CA7;
  GL_READ_FRAMEBUFFER = $8CA8;
  GL_DRAW_FRAMEBUFFER = $8CA9;
  GL_READ_FRAMEBUFFER_BINDING = $8CAA;
  GL_RENDERBUFFER_SAMPLES = $8CAB;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = $8CD4;
  GL_FRAMEBUFFER_COMPLETE = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = $8CDB;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = $8CDC;
  GL_FRAMEBUFFER_UNSUPPORTED = $8CDD;
  GL_MAX_COLOR_ATTACHMENTS = $8CDF;
  GL_COLOR_ATTACHMENT0 = $8CE0;
  GL_COLOR_ATTACHMENT1 = $8CE1;
  GL_COLOR_ATTACHMENT2 = $8CE2;
  GL_COLOR_ATTACHMENT3 = $8CE3;
  GL_COLOR_ATTACHMENT4 = $8CE4;
  GL_COLOR_ATTACHMENT5 = $8CE5;
  GL_COLOR_ATTACHMENT6 = $8CE6;
  GL_COLOR_ATTACHMENT7 = $8CE7;
  GL_COLOR_ATTACHMENT8 = $8CE8;
  GL_COLOR_ATTACHMENT9 = $8CE9;
  GL_COLOR_ATTACHMENT10 = $8CEA;
  GL_COLOR_ATTACHMENT11 = $8CEB;
  GL_COLOR_ATTACHMENT12 = $8CEC;
  GL_COLOR_ATTACHMENT13 = $8CED;
  GL_COLOR_ATTACHMENT14 = $8CEE;
  GL_COLOR_ATTACHMENT15 = $8CEF;
  GL_DEPTH_ATTACHMENT = $8D00;
  GL_STENCIL_ATTACHMENT = $8D20;
  GL_FRAMEBUFFER = $8D40;
  GL_RENDERBUFFER = $8D41;
  GL_RENDERBUFFER_WIDTH = $8D42;
  GL_RENDERBUFFER_HEIGHT = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT = $8D44;
  GL_STENCIL_INDEX1 = $8D46;
  GL_STENCIL_INDEX4 = $8D47;
  GL_STENCIL_INDEX8 = $8D48;
  GL_STENCIL_INDEX16 = $8D49;
  GL_RENDERBUFFER_RED_SIZE = $8D50;
  GL_RENDERBUFFER_GREEN_SIZE = $8D51;
  GL_RENDERBUFFER_BLUE_SIZE = $8D52;
  GL_RENDERBUFFER_ALPHA_SIZE = $8D53;
  GL_RENDERBUFFER_DEPTH_SIZE = $8D54;
  GL_RENDERBUFFER_STENCIL_SIZE = $8D55;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = $8D56;
  GL_MAX_SAMPLES = $8D57;
  GL_FRAMEBUFFER_SRGB = $8DB9;
  GL_LINES_ADJACENCY_ARB = $000A;
  GL_LINE_STRIP_ADJACENCY_ARB = $000B;
  GL_TRIANGLES_ADJACENCY_ARB = $000C;
  GL_TRIANGLE_STRIP_ADJACENCY_ARB = $000D;
  GL_PROGRAM_POINT_SIZE_ARB = $8642;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = $8C29;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = $8DA7;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = $8DA8;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = $8DA9;
  GL_GEOMETRY_SHADER_ARB = $8DD9;
  GL_GEOMETRY_VERTICES_OUT_ARB = $8DDA;
  GL_GEOMETRY_INPUT_TYPE_ARB = $8DDB;
  GL_GEOMETRY_OUTPUT_TYPE_ARB = $8DDC;
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = $8DDD;
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = $8DDE;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = $8DDF;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = $8DE1;
  GL_HALF_FLOAT = $140B;
  GL_MAP_READ_BIT = $0001;
  GL_MAP_WRITE_BIT = $0002;
  GL_MAP_INVALIDATE_RANGE_BIT = $0004;
  GL_MAP_INVALIDATE_BUFFER_BIT = $0008;
  GL_MAP_FLUSH_EXPLICIT_BIT = $0010;
  GL_MAP_UNSYNCHRONIZED_BIT = $0020;
  GL_TEXTURE_BUFFER_ARB = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE_ARB = $8C2B;
  GL_TEXTURE_BINDING_BUFFER_ARB = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = $8C2D;
  GL_TEXTURE_BUFFER_FORMAT_ARB = $8C2E;
  GL_COMPRESSED_RED_RGTC1 = $8DBB;
  GL_COMPRESSED_SIGNED_RED_RGTC1 = $8DBC;
  GL_COMPRESSED_RG_RGTC2 = $8DBD;
  GL_COMPRESSED_SIGNED_RG_RGTC2 = $8DBE;
  GL_RG = $8227;
  GL_RG_INTEGER = $8228;
  GL_R8 = $8229;
  GL_R16 = $822A;
  GL_RG8 = $822B;
  GL_RG16 = $822C;
  GL_R16F = $822D;
  GL_R32F = $822E;
  GL_RG16F = $822F;
  GL_RG32F = $8230;
  GL_R8I = $8231;
  GL_R8UI = $8232;
  GL_R16I = $8233;
  GL_R16UI = $8234;
  GL_R32I = $8235;
  GL_R32UI = $8236;
  GL_RG8I = $8237;
  GL_RG8UI = $8238;
  GL_RG16I = $8239;
  GL_RG16UI = $823A;
  GL_RG32I = $823B;
  GL_RG32UI = $823C;
  GL_VERTEX_ARRAY_BINDING = $85B5;
  GL_UNIFORM_BUFFER = $8A11;
  GL_UNIFORM_BUFFER_BINDING = $8A28;
  GL_UNIFORM_BUFFER_START = $8A29;
  GL_UNIFORM_BUFFER_SIZE = $8A2A;
  GL_MAX_VERTEX_UNIFORM_BLOCKS = $8A2B;
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS = $8A2C;
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS = $8A2D;
  GL_MAX_COMBINED_UNIFORM_BLOCKS = $8A2E;
  GL_MAX_UNIFORM_BUFFER_BINDINGS = $8A2F;
  GL_MAX_UNIFORM_BLOCK_SIZE = $8A30;
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = $8A31;
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = $8A32;
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = $8A33;
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = $8A34;
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = $8A35;
  GL_ACTIVE_UNIFORM_BLOCKS = $8A36;
  GL_UNIFORM_TYPE = $8A37;
  GL_UNIFORM_SIZE = $8A38;
  GL_UNIFORM_NAME_LENGTH = $8A39;
  GL_UNIFORM_BLOCK_INDEX = $8A3A;
  GL_UNIFORM_OFFSET = $8A3B;
  GL_UNIFORM_ARRAY_STRIDE = $8A3C;
  GL_UNIFORM_MATRIX_STRIDE = $8A3D;
  GL_UNIFORM_IS_ROW_MAJOR = $8A3E;
  GL_UNIFORM_BLOCK_BINDING = $8A3F;
  GL_UNIFORM_BLOCK_DATA_SIZE = $8A40;
  GL_UNIFORM_BLOCK_NAME_LENGTH = $8A41;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = $8A42;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = $8A43;
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = $8A44;
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = $8A45;
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = $8A46;
  GL_INVALID_INDEX = $FFFFFFFF;
  GL_COPY_READ_BUFFER = $8F36;
  GL_COPY_WRITE_BUFFER = $8F37;
  GL_DEPTH_CLAMP = $864F;
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = $8E4C;
  GL_FIRST_VERTEX_CONVENTION = $8E4D;
  GL_LAST_VERTEX_CONVENTION = $8E4E;
  GL_PROVOKING_VERTEX = $8E4F;
  GL_TEXTURE_CUBE_MAP_SEAMLESS = $884F;
  GL_MAX_SERVER_WAIT_TIMEOUT = $9111;
  GL_OBJECT_TYPE = $9112;
  GL_SYNC_CONDITION = $9113;
  GL_SYNC_STATUS = $9114;
  GL_SYNC_FLAGS = $9115;
  GL_SYNC_FENCE = $9116;
  GL_SYNC_GPU_COMMANDS_COMPLETE = $9117;
  GL_UNSIGNALED = $9118;
  GL_SIGNALED = $9119;
  GL_ALREADY_SIGNALED = $911A;
  GL_TIMEOUT_EXPIRED = $911B;
  GL_CONDITION_SATISFIED = $911C;
  GL_WAIT_FAILED = $911D;
  GL_SYNC_FLUSH_COMMANDS_BIT = $00000001;
  GL_TIMEOUT_IGNORED = $FFFFFFFFFFFFFFFF;
  GL_SAMPLE_POSITION = $8E50;
  GL_SAMPLE_MASK = $8E51;
  GL_SAMPLE_MASK_VALUE = $8E52;
  GL_MAX_SAMPLE_MASK_WORDS = $8E59;
  GL_TEXTURE_2D_MULTISAMPLE = $9100;
  GL_PROXY_TEXTURE_2D_MULTISAMPLE = $9101;
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY = $9102;
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = $9103;
  GL_TEXTURE_BINDING_2D_MULTISAMPLE = $9104;
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = $9105;
  GL_TEXTURE_SAMPLES = $9106;
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = $9107;
  GL_SAMPLER_2D_MULTISAMPLE = $9108;
  GL_INT_SAMPLER_2D_MULTISAMPLE = $9109;
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = $910A;
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY = $910B;
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910C;
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910D;
  GL_MAX_COLOR_TEXTURE_SAMPLES = $910E;
  GL_MAX_DEPTH_TEXTURE_SAMPLES = $910F;
  GL_MAX_INTEGER_SAMPLES = $9110;
  GL_SAMPLE_SHADING = $8C36;
  GL_MIN_SAMPLE_SHADING_VALUE = $8C37;
  GL_TEXTURE_CUBE_MAP_ARRAY = $9009;
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = $900A;
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = $900B;
  GL_SAMPLER_CUBE_MAP_ARRAY = $900C;
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = $900D;
  GL_INT_SAMPLER_CUBE_MAP_ARRAY = $900E;
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = $900F;
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5E;
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5F;
  GL_SHADER_INCLUDE_ARB = $8DAE;
  GL_NAMED_STRING_LENGTH_ARB = $8DE9;
  GL_NAMED_STRING_TYPE_ARB = $8DEA;
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = $8E8C;
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = $8E8D;
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = $8E8E;
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = $8E8F;
  GL_SRC1_COLOR = $88F9;
  GL_ONE_MINUS_SRC1_COLOR = $88FA;
  GL_ONE_MINUS_SRC1_ALPHA = $88FB;
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = $88FC;
  GL_ANY_SAMPLES_PASSED = $8C2F;
  GL_SAMPLER_BINDING = $8919;
  GL_RGB10_A2UI = $906F;
  GL_TEXTURE_SWIZZLE_R = $8E42;
  GL_TEXTURE_SWIZZLE_G = $8E43;
  GL_TEXTURE_SWIZZLE_B = $8E44;
  GL_TEXTURE_SWIZZLE_A = $8E45;
  GL_TEXTURE_SWIZZLE_RGBA = $8E46;
  GL_TIME_ELAPSED = $88BF;
  GL_TIMESTAMP = $8E28;
  GL_INT_2_10_10_10_REV = $8D9F;
  GL_DRAW_INDITRect_BUFFER = $8F3F;
  GL_DRAW_INDITRect_BUFFER_BINDING = $8F43;
  GL_GEOMETRY_SHADER_INVOCATIONS = $887F;
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS = $8E5A;
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = $8E5B;
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = $8E5C;
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = $8E5D;
  GL_MAX_VERTEX_STREAMS = $8E71;
  GL_DOUBLE_VEC2 = $8FFC;
  GL_DOUBLE_VEC3 = $8FFD;
  GL_DOUBLE_VEC4 = $8FFE;
  GL_DOUBLE_MAT2 = $8F46;
  GL_DOUBLE_MAT3 = $8F47;
  GL_DOUBLE_MAT4 = $8F48;
  GL_DOUBLE_MAT2x3 = $8F49;
  GL_DOUBLE_MAT2x4 = $8F4A;
  GL_DOUBLE_MAT3x2 = $8F4B;
  GL_DOUBLE_MAT3x4 = $8F4C;
  GL_DOUBLE_MAT4x2 = $8F4D;
  GL_DOUBLE_MAT4x3 = $8F4E;
  GL_ACTIVE_SUBROUTINES = $8DE5;
  GL_ACTIVE_SUBROUTINE_UNIFORMS = $8DE6;
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = $8E47;
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH = $8E48;
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = $8E49;
  GL_MAX_SUBROUTINES = $8DE7;
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = $8DE8;
  GL_NUM_COMPATIBLE_SUBROUTINES = $8E4A;
  GL_COMPATIBLE_SUBROUTINES = $8E4B;
  GL_PATCHES = $000E;
  GL_PATCH_VERTICES = $8E72;
  GL_PATCH_DEFAULT_INNER_LEVEL = $8E73;
  GL_PATCH_DEFAULT_OUTER_LEVEL = $8E74;
  GL_TESS_CONTROL_OUTPUT_VERTICES = $8E75;
  GL_TESS_GEN_MODE = $8E76;
  GL_TESS_GEN_SPACING = $8E77;
  GL_TESS_GEN_VERTEX_ORDER = $8E78;
  GL_TESS_GEN_POINT_MODE = $8E79;
  GL_ISOLINES = $8E7A;
  GL_FRACTIONAL_ODD = $8E7B;
  GL_FRACTIONAL_EVEN = $8E7C;
  GL_MAX_PATCH_VERTICES = $8E7D;
  GL_MAX_TESS_GEN_LEVEL = $8E7E;
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = $8E7F;
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E80;
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = $8E81;
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = $8E82;
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = $8E83;
  GL_MAX_TESS_PATCH_COMPONENTS = $8E84;
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = $8E85;
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = $8E86;
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = $8E89;
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = $8E8A;
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = $886C;
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = $886D;
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = $8E1E;
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E1F;
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = $84F0;
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = $84F1;
  GL_TESS_EVALUATION_SHADER = $8E87;
  GL_TESS_CONTROL_SHADER = $8E88;
  GL_TRANSFORM_FEEDBACK = $8E22;
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = $8E23;
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = $8E24;
  GL_TRANSFORM_FEEDBACK_BINDING = $8E25;
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = $8E70;
  GL_ABGR_EXT = $8000;
  GL_CONSTANT_COLOR_EXT = $8001;
  GL_ONE_MINUS_CONSTANT_COLOR_EXT = $8002;
  GL_CONSTANT_ALPHA_EXT = $8003;
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT = $8004;
  GL_BLEND_COLOR_EXT = $8005;
  GL_POLYGON_OFFSET_EXT = $8037;
  GL_POLYGON_OFFSET_FACTOR_EXT = $8038;
  GL_POLYGON_OFFSET_BIAS_EXT = $8039;
  GL_ALPHA4_EXT = $803B;
  GL_ALPHA8_EXT = $803C;
  GL_ALPHA12_EXT = $803D;
  GL_ALPHA16_EXT = $803E;
  GL_LUMINANCE4_EXT = $803F;
  GL_LUMINANCE8_EXT = $8040;
  GL_LUMINANCE12_EXT = $8041;
  GL_LUMINANCE16_EXT = $8042;
  GL_LUMINANCE4_ALPHA4_EXT = $8043;
  GL_LUMINANCE6_ALPHA2_EXT = $8044;
  GL_LUMINANCE8_ALPHA8_EXT = $8045;
  GL_LUMINANCE12_ALPHA4_EXT = $8046;
  GL_LUMINANCE12_ALPHA12_EXT = $8047;
  GL_LUMINANCE16_ALPHA16_EXT = $8048;
  GL_INTENSITY_EXT = $8049;
  GL_INTENSITY4_EXT = $804A;
  GL_INTENSITY8_EXT = $804B;
  GL_INTENSITY12_EXT = $804C;
  GL_INTENSITY16_EXT = $804D;
  GL_RGB2_EXT = $804E;
  GL_RGB4_EXT = $804F;
  GL_RGB5_EXT = $8050;
  GL_RGB8_EXT = $8051;
  GL_RGB10_EXT = $8052;
  GL_RGB12_EXT = $8053;
  GL_RGB16_EXT = $8054;
  GL_RGBA2_EXT = $8055;
  GL_RGBA4_EXT = $8056;
  GL_RGB5_A1_EXT = $8057;
  GL_RGBA8_EXT = $8058;
  GL_RGB10_A2_EXT = $8059;
  GL_RGBA12_EXT = $805A;
  GL_RGBA16_EXT = $805B;
  GL_TEXTURE_RED_SIZE_EXT = $805C;
  GL_TEXTURE_GREEN_SIZE_EXT = $805D;
  GL_TEXTURE_BLUE_SIZE_EXT = $805E;
  GL_TEXTURE_ALPHA_SIZE_EXT = $805F;
  GL_TEXTURE_LUMINANCE_SIZE_EXT = $8060;
  GL_TEXTURE_INTENSITY_SIZE_EXT = $8061;
  GL_REPLACE_EXT = $8062;
  GL_PROXY_TEXTURE_1D_EXT = $8063;
  GL_PROXY_TEXTURE_2D_EXT = $8064;
  GL_TEXTURE_TOO_LARGE_EXT = $8065;
  GL_PACK_SKIP_IMAGES_EXT = $806B;
  GL_PACK_IMAGE_HEIGHT_EXT = $806C;
  GL_UNPACK_SKIP_IMAGES_EXT = $806D;
  GL_UNPACK_IMAGE_HEIGHT_EXT = $806E;
  GL_TEXTURE_3D_EXT = $806F;
  GL_PROXY_TEXTURE_3D_EXT = $8070;
  GL_TEXTURE_DEPTH_EXT = $8071;
  GL_TEXTURE_WRAP_R_EXT = $8072;
  GL_MAX_3D_TEXTURE_SIZE_EXT = $8073;
  GL_FILTER4_SGIS = $8146;
  GL_TEXTURE_FILTER4_SIZE_SGIS = $8147;
  GL_HISTOGRAM_EXT = $8024;
  GL_PROXY_HISTOGRAM_EXT = $8025;
  GL_HISTOGRAM_WIDTH_EXT = $8026;
  GL_HISTOGRAM_FORMAT_EXT = $8027;
  GL_HISTOGRAM_RED_SIZE_EXT = $8028;
  GL_HISTOGRAM_GREEN_SIZE_EXT = $8029;
  GL_HISTOGRAM_BLUE_SIZE_EXT = $802A;
  GL_HISTOGRAM_ALPHA_SIZE_EXT = $802B;
  GL_HISTOGRAM_LUMINANCE_SIZE_EXT = $802C;
  GL_HISTOGRAM_SINK_EXT = $802D;
  GL_MINMAX_EXT = $802E;
  GL_MINMAX_FORMAT_EXT = $802F;
  GL_MINMAX_SINK_EXT = $8030;
  GL_TABLE_TOO_LARGE_EXT = $8031;
  GL_CONVOLUTION_1D_EXT = $8010;
  GL_CONVOLUTION_2D_EXT = $8011;
  GL_SEPARABLE_2D_EXT = $8012;
  GL_CONVOLUTION_BORDER_MODE_EXT = $8013;
  GL_CONVOLUTION_FILTER_SCALE_EXT = $8014;
  GL_CONVOLUTION_FILTER_BIAS_EXT = $8015;
  GL_REDUCE_EXT = $8016;
  GL_CONVOLUTION_FORMAT_EXT = $8017;
  GL_CONVOLUTION_WIDTH_EXT = $8018;
  GL_CONVOLUTION_HEIGHT_EXT = $8019;
  GL_MAX_CONVOLUTION_WIDTH_EXT = $801A;
  GL_MAX_CONVOLUTION_HEIGHT_EXT = $801B;
  GL_POST_CONVOLUTION_RED_SCALE_EXT = $801C;
  GL_POST_CONVOLUTION_GREEN_SCALE_EXT = $801D;
  GL_POST_CONVOLUTION_BLUE_SCALE_EXT = $801E;
  GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = $801F;
  GL_POST_CONVOLUTION_RED_BIAS_EXT = $8020;
  GL_POST_CONVOLUTION_GREEN_BIAS_EXT = $8021;
  GL_POST_CONVOLUTION_BLUE_BIAS_EXT = $8022;
  GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = $8023;
  GL_COLOR_MATRIX_SGI = $80B1;
  GL_COLOR_MATRIX_STACK_DEPTH_SGI = $80B2;
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = $80B3;
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI = $80B4;
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = $80B5;
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = $80B6;
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = $80B7;
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI = $80B8;
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = $80B9;
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = $80BA;
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = $80BB;
  GL_COLOR_TABLE_SGI = $80D0;
  GL_POST_CONVOLUTION_COLOR_TABLE_SGI = $80D1;
  GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = $80D2;
  GL_PROXY_COLOR_TABLE_SGI = $80D3;
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = $80D4;
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = $80D5;
  GL_COLOR_TABLE_SCALE_SGI = $80D6;
  GL_COLOR_TABLE_BIAS_SGI = $80D7;
  GL_COLOR_TABLE_FORMAT_SGI = $80D8;
  GL_COLOR_TABLE_WIDTH_SGI = $80D9;
  GL_COLOR_TABLE_RED_SIZE_SGI = $80DA;
  GL_COLOR_TABLE_GREEN_SIZE_SGI = $80DB;
  GL_COLOR_TABLE_BLUE_SIZE_SGI = $80DC;
  GL_COLOR_TABLE_ALPHA_SIZE_SGI = $80DD;
  GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = $80DE;
  GL_COLOR_TABLE_INTENSITY_SIZE_SGI = $80DF;
  GL_PIXEL_TEXTURE_SGIS = $8353;
  GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = $8354;
  GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = $8355;
  GL_PIXEL_GROUP_COLOR_SGIS = $8356;
  GL_PIXEL_TEX_GEN_SGIX = $8139;
  GL_PIXEL_TEX_GEN_MODE_SGIX = $832B;
  GL_PACK_SKIP_VOLUMES_SGIS = $8130;
  GL_PACK_IMAGE_DEPTH_SGIS = $8131;
  GL_UNPACK_SKIP_VOLUMES_SGIS = $8132;
  GL_UNPACK_IMAGE_DEPTH_SGIS = $8133;
  GL_TEXTURE_4D_SGIS = $8134;
  GL_PROXY_TEXTURE_4D_SGIS = $8135;
  GL_TEXTURE_4DSIZE_SGIS = $8136;
  GL_TEXTURE_WRAP_Q_SGIS = $8137;
  GL_MAX_4D_TEXTURE_SIZE_SGIS = $8138;
  GL_TEXTURE_4D_BINDING_SGIS = $814F;
  GL_TEXTURE_COLOR_TABLE_SGI = $80BC;
  GL_PROXY_TEXTURE_COLOR_TABLE_SGI = $80BD;
  GL_CMYK_EXT = $800C;
  GL_CMYKA_EXT = $800D;
  GL_PACK_CMYK_HINT_EXT = $800E;
  GL_UNPACK_CMYK_HINT_EXT = $800F;
  GL_TEXTURE_PRIORITY_EXT = $8066;
  GL_TEXTURE_RESIDENT_EXT = $8067;
  GL_TEXTURE_1D_BINDING_EXT = $8068;
  GL_TEXTURE_2D_BINDING_EXT = $8069;
  GL_TEXTURE_3D_BINDING_EXT = $806A;
  GL_DETAIL_TEXTURE_2D_SGIS = $8095;
  GL_DETAIL_TEXTURE_2D_BINDING_SGIS = $8096;
  GL_LINEAR_DETAIL_SGIS = $8097;
  GL_LINEAR_DETAIL_ALPHA_SGIS = $8098;
  GL_LINEAR_DETAIL_COLOR_SGIS = $8099;
  GL_DETAIL_TEXTURE_LEVEL_SGIS = $809A;
  GL_DETAIL_TEXTURE_MODE_SGIS = $809B;
  GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = $809C;
  GL_LINEAR_SHARPEN_SGIS = $80AD;
  GL_LINEAR_SHARPEN_ALPHA_SGIS = $80AE;
  GL_LINEAR_SHARPEN_COLOR_SGIS = $80AF;
  GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = $80B0;
  GL_UNSIGNED_BYTE_3_3_2_EXT = $8032;
  GL_UNSIGNED_SHORT_4_4_4_4_EXT = $8033;
  GL_UNSIGNED_SHORT_5_5_5_1_EXT = $8034;
  GL_UNSIGNED_INT_8_8_8_8_EXT = $8035;
  GL_UNSIGNED_INT_10_10_10_2_EXT = $8036;
  GL_TEXTURE_MIN_LOD_SGIS = $813A;
  GL_TEXTURE_MAX_LOD_SGIS = $813B;
  GL_TEXTURE_BASE_LEVEL_SGIS = $813C;
  GL_TEXTURE_MAX_LEVEL_SGIS = $813D;
  GL_MULTISAMPLE_SGIS = $809D;
  GL_SAMPLE_ALPHA_TO_MASK_SGIS = $809E;
  GL_SAMPLE_ALPHA_TO_ONE_SGIS = $809F;
  GL_SAMPLE_MASK_SGIS = $80A0;
  GL_1PASS_SGIS = $80A1;
  GL_2PASS_0_SGIS = $80A2;
  GL_2PASS_1_SGIS = $80A3;
  GL_4PASS_0_SGIS = $80A4;
  GL_4PASS_1_SGIS = $80A5;
  GL_4PASS_2_SGIS = $80A6;
  GL_4PASS_3_SGIS = $80A7;
  GL_SAMPLE_BUFFERS_SGIS = $80A8;
  GL_SAMPLES_SGIS = $80A9;
  GL_SAMPLE_MASK_VALUE_SGIS = $80AA;
  GL_SAMPLE_MASK_INVERT_SGIS = $80AB;
  GL_SAMPLE_PATTERN_SGIS = $80AC;
  GL_RESCALE_NORMAL_EXT = $803A;
  GL_VERTEX_ARRAY_EXT = $8074;
  GL_NORMAL_ARRAY_EXT = $8075;
  GL_COLOR_ARRAY_EXT = $8076;
  GL_INDEX_ARRAY_EXT = $8077;
  GL_TEXTURE_COORD_ARRAY_EXT = $8078;
  GL_EDGE_FLAG_ARRAY_EXT = $8079;
  GL_VERTEX_ARRAY_SIZE_EXT = $807A;
  GL_VERTEX_ARRAY_TYPE_EXT = $807B;
  GL_VERTEX_ARRAY_STRIDE_EXT = $807C;
  GL_VERTEX_ARRAY_COUNT_EXT = $807D;
  GL_NORMAL_ARRAY_TYPE_EXT = $807E;
  GL_NORMAL_ARRAY_STRIDE_EXT = $807F;
  GL_NORMAL_ARRAY_COUNT_EXT = $8080;
  GL_COLOR_ARRAY_SIZE_EXT = $8081;
  GL_COLOR_ARRAY_TYPE_EXT = $8082;
  GL_COLOR_ARRAY_STRIDE_EXT = $8083;
  GL_COLOR_ARRAY_COUNT_EXT = $8084;
  GL_INDEX_ARRAY_TYPE_EXT = $8085;
  GL_INDEX_ARRAY_STRIDE_EXT = $8086;
  GL_INDEX_ARRAY_COUNT_EXT = $8087;
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT = $8088;
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT = $8089;
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = $808A;
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT = $808B;
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT = $808C;
  GL_EDGE_FLAG_ARRAY_COUNT_EXT = $808D;
  GL_VERTEX_ARRAY_POINTER_EXT = $808E;
  GL_NORMAL_ARRAY_POINTER_EXT = $808F;
  GL_COLOR_ARRAY_POINTER_EXT = $8090;
  GL_INDEX_ARRAY_POINTER_EXT = $8091;
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT = $8092;
  GL_EDGE_FLAG_ARRAY_POINTER_EXT = $8093;
  GL_GENERATE_MIPMAP_SGIS = $8191;
  GL_GENERATE_MIPMAP_HINT_SGIS = $8192;
  GL_LINEAR_CLIPMAP_LINEAR_SGIX = $8170;
  GL_TEXTURE_CLIPMAP_CENTER_SGIX = $8171;
  GL_TEXTURE_CLIPMAP_FRAME_SGIX = $8172;
  GL_TEXTURE_CLIPMAP_OFFSET_SGIX = $8173;
  GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = $8174;
  GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = $8175;
  GL_TEXTURE_CLIPMAP_DEPTH_SGIX = $8176;
  GL_MAX_CLIPMAP_DEPTH_SGIX = $8177;
  GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = $8178;
  GL_NEAREST_CLIPMAP_NEAREST_SGIX = $844D;
  GL_NEAREST_CLIPMAP_LINEAR_SGIX = $844E;
  GL_LINEAR_CLIPMAP_NEAREST_SGIX = $844F;
  GL_TEXTURE_COMPARE_SGIX = $819A;
  GL_TEXTURE_COMPARE_OPERATOR_SGIX = $819B;
  GL_TEXTURE_LEQUAL_R_SGIX = $819C;
  GL_TEXTURE_GEQUAL_R_SGIX = $819D;
  GL_CLAMP_TO_EDGE_SGIS = $812F;
  GL_FUNC_ADD_EXT = $8006;
  GL_MIN_EXT = $8007;
  GL_MAX_EXT = $8008;
  GL_BLEND_EQUATION_EXT = $8009;
  GL_FUNC_SUBTRACT_EXT = $800A;
  GL_FUNC_REVERSE_SUBTRACT_EXT = $800B;
  GL_INTERLACE_SGIX = $8094;
  GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = $813E;
  GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = $813F;
  GL_PIXEL_TILE_WIDTH_SGIX = $8140;
  GL_PIXEL_TILE_HEIGHT_SGIX = $8141;
  GL_PIXEL_TILE_GRID_WIDTH_SGIX = $8142;
  GL_PIXEL_TILE_GRID_HEIGHT_SGIX = $8143;
  GL_PIXEL_TILE_GRID_DEPTH_SGIX = $8144;
  GL_PIXEL_TILE_CACHE_SIZE_SGIX = $8145;
  GL_DUAL_ALPHA4_SGIS = $8110;
  GL_DUAL_ALPHA8_SGIS = $8111;
  GL_DUAL_ALPHA12_SGIS = $8112;
  GL_DUAL_ALPHA16_SGIS = $8113;
  GL_DUAL_LUMINANCE4_SGIS = $8114;
  GL_DUAL_LUMINANCE8_SGIS = $8115;
  GL_DUAL_LUMINANCE12_SGIS = $8116;
  GL_DUAL_LUMINANCE16_SGIS = $8117;
  GL_DUAL_INTENSITY4_SGIS = $8118;
  GL_DUAL_INTENSITY8_SGIS = $8119;
  GL_DUAL_INTENSITY12_SGIS = $811A;
  GL_DUAL_INTENSITY16_SGIS = $811B;
  GL_DUAL_LUMINANCE_ALPHA4_SGIS = $811C;
  GL_DUAL_LUMINANCE_ALPHA8_SGIS = $811D;
  GL_QUAD_ALPHA4_SGIS = $811E;
  GL_QUAD_ALPHA8_SGIS = $811F;
  GL_QUAD_LUMINANCE4_SGIS = $8120;
  GL_QUAD_LUMINANCE8_SGIS = $8121;
  GL_QUAD_INTENSITY4_SGIS = $8122;
  GL_QUAD_INTENSITY8_SGIS = $8123;
  GL_DUAL_TEXTURE_SELECT_SGIS = $8124;
  GL_QUAD_TEXTURE_SELECT_SGIS = $8125;
  GL_SPRITE_SGIX = $8148;
  GL_SPRITE_MODE_SGIX = $8149;
  GL_SPRITE_AXIS_SGIX = $814A;
  GL_SPRITE_TRANSLATION_SGIX = $814B;
  GL_SPRITE_AXIAL_SGIX = $814C;
  GL_SPRITE_OBJECT_ALIGNED_SGIX = $814D;
  GL_SPRITE_EYE_ALIGNED_SGIX = $814E;
  GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = $812E;
  GL_POINT_SIZE_MIN_EXT = $8126;
  GL_POINT_SIZE_MAX_EXT = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE_EXT = $8128;
  GL_DISTANCE_ATTENUATION_EXT = $8129;
  GL_POINT_SIZE_MIN_SGIS = $8126;
  GL_POINT_SIZE_MAX_SGIS = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE_SGIS = $8128;
  GL_DISTANCE_ATTENUATION_SGIS = $8129;
  GL_INSTRUMENT_BUFFER_POINTER_SGIX = $8180;
  GL_INSTRUMENT_MEASUREMENTS_SGIX = $8181;
  GL_POST_TEXTURE_FILTER_BIAS_SGIX = $8179;
  GL_POST_TEXTURE_FILTER_SCALE_SGIX = $817A;
  GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = $817B;
  GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = $817C;
  GL_FRAMEZOOM_SGIX = $818B;
  GL_FRAMEZOOM_FACTOR_SGIX = $818C;
  GL_MAX_FRAMEZOOM_FACTOR_SGIX = $818D;
  GL_TEXTURE_DEFORMATION_BIT_SGIX = $00000001;
  GL_GEOMETRY_DEFORMATION_BIT_SGIX = $00000002;
  GL_GEOMETRY_DEFORMATION_SGIX = $8194;
  GL_TEXTURE_DEFORMATION_SGIX = $8195;
  GL_DEFORMATIONS_MASK_SGIX = $8196;
  GL_MAX_DEFORMATION_ORDER_SGIX = $8197;
  GL_REFERENCE_PLANE_SGIX = $817D;
  GL_REFERENCE_PLANE_EQUATION_SGIX = $817E;
  GL_DEPTH_COMPONENT16_SGIX = $81A5;
  GL_DEPTH_COMPONENT24_SGIX = $81A6;
  GL_DEPTH_COMPONENT32_SGIX = $81A7;
  GL_FOG_FUNC_SGIS = $812A;
  GL_FOG_FUNC_POINTS_SGIS = $812B;
  GL_MAX_FOG_FUNC_POINTS_SGIS = $812C;
  GL_FOG_OFFSET_SGIX = $8198;
  GL_FOG_OFFSET_VALUE_SGIX = $8199;
  GL_IMAGE_SCALE_X_HP = $8155;
  GL_IMAGE_SCALE_Y_HP = $8156;
  GL_IMAGE_TRANSLATE_X_HP = $8157;
  GL_IMAGE_TRANSLATE_Y_HP = $8158;
  GL_IMAGE_ROTATE_ANGLE_HP = $8159;
  GL_IMAGE_ROTATE_ORIGIN_X_HP = $815A;
  GL_IMAGE_ROTATE_ORIGIN_Y_HP = $815B;
  GL_IMAGE_MAG_FILTER_HP = $815C;
  GL_IMAGE_MIN_FILTER_HP = $815D;
  GL_IMAGE_CUBIC_WEIGHT_HP = $815E;
  GL_CUBIC_HP = $815F;
  GL_AVERAGE_HP = $8160;
  GL_IMAGE_TRANSFORM_2D_HP = $8161;
  GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = $8162;
  GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = $8163;
  GL_IGNORE_BORDER_HP = $8150;
  GL_CONSTANT_BORDER_HP = $8151;
  GL_REPLICATE_BORDER_HP = $8153;
  GL_CONVOLUTION_BORDER_COLOR_HP = $8154;
  GL_TEXTURE_ENV_BIAS_SGIX = $80BE;
  GL_VERTEX_DATA_HINT_PGI = $1A22A;
  GL_VERTEX_CONSISTENT_HINT_PGI = $1A22B;
  GL_MATERIAL_SIDE_HINT_PGI = $1A22C;
  GL_MAX_VERTEX_HINT_PGI = $1A22D;
  GL_COLOR3_BIT_PGI = $00010000;
  GL_COLOR4_BIT_PGI = $00020000;
  GL_EDGEFLAG_BIT_PGI = $00040000;
  GL_INDEX_BIT_PGI = $00080000;
  GL_MAT_AMBIENT_BIT_PGI = $00100000;
  GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = $00200000;
  GL_MAT_DIFFUSE_BIT_PGI = $00400000;
  GL_MAT_EMISSION_BIT_PGI = $00800000;
  GL_MAT_COLOR_INDEXES_BIT_PGI = $01000000;
  GL_MAT_SHININESS_BIT_PGI = $02000000;
  GL_MAT_SPECULAR_BIT_PGI = $04000000;
  GL_NORMAL_BIT_PGI = $08000000;
  GL_TEXCOORD1_BIT_PGI = $10000000;
  GL_TEXCOORD2_BIT_PGI = $20000000;
  GL_TEXCOORD3_BIT_PGI = $40000000;
  GL_TEXCOORD4_BIT_PGI = $80000000;
  GL_VERTEX23_BIT_PGI = $00000004;
  GL_VERTEX4_BIT_PGI = $00000008;
  GL_PREFER_DOUBLEBUFFER_HINT_PGI = $1A1F8;
  GL_CONSERVE_MEMORY_HINT_PGI = $1A1FD;
  GL_RECLAIM_MEMORY_HINT_PGI = $1A1FE;
  GL_NATIVE_GRAPHICS_THandle_PGI = $1A202;
  GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = $1A203;
  GL_NATIVE_GRAPHICS_END_HINT_PGI = $1A204;
  GL_ALWAYS_FAST_HINT_PGI = $1A20C;
  GL_ALWAYS_SOFT_HINT_PGI = $1A20D;
  GL_ALLOW_DRAW_OBJ_HINT_PGI = $1A20E;
  GL_ALLOW_DRAW_WIN_HINT_PGI = $1A20F;
  GL_ALLOW_DRAW_FRG_HINT_PGI = $1A210;
  GL_ALLOW_DRAW_MEM_HINT_PGI = $1A211;
  GL_STRICT_DEPTHFUNC_HINT_PGI = $1A216;
  GL_STRICT_LIGHTING_HINT_PGI = $1A217;
  GL_STRICT_SCISSOR_HINT_PGI = $1A218;
  GL_FULL_STIPPLE_HINT_PGI = $1A219;
  GL_CLIP_NEAR_HINT_PGI = $1A220;
  GL_CLIP_FAR_HINT_PGI = $1A221;
  GL_WIDE_LINE_HINT_PGI = $1A222;
  GL_BACK_NORMALS_HINT_PGI = $1A223;
  GL_COLOR_INDEX1_EXT = $80E2;
  GL_COLOR_INDEX2_EXT = $80E3;
  GL_COLOR_INDEX4_EXT = $80E4;
  GL_COLOR_INDEX8_EXT = $80E5;
  GL_COLOR_INDEX12_EXT = $80E6;
  GL_COLOR_INDEX16_EXT = $80E7;
  GL_TEXTURE_INDEX_SIZE_EXT = $80ED;
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT = $80F0;
  GL_LIST_PRIORITY_SGIX = $8182;
  GL_IR_INSTRUMENT1_SGIX = $817F;
  GL_CALLIGRAPHIC_FRAGMENT_SGIX = $8183;
  GL_TEXTURE_LOD_BIAS_S_SGIX = $818E;
  GL_TEXTURE_LOD_BIAS_T_SGIX = $818F;
  GL_TEXTURE_LOD_BIAS_R_SGIX = $8190;
  GL_SHADOW_AMBIENT_SGIX = $80BF;
  GL_INDEX_MATERIAL_EXT = $81B8;
  GL_INDEX_MATERIAL_PARAMETER_EXT = $81B9;
  GL_INDEX_MATERIAL_FACE_EXT = $81BA;
  GL_INDEX_TEST_EXT = $81B5;
  GL_INDEX_TEST_FUNC_EXT = $81B6;
  GL_INDEX_TEST_REF_EXT = $81B7;
  GL_IUI_V2F_EXT = $81AD;
  GL_IUI_V3F_EXT = $81AE;
  GL_IUI_N3F_V2F_EXT = $81AF;
  GL_IUI_N3F_V3F_EXT = $81B0;
  GL_T2F_IUI_V2F_EXT = $81B1;
  GL_T2F_IUI_V3F_EXT = $81B2;
  GL_T2F_IUI_N3F_V2F_EXT = $81B3;
  GL_T2F_IUI_N3F_V3F_EXT = $81B4;
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = $81A8;
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = $81A9;
  GL_CULL_VERTEX_EXT = $81AA;
  GL_CULL_VERTEX_EYE_POSITION_EXT = $81AB;
  GL_CULL_VERTEX_OBJECT_POSITION_EXT = $81AC;
  GL_YCRCB_422_SGIX = $81BB;
  GL_YCRCB_444_SGIX = $81BC;
  GL_FRAGMENT_LIGHTING_SGIX = $8400;
  GL_FRAGMENT_COLOR_MATERIAL_SGIX = $8401;
  GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = $8402;
  GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = $8403;
  GL_MAX_FRAGMENT_LIGHTS_SGIX = $8404;
  GL_MAX_ACTIVE_LIGHTS_SGIX = $8405;
  GL_CURRENT_RASTER_NORMAL_SGIX = $8406;
  GL_LIGHT_ENV_MODE_SGIX = $8407;
  GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = $8408;
  GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = $8409;
  GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = $840A;
  GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = $840B;
  GL_FRAGMENT_LIGHT0_SGIX = $840C;
  GL_FRAGMENT_LIGHT1_SGIX = $840D;
  GL_FRAGMENT_LIGHT2_SGIX = $840E;
  GL_FRAGMENT_LIGHT3_SGIX = $840F;
  GL_FRAGMENT_LIGHT4_SGIX = $8410;
  GL_FRAGMENT_LIGHT5_SGIX = $8411;
  GL_FRAGMENT_LIGHT6_SGIX = $8412;
  GL_FRAGMENT_LIGHT7_SGIX = $8413;
  GL_RASTER_POSITION_UNCLIPPED_IBM = $19262;
  GL_TEXTURE_LIGHTING_MODE_HP = $8167;
  GL_TEXTURE_POST_SPECULAR_HP = $8168;
  GL_TEXTURE_PRE_SPECULAR_HP = $8169;
  GL_MAX_ELEMENTS_VERTICES_EXT = $80E8;
  GL_MAX_ELEMENTS_INDICES_EXT = $80E9;
  GL_PHONG_WIN = $80EA;
  GL_PHONG_HINT_WIN = $80EB;
  GL_FOG_SPECULAR_TEXTURE_WIN = $80EC;
  GL_FRAGMENT_MATERIAL_EXT = $8349;
  GL_FRAGMENT_NORMAL_EXT = $834A;
  GL_FRAGMENT_COLOR_EXT = $834C;
  GL_ATTENUATION_EXT = $834D;
  GL_SHADOW_ATTENUATION_EXT = $834E;
  GL_TEXTURE_APPLICATION_MODE_EXT = $834F;
  GL_TEXTURE_LIGHT_EXT = $8350;
  GL_TEXTURE_MATERIAL_FACE_EXT = $8351;
  GL_TEXTURE_MATERIAL_PARAMETER_EXT = $8352;
  GL_FRAGMENT_DEPTH_EXT = $8452;
  GL_ALPHA_MIN_SGIX = $8320;
  GL_ALPHA_MAX_SGIX = $8321;
  GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = $8184;
  GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = $8185;
  GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = $8186;
  GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = $8187;
  GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = $8188;
  GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = $8189;
  GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = $818A;
  GL_ASYNC_MARKER_SGIX = $8329;
  GL_ASYNC_TEX_IMAGE_SGIX = $835C;
  GL_ASYNC_DRAW_PIXELS_SGIX = $835D;
  GL_ASYNC_READ_PIXELS_SGIX = $835E;
  GL_MAX_ASYNC_TEX_IMAGE_SGIX = $835F;
  GL_MAX_ASYNC_DRAW_PIXELS_SGIX = $8360;
  GL_MAX_ASYNC_READ_PIXELS_SGIX = $8361;
  GL_ASYNC_HISTOGRAM_SGIX = $832C;
  GL_MAX_ASYNC_HISTOGRAM_SGIX = $832D;
  GL_PARALLEL_ARRAYS_INTEL = $83F4;
  GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = $83F5;
  GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = $83F6;
  GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = $83F7;
  GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = $83F8;
  GL_OCCLUSION_TEST_HP = $8165;
  GL_OCCLUSION_TEST_RESULT_HP = $8166;
  GL_PIXEL_TRANSFORM_2D_EXT = $8330;
  GL_PIXEL_MAG_FILTER_EXT = $8331;
  GL_PIXEL_MIN_FILTER_EXT = $8332;
  GL_PIXEL_CUBIC_WEIGHT_EXT = $8333;
  GL_CUBIC_EXT = $8334;
  GL_AVERAGE_EXT = $8335;
  GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = $8336;
  GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = $8337;
  GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = $8338;
  GL_SHARED_TEXTURE_PALETTE_EXT = $81FB;
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT = $81F8;
  GL_SINGLE_COLOR_EXT = $81F9;
  GL_SEPARATE_SPECULAR_COLOR_EXT = $81FA;
  GL_COLOR_SUM_EXT = $8458;
  GL_CURRENT_SECONDARY_COLOR_EXT = $8459;
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = $845A;
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = $845B;
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = $845C;
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = $845D;
  GL_SECONDARY_COLOR_ARRAY_EXT = $845E;
  GL_PERTURB_EXT = $85AE;
  GL_TEXTURE_NORMAL_EXT = $85AF;
  GL_FOG_COORDINATE_SOURCE_EXT = $8450;
  GL_FOG_COORDINATE_EXT = $8451;
  GL_CURRENT_FOG_COORDINATE_EXT = $8453;
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT = $8454;
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = $8455;
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT = $8456;
  GL_FOG_COORDINATE_ARRAY_EXT = $8457;
  GL_SCREEN_COORDINATES_REND = $8490;
  GL_INVERTED_SCREEN_W_REND = $8491;
  GL_TANGENT_ARRAY_EXT = $8439;
  GL_BINORMAL_ARRAY_EXT = $843A;
  GL_CURRENT_TANGENT_EXT = $843B;
  GL_CURRENT_BINORMAL_EXT = $843C;
  GL_TANGENT_ARRAY_TYPE_EXT = $843E;
  GL_TANGENT_ARRAY_STRIDE_EXT = $843F;
  GL_BINORMAL_ARRAY_TYPE_EXT = $8440;
  GL_BINORMAL_ARRAY_STRIDE_EXT = $8441;
  GL_TANGENT_ARRAY_POINTER_EXT = $8442;
  GL_BINORMAL_ARRAY_POINTER_EXT = $8443;
  GL_MAP1_TANGENT_EXT = $8444;
  GL_MAP2_TANGENT_EXT = $8445;
  GL_MAP1_BINORMAL_EXT = $8446;
  GL_MAP2_BINORMAL_EXT = $8447;
  GL_COMBINE_EXT = $8570;
  GL_COMBINE_RGB_EXT = $8571;
  GL_COMBINE_ALPHA_EXT = $8572;
  GL_RGB_SCALE_EXT = $8573;
  GL_ADD_SIGNED_EXT = $8574;
  GL_INTERPOLATE_EXT = $8575;
  GL_CONSTANT_EXT = $8576;
  GL_PRIMARY_COLOR_EXT = $8577;
  GL_PREVIOUS_EXT = $8578;
  GL_SOURCE0_RGB_EXT = $8580;
  GL_SOURCE1_RGB_EXT = $8581;
  GL_SOURCE2_RGB_EXT = $8582;
  GL_SOURCE0_ALPHA_EXT = $8588;
  GL_SOURCE1_ALPHA_EXT = $8589;
  GL_SOURCE2_ALPHA_EXT = $858A;
  GL_OPERAND0_RGB_EXT = $8590;
  GL_OPERAND1_RGB_EXT = $8591;
  GL_OPERAND2_RGB_EXT = $8592;
  GL_OPERAND0_ALPHA_EXT = $8598;
  GL_OPERAND1_ALPHA_EXT = $8599;
  GL_OPERAND2_ALPHA_EXT = $859A;
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = $85B0;
  GL_TRANSFORM_HINT_APPLE = $85B1;
  GL_FOG_SCALE_SGIX = $81FC;
  GL_FOG_SCALE_VALUE_SGIX = $81FD;
  GL_UNPACK_CONSTANT_DATA_SUNX = $81D5;
  GL_TEXTURE_CONSTANT_DATA_SUNX = $81D6;
  GL_GLOBAL_ALPHA_SUN = $81D9;
  GL_GLOBAL_ALPHA_FACTOR_SUN = $81DA;
  GL_RESTART_SUN = $0001;
  GL_REPLACE_MIDDLE_SUN = $0002;
  GL_REPLACE_OLDEST_SUN = $0003;
  GL_TRIANGLE_LIST_SUN = $81D7;
  GL_REPLACEMENT_CODE_SUN = $81D8;
  GL_REPLACEMENT_CODE_ARRAY_SUN = $85C0;
  GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = $85C1;
  GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = $85C2;
  GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = $85C3;
  GL_R1UI_V3F_SUN = $85C4;
  GL_R1UI_C4UB_V3F_SUN = $85C5;
  GL_R1UI_C3F_V3F_SUN = $85C6;
  GL_R1UI_N3F_V3F_SUN = $85C7;
  GL_R1UI_C4F_N3F_V3F_SUN = $85C8;
  GL_R1UI_T2F_V3F_SUN = $85C9;
  GL_R1UI_T2F_N3F_V3F_SUN = $85CA;
  GL_R1UI_T2F_C4F_N3F_V3F_SUN = $85CB;
  GL_BLEND_DST_RGB_EXT = $80C8;
  GL_BLEND_SRC_RGB_EXT = $80C9;
  GL_BLEND_DST_ALPHA_EXT = $80CA;
  GL_BLEND_SRC_ALPHA_EXT = $80CB;
  GL_RED_MIN_CLAMP_INGR = $8560;
  GL_GREEN_MIN_CLAMP_INGR = $8561;
  GL_BLUE_MIN_CLAMP_INGR = $8562;
  GL_ALPHA_MIN_CLAMP_INGR = $8563;
  GL_RED_MAX_CLAMP_INGR = $8564;
  GL_GREEN_MAX_CLAMP_INGR = $8565;
  GL_BLUE_MAX_CLAMP_INGR = $8566;
  GL_ALPHA_MAX_CLAMP_INGR = $8567;
  GL_INTERLACE_READ_INGR = $8568;
  GL_INCR_WRAP_EXT = $8507;
  GL_DECR_WRAP_EXT = $8508;
  GL_422_EXT = $80CC;
  GL_422_REV_EXT = $80CD;
  GL_422_AVERAGE_EXT = $80CE;
  GL_422_REV_AVERAGE_EXT = $80CF;
  GL_NORMAL_MAP_NV = $8511;
  GL_REFLECTION_MAP_NV = $8512;
  GL_NORMAL_MAP_EXT = $8511;
  GL_REFLECTION_MAP_EXT = $8512;
  GL_TEXTURE_CUBE_MAP_EXT = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP_EXT = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = $851A;
  GL_PROXY_TEXTURE_CUBE_MAP_EXT = $851B;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = $851C;
  GL_WRAP_BORDER_SUN = $81D4;
  GL_MAX_TEXTURE_LOD_BIAS_EXT = $84FD;
  GL_TEXTURE_FILTER_CONTROL_EXT = $8500;
  GL_TEXTURE_LOD_BIAS_EXT = $8501;
  GL_TEXTURE_MAX_ANISOTROPY_EXT = $84FE;
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = $84FF;
  GL_MODELVIEW_STACK_DEPTH = $0BA3;
  GL_MODELVIEW0_STACK_DEPTH_EXT = GL_MODELVIEW_STACK_DEPTH;
  GL_MODELVIEW1_STACK_DEPTH_EXT = $8502;
  GL_MODELVIEW_MATRIX = $0BA6;
  GL_MODELVIEW0_MATRIX_EXT = GL_MODELVIEW_MATRIX;
  GL_MODELVIEW1_MATRIX_EXT = $8506;
  GL_VERTEX_WEIGHTING_EXT = $8509;
  GL_MODELVIEW = $1700;
  GL_MODELVIEW0_EXT = GL_MODELVIEW;
  GL_MODELVIEW1_EXT = $850A;
  GL_CURRENT_VERTEX_WEIGHT_EXT = $850B;
  GL_VERTEX_WEIGHT_ARRAY_EXT = $850C;
  GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = $850D;
  GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = $850E;
  GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = $850F;
  GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = $8510;
  GL_MAX_SHININESS_NV = $8504;
  GL_MAX_SPOT_EXPONENT_NV = $8505;
  GL_VERTEX_ARRAY_RANGE_NV = $851D;
  GL_VERTEX_ARRAY_RANGE_LENGTH_NV = $851E;
  GL_VERTEX_ARRAY_RANGE_VALID_NV = $851F;
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = $8520;
  GL_VERTEX_ARRAY_RANGE_POINTER_NV = $8521;
  GL_REGISTER_COMBINERS_NV = $8522;
  GL_VARIABLE_A_NV = $8523;
  GL_VARIABLE_B_NV = $8524;
  GL_VARIABLE_C_NV = $8525;
  GL_VARIABLE_D_NV = $8526;
  GL_VARIABLE_E_NV = $8527;
  GL_VARIABLE_F_NV = $8528;
  GL_VARIABLE_G_NV = $8529;
  GL_CONSTANT_COLOR0_NV = $852A;
  GL_CONSTANT_COLOR1_NV = $852B;
  GL_PRIMARY_COLOR_NV = $852C;
  GL_SECONDARY_COLOR_NV = $852D;
  GL_SPARE0_NV = $852E;
  GL_SPARE1_NV = $852F;
  GL_DISCARD_NV = $8530;
  GL_E_TIMES_F_NV = $8531;
  GL_SPARE0_PLUS_SECONDARY_COLOR_NV = $8532;
  GL_UNSIGNED_IDENTITY_NV = $8536;
  GL_UNSIGNED_INVERT_NV = $8537;
  GL_EXPAND_NORMAL_NV = $8538;
  GL_EXPAND_NEGATE_NV = $8539;
  GL_HALF_BIAS_NORMAL_NV = $853A;
  GL_HALF_BIAS_NEGATE_NV = $853B;
  GL_SIGNED_IDENTITY_NV = $853C;
  GL_SIGNED_NEGATE_NV = $853D;
  GL_SCALE_BY_TWO_NV = $853E;
  GL_SCALE_BY_FOUR_NV = $853F;
  GL_SCALE_BY_ONE_HALF_NV = $8540;
  GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = $8541;
  GL_COMBINER_INPUT_NV = $8542;
  GL_COMBINER_MAPPING_NV = $8543;
  GL_COMBINER_COMPONENT_USAGE_NV = $8544;
  GL_COMBINER_AB_DOT_PRODUCT_NV = $8545;
  GL_COMBINER_CD_DOT_PRODUCT_NV = $8546;
  GL_COMBINER_MUX_SUM_NV = $8547;
  GL_COMBINER_SCALE_NV = $8548;
  GL_COMBINER_BIAS_NV = $8549;
  GL_COMBINER_AB_OUTPUT_NV = $854A;
  GL_COMBINER_CD_OUTPUT_NV = $854B;
  GL_COMBINER_SUM_OUTPUT_NV = $854C;
  GL_MAX_GENERAL_COMBINERS_NV = $854D;
  GL_NUM_GENERAL_COMBINERS_NV = $854E;
  GL_COLOR_SUM_CLAMP_NV = $854F;
  GL_COMBINER0_NV = $8550;
  GL_COMBINER1_NV = $8551;
  GL_COMBINER2_NV = $8552;
  GL_COMBINER3_NV = $8553;
  GL_COMBINER4_NV = $8554;
  GL_COMBINER5_NV = $8555;
  GL_COMBINER6_NV = $8556;
  GL_COMBINER7_NV = $8557;
  GL_FOG_DISTANCE_MODE_NV = $855A;
  GL_EYE_RADIAL_NV = $855B;
  GL_EYE_PLANE_ABSOLUTE_NV = $855C;
  GL_EMBOSS_LIGHT_NV = $855D;
  GL_EMBOSS_CONSTANT_NV = $855E;
  GL_EMBOSS_MAP_NV = $855F;
  GL_COMBINE4_NV = $8503;
  GL_SOURCE3_RGB_NV = $8583;
  GL_SOURCE3_ALPHA_NV = $858B;
  GL_OPERAND3_RGB_NV = $8593;
  GL_OPERAND3_ALPHA_NV = $859B;
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT = $83F0;
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = $83F1;
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = $83F2;
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = $83F3;
  GL_CULL_VERTEX_IBM = 103050;
  GL_VERTEX_ARRAY_LIST_IBM = 103070;
  GL_NORMAL_ARRAY_LIST_IBM = 103071;
  GL_COLOR_ARRAY_LIST_IBM = 103072;
  GL_INDEX_ARRAY_LIST_IBM = 103073;
  GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
  GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
  GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
  GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
  GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
  GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
  GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
  GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
  GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
  GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
  GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
  GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
  GL_PACK_SUBSAMPLE_RATE_SGIX = $85A0;
  GL_UNPACK_SUBSAMPLE_RATE_SGIX = $85A1;
  GL_PIXEL_SUBSAMPLE_4444_SGIX = $85A2;
  GL_PIXEL_SUBSAMPLE_2424_SGIX = $85A3;
  GL_PIXEL_SUBSAMPLE_4242_SGIX = $85A4;
  GL_YCRCB_SGIX = $8318;
  GL_YCRCBA_SGIX = $8319;
  GL_DEPTH_PASS_INSTRUMENT_SGIX = $8310;
  GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = $8311;
  GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = $8312;
  GL_COMPRESSED_RGB_FXT1_3DFX = $86B0;
  GL_COMPRESSED_RGBA_FXT1_3DFX = $86B1;
  GL_MULTISAMPLE_3DFX = $86B2;
  GL_SAMPLE_BUFFERS_3DFX = $86B3;
  GL_SAMPLES_3DFX = $86B4;
  GL_MULTISAMPLE_BIT_3DFX = $20000000;
  GL_MULTISAMPLE_EXT = $809D;
  GL_SAMPLE_ALPHA_TO_MASK_EXT = $809E;
  GL_SAMPLE_ALPHA_TO_ONE_EXT = $809F;
  GL_SAMPLE_MASK_EXT = $80A0;
  GL_1PASS_EXT = $80A1;
  GL_2PASS_0_EXT = $80A2;
  GL_2PASS_1_EXT = $80A3;
  GL_4PASS_0_EXT = $80A4;
  GL_4PASS_1_EXT = $80A5;
  GL_4PASS_2_EXT = $80A6;
  GL_4PASS_3_EXT = $80A7;
  GL_SAMPLE_BUFFERS_EXT = $80A8;
  GL_SAMPLES_EXT = $80A9;
  GL_SAMPLE_MASK_VALUE_EXT = $80AA;
  GL_SAMPLE_MASK_INVERT_EXT = $80AB;
  GL_SAMPLE_PATTERN_EXT = $80AC;
  GL_MULTISAMPLE_BIT_EXT = $20000000;
  GL_VERTEX_PRECLIP_SGIX = $83EE;
  GL_VERTEX_PRECLIP_HINT_SGIX = $83EF;
  GL_CONVOLUTION_HINT_SGIX = $8316;
  GL_PACK_RESAMPLE_SGIX = $842C;
  GL_UNPACK_RESAMPLE_SGIX = $842D;
  GL_RESAMPLE_REPLICATE_SGIX = $842E;
  GL_RESAMPLE_ZERO_FILL_SGIX = $842F;
  GL_RESAMPLE_DECIMATE_SGIX = $8430;
  GL_EYE_DISTANCE_TO_POINT_SGIS = $81F0;
  GL_OBJECT_DISTANCE_TO_POINT_SGIS = $81F1;
  GL_EYE_DISTANCE_TO_LINE_SGIS = $81F2;
  GL_OBJECT_DISTANCE_TO_LINE_SGIS = $81F3;
  GL_EYE_POINT_SGIS = $81F4;
  GL_OBJECT_POINT_SGIS = $81F5;
  GL_EYE_LINE_SGIS = $81F6;
  GL_OBJECT_LINE_SGIS = $81F7;
  GL_TEXTURE_COLOR_WRITEMASK_SGIS = $81EF;
  GL_MIRROR_CLAMP_ATI = $8742;
  GL_MIRROR_CLAMP_TO_EDGE_ATI = $8743;
  GL_ALL_COMPLETED_NV = $84F2;
  GL_FENCE_STATUS_NV = $84F3;
  GL_FENCE_CONDITION_NV = $84F4;
  GL_MIRRORED_REPEAT_IBM = $8370;
  GL_EVAL_2D_NV = $86C0;
  GL_EVAL_TRIANGULAR_2D_NV = $86C1;
  GL_MAP_TESSELLATION_NV = $86C2;
  GL_MAP_ATTRIB_U_ORDER_NV = $86C3;
  GL_MAP_ATTRIB_V_ORDER_NV = $86C4;
  GL_EVAL_FRACTIONAL_TESSELLATION_NV = $86C5;
  GL_EVAL_VERTEX_ATTRIB0_NV = $86C6;
  GL_EVAL_VERTEX_ATTRIB1_NV = $86C7;
  GL_EVAL_VERTEX_ATTRIB2_NV = $86C8;
  GL_EVAL_VERTEX_ATTRIB3_NV = $86C9;
  GL_EVAL_VERTEX_ATTRIB4_NV = $86CA;
  GL_EVAL_VERTEX_ATTRIB5_NV = $86CB;
  GL_EVAL_VERTEX_ATTRIB6_NV = $86CC;
  GL_EVAL_VERTEX_ATTRIB7_NV = $86CD;
  GL_EVAL_VERTEX_ATTRIB8_NV = $86CE;
  GL_EVAL_VERTEX_ATTRIB9_NV = $86CF;
  GL_EVAL_VERTEX_ATTRIB10_NV = $86D0;
  GL_EVAL_VERTEX_ATTRIB11_NV = $86D1;
  GL_EVAL_VERTEX_ATTRIB12_NV = $86D2;
  GL_EVAL_VERTEX_ATTRIB13_NV = $86D3;
  GL_EVAL_VERTEX_ATTRIB14_NV = $86D4;
  GL_EVAL_VERTEX_ATTRIB15_NV = $86D5;
  GL_MAX_MAP_TESSELLATION_NV = $86D6;
  GL_MAX_RATIONAL_EVAL_ORDER_NV = $86D7;
  GL_DEPTH_STENCIL_NV = $84F9;
  GL_UNSIGNED_INT_24_8_NV = $84FA;
  GL_PER_STAGE_CONSTANTS_NV = $8535;
  GL_TEXTURE_TRectANGLE_NV = $84F5;
  GL_TEXTURE_BINDING_TRectANGLE_NV = $84F6;
  GL_PROXY_TEXTURE_TRectANGLE_NV = $84F7;
  GL_MAX_TRectANGLE_TEXTURE_SIZE_NV = $84F8;
  GL_OFFSET_TEXTURE_TRectANGLE_NV = $864C;
  GL_OFFSET_TEXTURE_TRectANGLE_SCALE_NV = $864D;
  GL_DOT_PRODUCT_TEXTURE_TRectANGLE_NV = $864E;
  GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = $86D9;
  GL_UNSIGNED_INT_S8_S8_8_8_NV = $86DA;
  GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = $86DB;
  GL_DSDT_MAG_INTENSITY_NV = $86DC;
  GL_SHADER_CONSISTENT_NV = $86DD;
  GL_TEXTURE_SHADER_NV = $86DE;
  GL_SHADER_OPERATION_NV = $86DF;
  GL_CULL_MODES_NV = $86E0;
  GL_OFFSET_TEXTURE_MATRIX_NV = $86E1;
  GL_OFFSET_TEXTURE_SCALE_NV = $86E2;
  GL_OFFSET_TEXTURE_BIAS_NV = $86E3;
  GL_OFFSET_TEXTURE_2D_MATRIX_NV = GL_OFFSET_TEXTURE_MATRIX_NV;
  GL_OFFSET_TEXTURE_2D_SCALE_NV = GL_OFFSET_TEXTURE_SCALE_NV;
  GL_OFFSET_TEXTURE_2D_BIAS_NV = GL_OFFSET_TEXTURE_BIAS_NV;
  GL_PREVIOUS_TEXTURE_INPUT_NV = $86E4;
  GL_CONST_EYE_NV = $86E5;
  GL_PASS_THROUGH_NV = $86E6;
  GL_CULL_FRAGMENT_NV = $86E7;
  GL_OFFSET_TEXTURE_2D_NV = $86E8;
  GL_DEPENDENT_AR_TEXTURE_2D_NV = $86E9;
  GL_DEPENDENT_GB_TEXTURE_2D_NV = $86EA;
  GL_DOT_PRODUCT_NV = $86EC;
  GL_DOT_PRODUCT_DEPTH_REPLACE_NV = $86ED;
  GL_DOT_PRODUCT_TEXTURE_2D_NV = $86EE;
  GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = $86F0;
  GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = $86F1;
  GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = $86F2;
  GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = $86F3;
  GL_HILO_NV = $86F4;
  GL_DSDT_NV = $86F5;
  GL_DSDT_MAG_NV = $86F6;
  GL_DSDT_MAG_VIB_NV = $86F7;
  GL_HILO16_NV = $86F8;
  GL_SIGNED_HILO_NV = $86F9;
  GL_SIGNED_HILO16_NV = $86FA;
  GL_SIGNED_RGBA_NV = $86FB;
  GL_SIGNED_RGBA8_NV = $86FC;
  GL_SIGNED_RGB_NV = $86FE;
  GL_SIGNED_RGB8_NV = $86FF;
  GL_SIGNED_LUMINANCE_NV = $8701;
  GL_SIGNED_LUMINANCE8_NV = $8702;
  GL_SIGNED_LUMINANCE_ALPHA_NV = $8703;
  GL_SIGNED_LUMINANCE8_ALPHA8_NV = $8704;
  GL_SIGNED_ALPHA_NV = $8705;
  GL_SIGNED_ALPHA8_NV = $8706;
  GL_SIGNED_INTENSITY_NV = $8707;
  GL_SIGNED_INTENSITY8_NV = $8708;
  GL_DSDT8_NV = $8709;
  GL_DSDT8_MAG8_NV = $870A;
  GL_DSDT8_MAG8_INTENSITY8_NV = $870B;
  GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = $870C;
  GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = $870D;
  GL_HI_SCALE_NV = $870E;
  GL_LO_SCALE_NV = $870F;
  GL_DS_SCALE_NV = $8710;
  GL_DT_SCALE_NV = $8711;
  GL_MAGNITUDE_SCALE_NV = $8712;
  GL_VIBRANCE_SCALE_NV = $8713;
  GL_HI_BIAS_NV = $8714;
  GL_LO_BIAS_NV = $8715;
  GL_DS_BIAS_NV = $8716;
  GL_DT_BIAS_NV = $8717;
  GL_MAGNITUDE_BIAS_NV = $8718;
  GL_VIBRANCE_BIAS_NV = $8719;
  GL_TEXTURE_BORDER_VALUES_NV = $871A;
  GL_TEXTURE_HI_SIZE_NV = $871B;
  GL_TEXTURE_LO_SIZE_NV = $871C;
  GL_TEXTURE_DS_SIZE_NV = $871D;
  GL_TEXTURE_DT_SIZE_NV = $871E;
  GL_TEXTURE_MAG_SIZE_NV = $871F;
  GL_DOT_PRODUCT_TEXTURE_3D_NV = $86EF;
  GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = $8533;
  GL_VERTEX_PROGRAM_NV = $8620;
  GL_VERTEX_STATE_PROGRAM_NV = $8621;
  GL_ATTRIB_ARRAY_SIZE_NV = $8623;
  GL_ATTRIB_ARRAY_STRIDE_NV = $8624;
  GL_ATTRIB_ARRAY_TYPE_NV = $8625;
  GL_CURRENT_ATTRIB_NV = $8626;
  GL_PROGRAM_LENGTH_NV = $8627;
  GL_PROGRAM_STRING_NV = $8628;
  GL_MODELVIEW_PROJECTION_NV = $8629;
  GL_IDENTITY_NV = $862A;
  GL_INVERSE_NV = $862B;
  GL_TRANSPOSE_NV = $862C;
  GL_INVERSE_TRANSPOSE_NV = $862D;
  GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = $862E;
  GL_MAX_TRACK_MATRICES_NV = $862F;
  GL_MATRIX0_NV = $8630;
  GL_MATRIX1_NV = $8631;
  GL_MATRIX2_NV = $8632;
  GL_MATRIX3_NV = $8633;
  GL_MATRIX4_NV = $8634;
  GL_MATRIX5_NV = $8635;
  GL_MATRIX6_NV = $8636;
  GL_MATRIX7_NV = $8637;
  GL_CURRENT_MATRIX_STACK_DEPTH_NV = $8640;
  GL_CURRENT_MATRIX_NV = $8641;
  GL_VERTEX_PROGRAM_POINT_SIZE_NV = $8642;
  GL_VERTEX_PROGRAM_TWO_SIDE_NV = $8643;
  GL_PROGRAM_PARAMETER_NV = $8644;
  GL_ATTRIB_ARRAY_POINTER_NV = $8645;
  GL_PROGRAM_TARGET_NV = $8646;
  GL_PROGRAM_RESIDENT_NV = $8647;
  GL_TRACK_MATRIX_NV = $8648;
  GL_TRACK_MATRIX_TRANSFORM_NV = $8649;
  GL_VERTEX_PROGRAM_BINDING_NV = $864A;
  GL_PROGRAM_ERROR_POSITION_NV = $864B;
  GL_VERTEX_ATTRIB_ARRAY0_NV = $8650;
  GL_VERTEX_ATTRIB_ARRAY1_NV = $8651;
  GL_VERTEX_ATTRIB_ARRAY2_NV = $8652;
  GL_VERTEX_ATTRIB_ARRAY3_NV = $8653;
  GL_VERTEX_ATTRIB_ARRAY4_NV = $8654;
  GL_VERTEX_ATTRIB_ARRAY5_NV = $8655;
  GL_VERTEX_ATTRIB_ARRAY6_NV = $8656;
  GL_VERTEX_ATTRIB_ARRAY7_NV = $8657;
  GL_VERTEX_ATTRIB_ARRAY8_NV = $8658;
  GL_VERTEX_ATTRIB_ARRAY9_NV = $8659;
  GL_VERTEX_ATTRIB_ARRAY10_NV = $865A;
  GL_VERTEX_ATTRIB_ARRAY11_NV = $865B;
  GL_VERTEX_ATTRIB_ARRAY12_NV = $865C;
  GL_VERTEX_ATTRIB_ARRAY13_NV = $865D;
  GL_VERTEX_ATTRIB_ARRAY14_NV = $865E;
  GL_VERTEX_ATTRIB_ARRAY15_NV = $865F;
  GL_MAP1_VERTEX_ATTRIB0_4_NV = $8660;
  GL_MAP1_VERTEX_ATTRIB1_4_NV = $8661;
  GL_MAP1_VERTEX_ATTRIB2_4_NV = $8662;
  GL_MAP1_VERTEX_ATTRIB3_4_NV = $8663;
  GL_MAP1_VERTEX_ATTRIB4_4_NV = $8664;
  GL_MAP1_VERTEX_ATTRIB5_4_NV = $8665;
  GL_MAP1_VERTEX_ATTRIB6_4_NV = $8666;
  GL_MAP1_VERTEX_ATTRIB7_4_NV = $8667;
  GL_MAP1_VERTEX_ATTRIB8_4_NV = $8668;
  GL_MAP1_VERTEX_ATTRIB9_4_NV = $8669;
  GL_MAP1_VERTEX_ATTRIB10_4_NV = $866A;
  GL_MAP1_VERTEX_ATTRIB11_4_NV = $866B;
  GL_MAP1_VERTEX_ATTRIB12_4_NV = $866C;
  GL_MAP1_VERTEX_ATTRIB13_4_NV = $866D;
  GL_MAP1_VERTEX_ATTRIB14_4_NV = $866E;
  GL_MAP1_VERTEX_ATTRIB15_4_NV = $866F;
  GL_MAP2_VERTEX_ATTRIB0_4_NV = $8670;
  GL_MAP2_VERTEX_ATTRIB1_4_NV = $8671;
  GL_MAP2_VERTEX_ATTRIB2_4_NV = $8672;
  GL_MAP2_VERTEX_ATTRIB3_4_NV = $8673;
  GL_MAP2_VERTEX_ATTRIB4_4_NV = $8674;
  GL_MAP2_VERTEX_ATTRIB5_4_NV = $8675;
  GL_MAP2_VERTEX_ATTRIB6_4_NV = $8676;
  GL_MAP2_VERTEX_ATTRIB7_4_NV = $8677;
  GL_MAP2_VERTEX_ATTRIB8_4_NV = $8678;
  GL_MAP2_VERTEX_ATTRIB9_4_NV = $8679;
  GL_MAP2_VERTEX_ATTRIB10_4_NV = $867A;
  GL_MAP2_VERTEX_ATTRIB11_4_NV = $867B;
  GL_MAP2_VERTEX_ATTRIB12_4_NV = $867C;
  GL_MAP2_VERTEX_ATTRIB13_4_NV = $867D;
  GL_MAP2_VERTEX_ATTRIB14_4_NV = $867E;
  GL_MAP2_VERTEX_ATTRIB15_4_NV = $867F;
  GL_TEXTURE_MAX_CLAMP_S_SGIX = $8369;
  GL_TEXTURE_MAX_CLAMP_T_SGIX = $836A;
  GL_TEXTURE_MAX_CLAMP_R_SGIX = $836B;
  GL_SCALEBIAS_HINT_SGIX = $8322;
  GL_INTERLACE_OML = $8980;
  GL_INTERLACE_READ_OML = $8981;
  GL_FORMAT_SUBSAMPLE_24_24_OML = $8982;
  GL_FORMAT_SUBSAMPLE_244_244_OML = $8983;
  GL_PACK_RESAMPLE_OML = $8984;
  GL_UNPACK_RESAMPLE_OML = $8985;
  GL_RESAMPLE_REPLICATE_OML = $8986;
  GL_RESAMPLE_ZERO_FILL_OML = $8987;
  GL_RESAMPLE_AVERAGE_OML = $8988;
  GL_RESAMPLE_DECIMATE_OML = $8989;
  GL_DEPTH_STENCIL_TO_RGBA_NV = $886E;
  GL_DEPTH_STENCIL_TO_BGRA_NV = $886F;
  GL_BUMP_ROT_MATRIX_ATI = $8775;
  GL_BUMP_ROT_MATRIX_SIZE_ATI = $8776;
  GL_BUMP_NUM_TEX_UNITS_ATI = $8777;
  GL_BUMP_TEX_UNITS_ATI = $8778;
  GL_DUDV_ATI = $8779;
  GL_DU8DV8_ATI = $877A;
  GL_BUMP_ENVMAP_ATI = $877B;
  GL_BUMP_TARGET_ATI = $877C;
  GL_FRAGMENT_SHADER_ATI = $8920;
  GL_REG_0_ATI = $8921;
  GL_REG_1_ATI = $8922;
  GL_REG_2_ATI = $8923;
  GL_REG_3_ATI = $8924;
  GL_REG_4_ATI = $8925;
  GL_REG_5_ATI = $8926;
  GL_REG_6_ATI = $8927;
  GL_REG_7_ATI = $8928;
  GL_REG_8_ATI = $8929;
  GL_REG_9_ATI = $892A;
  GL_REG_10_ATI = $892B;
  GL_REG_11_ATI = $892C;
  GL_REG_12_ATI = $892D;
  GL_REG_13_ATI = $892E;
  GL_REG_14_ATI = $892F;
  GL_REG_15_ATI = $8930;
  GL_REG_16_ATI = $8931;
  GL_REG_17_ATI = $8932;
  GL_REG_18_ATI = $8933;
  GL_REG_19_ATI = $8934;
  GL_REG_20_ATI = $8935;
  GL_REG_21_ATI = $8936;
  GL_REG_22_ATI = $8937;
  GL_REG_23_ATI = $8938;
  GL_REG_24_ATI = $8939;
  GL_REG_25_ATI = $893A;
  GL_REG_26_ATI = $893B;
  GL_REG_27_ATI = $893C;
  GL_REG_28_ATI = $893D;
  GL_REG_29_ATI = $893E;
  GL_REG_30_ATI = $893F;
  GL_REG_31_ATI = $8940;
  GL_CON_0_ATI = $8941;
  GL_CON_1_ATI = $8942;
  GL_CON_2_ATI = $8943;
  GL_CON_3_ATI = $8944;
  GL_CON_4_ATI = $8945;
  GL_CON_5_ATI = $8946;
  GL_CON_6_ATI = $8947;
  GL_CON_7_ATI = $8948;
  GL_CON_8_ATI = $8949;
  GL_CON_9_ATI = $894A;
  GL_CON_10_ATI = $894B;
  GL_CON_11_ATI = $894C;
  GL_CON_12_ATI = $894D;
  GL_CON_13_ATI = $894E;
  GL_CON_14_ATI = $894F;
  GL_CON_15_ATI = $8950;
  GL_CON_16_ATI = $8951;
  GL_CON_17_ATI = $8952;
  GL_CON_18_ATI = $8953;
  GL_CON_19_ATI = $8954;
  GL_CON_20_ATI = $8955;
  GL_CON_21_ATI = $8956;
  GL_CON_22_ATI = $8957;
  GL_CON_23_ATI = $8958;
  GL_CON_24_ATI = $8959;
  GL_CON_25_ATI = $895A;
  GL_CON_26_ATI = $895B;
  GL_CON_27_ATI = $895C;
  GL_CON_28_ATI = $895D;
  GL_CON_29_ATI = $895E;
  GL_CON_30_ATI = $895F;
  GL_CON_31_ATI = $8960;
  GL_MOV_ATI = $8961;
  GL_ADD_ATI = $8963;
  GL_MUL_ATI = $8964;
  GL_SUB_ATI = $8965;
  GL_DOT3_ATI = $8966;
  GL_DOT4_ATI = $8967;
  GL_MAD_ATI = $8968;
  GL_LERP_ATI = $8969;
  GL_CND_ATI = $896A;
  GL_CND0_ATI = $896B;
  GL_DOT2_ADD_ATI = $896C;
  GL_SECONDARY_INTERPOLATOR_ATI = $896D;
  GL_NUM_FRAGMENT_REGISTERS_ATI = $896E;
  GL_NUM_FRAGMENT_CONSTANTS_ATI = $896F;
  GL_NUM_PASSES_ATI = $8970;
  GL_NUM_INSTRUCTIONS_PER_PASS_ATI = $8971;
  GL_NUM_INSTRUCTIONS_TOTAL_ATI = $8972;
  GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = $8973;
  GL_NUM_LOOPBACK_COMPONENTS_ATI = $8974;
  GL_COLOR_ALPHA_PAIRING_ATI = $8975;
  GL_SWIZZLE_STR_ATI = $8976;
  GL_SWIZZLE_STQ_ATI = $8977;
  GL_SWIZZLE_STR_DR_ATI = $8978;
  GL_SWIZZLE_STQ_DQ_ATI = $8979;
  GL_SWIZZLE_STRQ_ATI = $897A;
  GL_SWIZZLE_STRQ_DQ_ATI = $897B;
  GL_RED_BIT_ATI = $00000001;
  GL_GREEN_BIT_ATI = $00000002;
  GL_BLUE_BIT_ATI = $00000004;
  GL_2X_BIT_ATI = $00000001;
  GL_4X_BIT_ATI = $00000002;
  GL_8X_BIT_ATI = $00000004;
  GL_HALF_BIT_ATI = $00000008;
  GL_QUARTER_BIT_ATI = $00000010;
  GL_EIGHTH_BIT_ATI = $00000020;
  GL_SATURATE_BIT_ATI = $00000040;
  GL_COMP_BIT_ATI = $00000002;
  GL_NEGATE_BIT_ATI = $00000004;
  GL_BIAS_BIT_ATI = $00000008;
  GL_PN_TRIANGLES_ATI = $87F0;
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = $87F1;
  GL_PN_TRIANGLES_POINT_MODE_ATI = $87F2;
  GL_PN_TRIANGLES_NORMAL_MODE_ATI = $87F3;
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = $87F4;
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = $87F5;
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = $87F6;
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = $87F7;
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = $87F8;
  GL_STATIC_ATI = $8760;
  GL_DYNAMIC_ATI = $8761;
  GL_PRESERVE_ATI = $8762;
  GL_DISCARD_ATI = $8763;
  GL_OBJECT_BUFFER_SIZE_ATI = $8764;
  GL_OBJECT_BUFFER_USAGE_ATI = $8765;
  GL_ARRAY_OBJECT_BUFFER_ATI = $8766;
  GL_ARRAY_OBJECT_OFFSET_ATI = $8767;
  GL_VERTEX_SHADER_EXT = $8780;
  GL_VERTEX_SHADER_BINDING_EXT = $8781;
  GL_OP_INDEX_EXT = $8782;
  GL_OP_NEGATE_EXT = $8783;
  GL_OP_DOT3_EXT = $8784;
  GL_OP_DOT4_EXT = $8785;
  GL_OP_MUL_EXT = $8786;
  GL_OP_ADD_EXT = $8787;
  GL_OP_MADD_EXT = $8788;
  GL_OP_FRAC_EXT = $8789;
  GL_OP_MAX_EXT = $878A;
  GL_OP_MIN_EXT = $878B;
  GL_OP_SET_GE_EXT = $878C;
  GL_OP_SET_LT_EXT = $878D;
  GL_OP_CLAMP_EXT = $878E;
  GL_OP_FLOOR_EXT = $878F;
  GL_OP_ROUND_EXT = $8790;
  GL_OP_EXP_BASE_2_EXT = $8791;
  GL_OP_LOG_BASE_2_EXT = $8792;
  GL_OP_POWER_EXT = $8793;
  GL_OP_RECIP_EXT = $8794;
  GL_OP_RECIP_SQRT_EXT = $8795;
  GL_OP_SUB_EXT = $8796;
  GL_OP_CROSS_PRODUCT_EXT = $8797;
  GL_OP_MULTIPLY_MATRIX_EXT = $8798;
  GL_OP_MOV_EXT = $8799;
  GL_OUTPUT_VERTEX_EXT = $879A;
  GL_OUTPUT_COLOR0_EXT = $879B;
  GL_OUTPUT_COLOR1_EXT = $879C;
  GL_OUTPUT_TEXTURE_COORD0_EXT = $879D;
  GL_OUTPUT_TEXTURE_COORD1_EXT = $879E;
  GL_OUTPUT_TEXTURE_COORD2_EXT = $879F;
  GL_OUTPUT_TEXTURE_COORD3_EXT = $87A0;
  GL_OUTPUT_TEXTURE_COORD4_EXT = $87A1;
  GL_OUTPUT_TEXTURE_COORD5_EXT = $87A2;
  GL_OUTPUT_TEXTURE_COORD6_EXT = $87A3;
  GL_OUTPUT_TEXTURE_COORD7_EXT = $87A4;
  GL_OUTPUT_TEXTURE_COORD8_EXT = $87A5;
  GL_OUTPUT_TEXTURE_COORD9_EXT = $87A6;
  GL_OUTPUT_TEXTURE_COORD10_EXT = $87A7;
  GL_OUTPUT_TEXTURE_COORD11_EXT = $87A8;
  GL_OUTPUT_TEXTURE_COORD12_EXT = $87A9;
  GL_OUTPUT_TEXTURE_COORD13_EXT = $87AA;
  GL_OUTPUT_TEXTURE_COORD14_EXT = $87AB;
  GL_OUTPUT_TEXTURE_COORD15_EXT = $87AC;
  GL_OUTPUT_TEXTURE_COORD16_EXT = $87AD;
  GL_OUTPUT_TEXTURE_COORD17_EXT = $87AE;
  GL_OUTPUT_TEXTURE_COORD18_EXT = $87AF;
  GL_OUTPUT_TEXTURE_COORD19_EXT = $87B0;
  GL_OUTPUT_TEXTURE_COORD20_EXT = $87B1;
  GL_OUTPUT_TEXTURE_COORD21_EXT = $87B2;
  GL_OUTPUT_TEXTURE_COORD22_EXT = $87B3;
  GL_OUTPUT_TEXTURE_COORD23_EXT = $87B4;
  GL_OUTPUT_TEXTURE_COORD24_EXT = $87B5;
  GL_OUTPUT_TEXTURE_COORD25_EXT = $87B6;
  GL_OUTPUT_TEXTURE_COORD26_EXT = $87B7;
  GL_OUTPUT_TEXTURE_COORD27_EXT = $87B8;
  GL_OUTPUT_TEXTURE_COORD28_EXT = $87B9;
  GL_OUTPUT_TEXTURE_COORD29_EXT = $87BA;
  GL_OUTPUT_TEXTURE_COORD30_EXT = $87BB;
  GL_OUTPUT_TEXTURE_COORD31_EXT = $87BC;
  GL_OUTPUT_FOG_EXT = $87BD;
  GL_SCALAR_EXT = $87BE;
  GL_VECTOR_EXT = $87BF;
  GL_MATRIX_EXT = $87C0;
  GL_VARIANT_EXT = $87C1;
  GL_INVARIANT_EXT = $87C2;
  GL_LOCAL_CONSTANT_EXT = $87C3;
  GL_LOCAL_EXT = $87C4;
  GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = $87C5;
  GL_MAX_VERTEX_SHADER_VARIANTS_EXT = $87C6;
  GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = $87C7;
  GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87C8;
  GL_MAX_VERTEX_SHADER_LOCALS_EXT = $87C9;
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = $87CA;
  GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = $87CB;
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87CC;
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = $87CD;
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = $87CE;
  GL_VERTEX_SHADER_INSTRUCTIONS_EXT = $87CF;
  GL_VERTEX_SHADER_VARIANTS_EXT = $87D0;
  GL_VERTEX_SHADER_INVARIANTS_EXT = $87D1;
  GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87D2;
  GL_VERTEX_SHADER_LOCALS_EXT = $87D3;
  GL_VERTEX_SHADER_OPTIMIZED_EXT = $87D4;
  GL_X_EXT = $87D5;
  GL_Y_EXT = $87D6;
  GL_Z_EXT = $87D7;
  GL_W_EXT = $87D8;
  GL_NEGATIVE_X_EXT = $87D9;
  GL_NEGATIVE_Y_EXT = $87DA;
  GL_NEGATIVE_Z_EXT = $87DB;
  GL_NEGATIVE_W_EXT = $87DC;
  GL_ZERO_EXT = $87DD;
  GL_ONE_EXT = $87DE;
  GL_NEGATIVE_ONE_EXT = $87DF;
  GL_NORMALIZED_RANGE_EXT = $87E0;
  GL_FULL_RANGE_EXT = $87E1;
  GL_CURRENT_VERTEX_EXT = $87E2;
  GL_MVP_MATRIX_EXT = $87E3;
  GL_VARIANT_VALUE_EXT = $87E4;
  GL_VARIANT_DATATYPE_EXT = $87E5;
  GL_VARIANT_ARRAY_STRIDE_EXT = $87E6;
  GL_VARIANT_ARRAY_TYPE_EXT = $87E7;
  GL_VARIANT_ARRAY_EXT = $87E8;
  GL_VARIANT_ARRAY_POINTER_EXT = $87E9;
  GL_INVARIANT_VALUE_EXT = $87EA;
  GL_INVARIANT_DATATYPE_EXT = $87EB;
  GL_LOCAL_CONSTANT_VALUE_EXT = $87EC;
  GL_LOCAL_CONSTANT_DATATYPE_EXT = $87ED;
  GL_MAX_VERTEX_STREAMS_ATI = $876B;
  GL_VERTEX_STREAM0_ATI = $876C;
  GL_VERTEX_STREAM1_ATI = $876D;
  GL_VERTEX_STREAM2_ATI = $876E;
  GL_VERTEX_STREAM3_ATI = $876F;
  GL_VERTEX_STREAM4_ATI = $8770;
  GL_VERTEX_STREAM5_ATI = $8771;
  GL_VERTEX_STREAM6_ATI = $8772;
  GL_VERTEX_STREAM7_ATI = $8773;
  GL_VERTEX_SOURCE_ATI = $8774;
  GL_ELEMENT_ARRAY_ATI = $8768;
  GL_ELEMENT_ARRAY_TYPE_ATI = $8769;
  GL_ELEMENT_ARRAY_POINTER_ATI = $876A;
  GL_QUAD_MESH_SUN = $8614;
  GL_TRIANGLE_MESH_SUN = $8615;
  GL_SLICE_ACCUM_SUN = $85CC;
  GL_MULTISAMPLE_FILTER_HINT_NV = $8534;
  GL_DEPTH_CLAMP_NV = $864F;
  GL_PIXEL_COUNTER_BITS_NV = $8864;
  GL_CURRENT_OCCLUSION_QUERY_ID_NV = $8865;
  GL_PIXEL_COUNT_NV = $8866;
  GL_PIXEL_COUNT_AVAILABLE_NV = $8867;
  GL_POINT_SPRITE_NV = $8861;
  GL_COORD_REPLACE_NV = $8862;
  GL_POINT_SPRITE_R_MODE_NV = $8863;
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = $8850;
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = $8851;
  GL_OFFSET_PROJECTIVE_TEXTURE_TRectANGLE_NV = $8852;
  GL_OFFSET_PROJECTIVE_TEXTURE_TRectANGLE_SCALE_NV = $8853;
  GL_OFFSET_HILO_TEXTURE_2D_NV = $8854;
  GL_OFFSET_HILO_TEXTURE_TRectANGLE_NV = $8855;
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = $8856;
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_TRectANGLE_NV = $8857;
  GL_DEPENDENT_HILO_TEXTURE_2D_NV = $8858;
  GL_DEPENDENT_RGB_TEXTURE_3D_NV = $8859;
  GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = $885A;
  GL_DOT_PRODUCT_PASS_THROUGH_NV = $885B;
  GL_DOT_PRODUCT_TEXTURE_1D_NV = $885C;
  GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = $885D;
  GL_HILO8_NV = $885E;
  GL_SIGNED_HILO8_NV = $885F;
  GL_FORCE_BLUE_TO_ONE_NV = $8860;
  GL_STENCIL_TEST_TWO_SIDE_EXT = $8910;
  GL_ACTIVE_STENCIL_FACE_EXT = $8911;
  GL_TEXT_FRAGMENT_SHADER_ATI = $8200;
  GL_UNPACK_CLIENT_STORAGE_APPLE = $85B2;
  GL_ELEMENT_ARRAY_APPLE = $8768;
  GL_ELEMENT_ARRAY_TYPE_APPLE = $8769;
  GL_ELEMENT_ARRAY_POINTER_APPLE = $876A;
  GL_DRAW_PIXELS_APPLE = $8A0A;
  GL_FENCE_APPLE = $8A0B;
  GL_VERTEX_ARRAY_BINDING_APPLE = $85B5;
  GL_VERTEX_ARRAY_RANGE_APPLE = $851D;
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = $851E;
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = $851F;
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = $8521;
  GL_STORAGE_CACHED_APPLE = $85BE;
  GL_STORAGE_SHARED_APPLE = $85BF;
  GL_YCBCR_422_APPLE = $85B9;
  GL_UNSIGNED_SHORT_8_8_APPLE = $85BA;
  GL_UNSIGNED_SHORT_8_8_REV_APPLE = $85BB;
  GL_RGB_S3TC = $83A0;
  GL_RGB4_S3TC = $83A1;
  GL_RGBA_S3TC = $83A2;
  GL_RGBA4_S3TC = $83A3;
  GL_MAX_DRAW_BUFFERS_ATI = $8824;
  GL_DRAW_BUFFER0_ATI = $8825;
  GL_DRAW_BUFFER1_ATI = $8826;
  GL_DRAW_BUFFER2_ATI = $8827;
  GL_DRAW_BUFFER3_ATI = $8828;
  GL_DRAW_BUFFER4_ATI = $8829;
  GL_DRAW_BUFFER5_ATI = $882A;
  GL_DRAW_BUFFER6_ATI = $882B;
  GL_DRAW_BUFFER7_ATI = $882C;
  GL_DRAW_BUFFER8_ATI = $882D;
  GL_DRAW_BUFFER9_ATI = $882E;
  GL_DRAW_BUFFER10_ATI = $882F;
  GL_DRAW_BUFFER11_ATI = $8830;
  GL_DRAW_BUFFER12_ATI = $8831;
  GL_DRAW_BUFFER13_ATI = $8832;
  GL_DRAW_BUFFER14_ATI = $8833;
  GL_DRAW_BUFFER15_ATI = $8834;
  GL_MODULATE_ADD_ATI = $8744;
  GL_MODULATE_SIGNED_ADD_ATI = $8745;
  GL_MODULATE_SUBTRACT_ATI = $8746;
  GL_RGBA_FLOAT32_ATI = $8814;
  GL_RGB_FLOAT32_ATI = $8815;
  GL_ALPHA_FLOAT32_ATI = $8816;
  GL_INTENSITY_FLOAT32_ATI = $8817;
  GL_LUMINANCE_FLOAT32_ATI = $8818;
  GL_LUMINANCE_ALPHA_FLOAT32_ATI = $8819;
  GL_RGBA_FLOAT16_ATI = $881A;
  GL_RGB_FLOAT16_ATI = $881B;
  GL_ALPHA_FLOAT16_ATI = $881C;
  GL_INTENSITY_FLOAT16_ATI = $881D;
  GL_LUMINANCE_FLOAT16_ATI = $881E;
  GL_LUMINANCE_ALPHA_FLOAT16_ATI = $881F;
  GL_FLOAT_R_NV = $8880;
  GL_FLOAT_RG_NV = $8881;
  GL_FLOAT_RGB_NV = $8882;
  GL_FLOAT_RGBA_NV = $8883;
  GL_FLOAT_R16_NV = $8884;
  GL_FLOAT_R32_NV = $8885;
  GL_FLOAT_RG16_NV = $8886;
  GL_FLOAT_RG32_NV = $8887;
  GL_FLOAT_RGB16_NV = $8888;
  GL_FLOAT_RGB32_NV = $8889;
  GL_FLOAT_RGBA16_NV = $888A;
  GL_FLOAT_RGBA32_NV = $888B;
  GL_TEXTURE_FLOAT_COMPONENTS_NV = $888C;
  GL_FLOAT_CLEAR_COLOR_VALUE_NV = $888D;
  GL_FLOAT_RGBA_MODE_NV = $888E;
  GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = $8868;
  GL_FRAGMENT_PROGRAM_NV = $8870;
  GL_MAX_TEXTURE_COORDS_NV = $8871;
  GL_MAX_TEXTURE_IMAGE_UNITS_NV = $8872;
  GL_FRAGMENT_PROGRAM_BINDING_NV = $8873;
  GL_PROGRAM_ERROR_STRING_NV = $8874;
  GL_HALF_FLOAT_NV = $140B;
  GL_WRITE_PIXEL_DATA_RANGE_NV = $8878;
  GL_READ_PIXEL_DATA_RANGE_NV = $8879;
  GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = $887A;
  GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = $887B;
  GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = $887C;
  GL_READ_PIXEL_DATA_RANGE_POINTER_NV = $887D;
  GL_PRIMITIVE_RESTART_NV = $8558;
  GL_PRIMITIVE_RESTART_INDEX_NV = $8559;
  GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = $888F;
  GL_STENCIL_BACK_FUNC_ATI = $8800;
  GL_STENCIL_BACK_FAIL_ATI = $8801;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = $8802;
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = $8803;
  GL_FIXED_OES = $140C;
  GL_PALETTE4_RGB8_OES = $8B90;
  GL_PALETTE4_RGBA8_OES = $8B91;
  GL_PALETTE4_R5_G6_B5_OES = $8B92;
  GL_PALETTE4_RGBA4_OES = $8B93;
  GL_PALETTE4_RGB5_A1_OES = $8B94;
  GL_PALETTE8_RGB8_OES = $8B95;
  GL_PALETTE8_RGBA8_OES = $8B96;
  GL_PALETTE8_R5_G6_B5_OES = $8B97;
  GL_PALETTE8_RGBA4_OES = $8B98;
  GL_PALETTE8_RGB5_A1_OES = $8B99;
  GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = $8B9A;
  GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = $8B9B;
  GL_FRAMEBUFFER_OES = $8D40;
  GL_RENDERBUFFER_OES = $8D41;
  GL_DEPTH_COMPONENT16_OES = $81A5;
  GL_RGBA4_OES = $8056;
  GL_RGB5_A1_OES = $8057;
  GL_RGB565_OES = $8D62;
  GL_STENCIL_INDEX1_OES = $8D46;
  GL_STENCIL_INDEX4_OES = $8D47;
  GL_STENCIL_INDEX8_OES = $8D48;
  GL_RENDERBUFFER_WIDTH_OES = $8D42;
  GL_RENDERBUFFER_HEIGHT_OES = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT_OES = $8D44;
  GL_RENDERBUFFER_RED_SIZE_OES = $8D50;
  GL_RENDERBUFFER_GREEN_SIZE_OES = $8D51;
  GL_RENDERBUFFER_BLUE_SIZE_OES = $8D52;
  GL_RENDERBUFFER_ALPHA_SIZE_OES = $8D53;
  GL_RENDERBUFFER_DEPTH_SIZE_OES = $8D54;
  GL_RENDERBUFFER_STENCIL_SIZE_OES = $8D55;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = $8CD3;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = $8CD4;
  GL_COLOR_ATTACHMENT0_OES = $8CE0;
  GL_DEPTH_ATTACHMENT_OES = $8D00;
  GL_STENCIL_ATTACHMENT_OES = $8D20;
  GL_GL_NONE_OES = 0;
  GL_FRAMEBUFFER_COMPLETE_OES = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = $8CD9;
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = $8CDA;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = $8CDB;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = $8CDC;
  GL_FRAMEBUFFER_UNSUPPORTED_OES = $8CDD;
  GL_FRAMEBUFFER_BINDING_OES = $8CA6;
  GL_RENDERBUFFER_BINDING_OES = $8CA7;
  GL_MAX_RENDERBUFFER_SIZE_OES = $84E8;
  GL_INVALID_FRAMEBUFFER_OPERATION_OES = $0506;
  DEPTH_COMPONENT24_OES = $81A6;
  GL_DEPTH_BOUNDS_TEST_EXT = $8890;
  GL_DEPTH_BOUNDS_EXT = $8891;
  GL_MIRROR_CLAMP_EXT = $8742;
  GL_MIRROR_CLAMP_TO_EDGE_EXT = $8743;
  GL_MIRROR_CLAMP_TO_BORDER_EXT = $8912;
  GL_BLEND_EQUATION_RGB_EXT = $8009;
  GL_BLEND_EQUATION_ALPHA_EXT = $883D;
  GL_PACK_INVERT_MESA = $8758;
  GL_YCBCR_MESA = $8757;
  GL_UNSIGNED_SHORT_8_8_MESA = $85BA;
  GL_UNSIGNED_SHORT_8_8_REV_MESA = $85BB;
  GL_PIXEL_PACK_BUFFER_EXT = $88EB;
  GL_PIXEL_UNPACK_BUFFER_EXT = $88EC;
  GL_PIXEL_PACK_BUFFER_BINDING_EXT = $88ED;
  GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = $88EF;
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = $88F4;
  GL_MAX_PROGRAM_CALL_DEPTH_NV = $88F5;
  GL_MAX_PROGRAM_IF_DEPTH_NV = $88F6;
  GL_MAX_PROGRAM_LOOP_DEPTH_NV = $88F7;
  GL_MAX_PROGRAM_LOOP_COUNT_NV = $88F8;
  GL_FRAMEBUFFER_EXT = $8D40;
  GL_RENDERBUFFER_EXT = $8D41;
  GL_STENCIL_INDEX_EXT = $8D45;
  GL_STENCIL_INDEX1_EXT = $8D46;
  GL_STENCIL_INDEX4_EXT = $8D47;
  GL_STENCIL_INDEX8_EXT = $8D48;
  GL_STENCIL_INDEX16_EXT = $8D49;
  GL_RENDERBUFFER_WIDTH_EXT = $8D42;
  GL_RENDERBUFFER_HEIGHT_EXT = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = $8D44;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = $8CD3;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = $8CD4;
  GL_COLOR_ATTACHMENT0_EXT = $8CE0;
  GL_COLOR_ATTACHMENT1_EXT = $8CE1;
  GL_COLOR_ATTACHMENT2_EXT = $8CE2;
  GL_COLOR_ATTACHMENT3_EXT = $8CE3;
  GL_COLOR_ATTACHMENT4_EXT = $8CE4;
  GL_COLOR_ATTACHMENT5_EXT = $8CE5;
  GL_COLOR_ATTACHMENT6_EXT = $8CE6;
  GL_COLOR_ATTACHMENT7_EXT = $8CE7;
  GL_COLOR_ATTACHMENT8_EXT = $8CE8;
  GL_COLOR_ATTACHMENT9_EXT = $8CE9;
  GL_COLOR_ATTACHMENT10_EXT = $8CEA;
  GL_COLOR_ATTACHMENT11_EXT = $8CEB;
  GL_COLOR_ATTACHMENT12_EXT = $8CEC;
  GL_COLOR_ATTACHMENT13_EXT = $8CED;
  GL_COLOR_ATTACHMENT14_EXT = $8CEE;
  GL_COLOR_ATTACHMENT15_EXT = $8CEF;
  GL_DEPTH_ATTACHMENT_EXT = $8D00;
  GL_STENCIL_ATTACHMENT_EXT = $8D20;
  GL_FRAMEBUFFER_COMPLETE_EXT = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = $8CD8;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = $8CD9;
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = $8CDA;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = $8CDB;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = $8CDC;
  GL_FRAMEBUFFER_UNSUPPORTED_EXT = $8CDD;
  GL_FRAMEBUFFER_STATUS_ERROR_EXT = $8CDE;
  GL_FRAMEBUFFER_BINDING_EXT = $8CA6;
  GL_RENDERBUFFER_BINDING_EXT = $8CA7;
  GL_MAX_COLOR_ATTACHMENTS_EXT = $8CDF;
  GL_MAX_RENDERBUFFER_SIZE_EXT = $84E8;
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT = $0506;
  GL_DEPTH_STENCIL_EXT = $84F9;
  GL_UNSIGNED_INT_24_8_EXT = $84FA;
  GL_DEPTH24_STENCIL8_EXT = $88F0;
  GL_TEXTURE_STENCIL_SIZE_EXT = $88F1;
  GL_STENCIL_TAG_BITS_EXT = $88F2;
  GL_STENCIL_CLEAR_TAG_VALUE_EXT = $88F3;
  GL_SRGB_EXT = $8C40;
  GL_SRGB8_EXT = $8C41;
  GL_SRGB_ALPHA_EXT = $8C42;
  GL_SRGB8_ALPHA8_EXT = $8C43;
  GL_SLUMINANCE_ALPHA_EXT = $8C44;
  GL_SLUMINANCE8_ALPHA8_EXT = $8C45;
  GL_SLUMINANCE_EXT = $8C46;
  GL_SLUMINANCE8_EXT = $8C47;
  GL_COMPRESSED_SRGB_EXT = $8C48;
  GL_COMPRESSED_SRGB_ALPHA_EXT = $8C49;
  GL_COMPRESSED_SLUMINANCE_EXT = $8C4A;
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = $8C4B;
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = $8C4C;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = $8C4D;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = $8C4E;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = $8C4F;
  GL_READ_FRAMEBUFFER_EXT = $8CA8;
  GL_DRAW_FRAMEBUFFER_EXT = $8CA9;
  GL_READ_FRAMEBUFFER_BINDING_EXT = GL_FRAMEBUFFER_BINDING_EXT;
  GL_DRAW_FRAMEBUFFER_BINDING_EXT = $8CAA;
  GL_RENDERBUFFER_SAMPLES_EXT = $8CAB;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = $8D56;
  GL_MAX_SAMPLES_EXT = $8D57;
  GL_TEXTURE_1D_STACK_MESAX = $8759;
  GL_TEXTURE_2D_STACK_MESAX = $875A;
  GL_PROXY_TEXTURE_1D_STACK_MESAX = $875B;
  GL_PROXY_TEXTURE_2D_STACK_MESAX = $875C;
  GL_TEXTURE_1D_STACK_BINDING_MESAX = $875D;
  GL_TEXTURE_2D_STACK_BINDING_MESAX = $875E;
  GL_TIME_ELAPSED_EXT = $88BF;
  GL_BUFFER_SERIALIZED_MODIFY_APPLE = $8A12;
  GL_BUFFER_FLUSHING_UNMAP_APPLE = $8A13;
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = $8DE2;
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = $8DE3;
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = $8DE4;
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = $8DED;
  GL_UNIFORM_BUFFER_BINDING_EXT = $8DEF;
  GL_UNIFORM_BUFFER_EXT = $8DEE;
  GL_FRAMEBUFFER_SRGB_EXT = $8DB9;
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = $8DBA;
  GL_GEOMETRY_SHADER_EXT = $8DD9;
  GL_GEOMETRY_VERTICES_OUT_EXT = $8DDA;
  GL_GEOMETRY_INPUT_TYPE_EXT = $8DDB;
  GL_GEOMETRY_OUTPUT_TYPE_EXT = $8DDC;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = $8C29;
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = $8DDD;
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = $8DDE;
  GL_MAX_VARYING_COMPONENTS_EXT = $8B4B;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = $8DDF;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = $8DE0;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = $8DE1;
  GL_LINES_ADJACENCY_EXT = $A;
  GL_LINE_STRIP_ADJACENCY_EXT = $B;
  GL_TRIANGLES_ADJACENCY_EXT = $C;
  GL_TRIANGLE_STRIP_ADJACENCY_EXT = $D;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = $8DA8;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = $8DA9;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = $8DA7;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = $8CD4;
  GL_PROGRAM_POINT_SIZE_EXT = $8642;
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = $88FD;
  GL_SAMPLER_1D_ARRAY_EXT = $8DC0;
  GL_SAMPLER_2D_ARRAY_EXT = $8DC1;
  GL_SAMPLER_BUFFER_EXT = $8DC2;
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT = $8DC3;
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT = $8DC4;
  GL_SAMPLER_CUBE_SHADOW_EXT = $8DC5;
  GL_UNSIGNED_INT = $1405;
  GL_UNSIGNED_INT_VEC2_EXT = $8DC6;
  GL_UNSIGNED_INT_VEC3_EXT = $8DC7;
  GL_UNSIGNED_INT_VEC4_EXT = $8DC8;
  GL_INT_SAMPLER_1D_EXT = $8DC9;
  GL_INT_SAMPLER_2D_EXT = $8DCA;
  GL_INT_SAMPLER_3D_EXT = $8DCB;
  GL_INT_SAMPLER_CUBE_EXT = $8DCC;
  GL_INT_SAMPLER_2D_TRect_EXT = $8DCD;
  GL_INT_SAMPLER_1D_ARRAY_EXT = $8DCE;
  GL_INT_SAMPLER_2D_ARRAY_EXT = $8DCF;
  GL_INT_SAMPLER_BUFFER_EXT = $8DD0;
  GL_UNSIGNED_INT_SAMPLER_1D_EXT = $8DD1;
  GL_UNSIGNED_INT_SAMPLER_2D_EXT = $8DD2;
  GL_UNSIGNED_INT_SAMPLER_3D_EXT = $8DD3;
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = $8DD4;
  GL_UNSIGNED_INT_SAMPLER_2D_TRect_EXT = $8DD5;
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = $8DD6;
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = $8DD7;
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = $8DD8;
  GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = $8904;
  GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = $8905;
  GL_R11F_G11F_B10F_EXT = $8C3A;
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = $8C3B;
  GL_RGBA_SIGNED_COMPONENTS_EXT = $8C3C;
  GL_TEXTURE_1D_ARRAY_EXT = $8C18;
  GL_TEXTURE_2D_ARRAY_EXT = $8C1A;
  GL_PROXY_TEXTURE_2D_ARRAY_EXT = $8C1B;
  GL_PROXY_TEXTURE_1D_ARRAY_EXT = $8C19;
  GL_TEXTURE_BINDING_1D_ARRAY_EXT = $8C1C;
  GL_TEXTURE_BINDING_2D_ARRAY_EXT = $8C1D;
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = $88FF;
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = $884E;
  GL_TEXTURE_BUFFER_EXT = $8C2A;
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT = $8C2B;
  GL_TEXTURE_BINDING_BUFFER_EXT = $8C2C;
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = $8C2D;
  GL_TEXTURE_BUFFER_FORMAT_EXT = $8C2E;
  GL_COMPRESSED_LUMINANCE_LATC1_EXT = $8C70;
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = $8C71;
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = $8C72;
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = $8C73;
  GL_COMPRESSED_RED_RGTC1_EXT = $8DBB;
  GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = $8DBC;
  GL_COMPRESSED_RED_GREEN_RGTC2_EXT = $8DBD;
  GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = $8DBE;
  GL_RGBA_INTEGER_MODE_EXT = $8D9E;
  GL_RGBA32UI_EXT = $8D70;
  GL_RGB32UI_EXT = $8D71;
  GL_ALPHA32UI_EXT = $8D72;
  GL_INTENSITY32UI_EXT = $8D73;
  GL_LUMINANCE32UI_EXT = $8D74;
  GL_LUMINANCE_ALPHA32UI_EXT = $8D75;
  GL_RGBA16UI_EXT = $8D76;
  GL_RGB16UI_EXT = $8D77;
  GL_ALPHA16UI_EXT = $8D78;
  GL_INTENSITY16UI_EXT = $8D79;
  GL_LUMINANCE16UI_EXT = $8D7A;
  GL_LUMINANCE_ALPHA16UI_EXT = $8D7B;
  GL_RGBA8UI_EXT = $8D7C;
  GL_RGB8UI_EXT = $8D7D;
  GL_ALPHA8UI_EXT = $8D7E;
  GL_INTENSITY8UI_EXT = $8D7F;
  GL_LUMINANCE8UI_EXT = $8D80;
  GL_LUMINANCE_ALPHA8UI_EXT = $8D81;
  GL_RGBA32I_EXT = $8D82;
  GL_RGB32I_EXT = $8D83;
  GL_ALPHA32I_EXT = $8D84;
  GL_INTENSITY32I_EXT = $8D85;
  GL_LUMINANCE32I_EXT = $8D86;
  GL_LUMINANCE_ALPHA32I_EXT = $8D87;
  GL_RGBA16I_EXT = $8D88;
  GL_RGB16I_EXT = $8D89;
  GL_ALPHA16I_EXT = $8D8A;
  GL_INTENSITY16I_EXT = $8D8B;
  GL_LUMINANCE16I_EXT = $8D8C;
  GL_LUMINANCE_ALPHA16I_EXT = $8D8D;
  GL_RGBA8I_EXT = $8D8E;
  GL_RGB8I_EXT = $8D8F;
  GL_ALPHA8I_EXT = $8D90;
  GL_INTENSITY8I_EXT = $8D91;
  GL_LUMINANCE8I_EXT = $8D92;
  GL_LUMINANCE_ALPHA8I_EXT = $8D93;
  GL_RED_INTEGER_EXT = $8D94;
  GL_GREEN_INTEGER_EXT = $8D95;
  GL_BLUE_INTEGER_EXT = $8D96;
  GL_ALPHA_INTEGER_EXT = $8D97;
  GL_RGB_INTEGER_EXT = $8D98;
  GL_RGBA_INTEGER_EXT = $8D99;
  GL_BGR_INTEGER_EXT = $8D9A;
  GL_BGRA_INTEGER_EXT = $8D9B;
  GL_LUMINANCE_INTEGER_EXT = $8D9C;
  GL_LUMINANCE_ALPHA_INTEGER_EXT = $8D9D;
  GL_RGB9_E5_EXT = $8C3D;
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT = $8C3E;
  GL_TEXTURE_SHARED_SIZE_EXT = $8C3F;
  GL_DEPTH_COMPONENT32F_NV = $8DAB;
  GL_DEPTH32F_STENCIL8_NV = $8DAC;
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = $8DAD;
  GL_DEPTH_BUFFER_FLOAT_MODE_NV = $8DAF;
  GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = $8CAB;
  GL_RENDERBUFFER_COLOR_SAMPLES_NV = $8E10;
  GL_GEOMETRY_PROGRAM_NV = $8C26;
  GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = $8C27;
  GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = $8C28;
  GL_PROGRAM_ATTRIB_COMPONENTS_NV = $8906;
  GL_PROGRAM_RESULT_COMPONENTS_NV = $8907;
  GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = $8908;
  GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = $8909;
  GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = $8DA5;
  GL_MAX_PROGRAM_GENERIC_RESULTS_NV = $8DA6;
  GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = $8DA0;
  GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = $8DA1;
  GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = $8DA2;
  GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = $8DA3;
  GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = $8DA4;
  GL_TRANSFORM_FEEDBACK_BUFFER_NV = $8C8E;
  GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = $8C84;
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = $8C85;
  GL_TRANSFORM_FEEDBACK_RECORD_NV = $8C86;
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = $8C8F;
  GL_INTERLEAVED_ATTRIBS_NV = $8C8C;
  GL_SEPARATE_ATTRIBS_NV = $8C8D;
  GL_PRIMITIVES_GENERATED_NV = $8C87;
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = $8C88;
  GL_RASTERIZER_DISCARD_NV = $8C89;
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = $8C8A;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = $8C8B;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = $8C80;
  GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = $8C7E;
  GL_ACTIVE_VARYINGS_NV = $8C81;
  GL_ACTIVE_VARYING_MAX_LENGTH_NV = $8C82;
  GL_TRANSFORM_FEEDBACK_VARYINGS_NV = $8C83;
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = $8C7F;
  GL_BACK_PRIMARY_COLOR_NV = $8C77;
  GL_BACK_SECONDARY_COLOR_NV = $8C78;
  GL_TEXTURE_COORD_NV = $8C79;
  GL_CLIP_DISTANCE_NV = $8C7A;
  GL_VERTEX_ID_NV = $8C7B;
  GL_PRIMITIVE_ID_NV = $8C7C;
  GL_GENERIC_ATTRIB_NV = $8C7D;
  GL_QUERY_WAIT_NV = $8E13;
  GL_QUERY_NO_WAIT_NV = $8E14;
  GL_QUERY_BY_REGION_WAIT_NV = $8E15;
  GL_QUERY_BY_REGION_NO_WAIT_NV = $8E16;
  GL_FRAME_NV = $8E26;
  GL_FIELDS_NV = $8E27;
  GL_CURRENT_TIME_NV = $8E28;
  GL_NUM_FILL_STREAMS_NV = $8E29;
  GL_PRESENT_TIME_NV = $8E2A;
  GL_PRESENT_DURATION_NV = $8E2B;
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT = $8C8E;
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = $8C84;
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = $8C85;
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = $8C8F;
  GL_INTERLEAVED_ATTRIBS_EXT = $8C8C;
  GL_SEPARATE_ATTRIBS_EXT = $8C8D;
  GL_PRIMITIVES_GENERATED_EXT = $8C87;
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = $8C88;
  GL_RASTERIZER_DISCARD_EXT = $8C89;
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = $8C8A;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = $8C8B;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = $8C80;
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = $8C83;
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = $8C7F;
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = $8C76;
  GL_PROGRAM_MATRIX_EXT = $8E2D;
  GL_TRANSPOSE_PROGRAM_MATRIX_EXT = $8E2E;
  GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = $8E2F;
  GL_TEXTURE_SWIZZLE_R_EXT = $8E42;
  GL_TEXTURE_SWIZZLE_G_EXT = $8E43;
  GL_TEXTURE_SWIZZLE_B_EXT = $8E44;
  GL_TEXTURE_SWIZZLE_A_EXT = $8E45;
  GL_TEXTURE_SWIZZLE_RGBA_EXT = $8E46;
  GL_SAMPLE_POSITION_NV = $8E50;
  GL_SAMPLE_MASK_NV = $8E51;
  GL_SAMPLE_MASK_VALUE_NV = $8E52;
  GL_TEXTURE_BINDING_RENDERBUFFER_NV = $8E53;
  GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = $8E54;
  GL_MAX_SAMPLE_MASK_WORDS_NV = $8E59;
  GL_TEXTURE_RENDERBUFFER_NV = $8E55;
  GL_SAMPLER_RENDERBUFFER_NV = $8E56;
  GL_INT_SAMPLER_RENDERBUFFER_NV = $8E57;
  GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = $8E58;
  GL_TRANSFORM_FEEDBACK_NV = $8E22;
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = $8E23;
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = $8E24;
  GL_TRANSFORM_FEEDBACK_BINDING_NV = $8E25;
  GL_VBO_FREE_MEMORY_ATI = $87FB;
  GL_TEXTURE_FREE_MEMORY_ATI = $87FC;
  GL_RENDERBUFFER_FREE_MEMORY_ATI = $87FD;
  GL_COUNTER_TYPE_AMD = $8BC0;
  GL_COUNTER_RANGE_AMD = $8BC1;
  GL_UNSIGNED_INT64_AMD = $8BC2;
  GL_PERCENTAGE_AMD = $8BC3;
  GL_PERFMON_RESULT_AVAILABLE_AMD = $8BC4;
  GL_PERFMON_RESULT_SIZE_AMD = $8BC5;
  GL_PERFMON_RESULT_AMD = $8BC6;
  GL_SAMPLER_BUFFER_AMD = $9001;
  GL_INT_SAMPLER_BUFFER_AMD = $9002;
  GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = $9003;
  GL_TESSELLATION_MODE_AMD = $9004;
  GL_TESSELLATION_FACTOR_AMD = $9005;
  GL_DISCRETE_AMD = $9006;
  GL_CONTINUOUS_AMD = $9007;
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = $8E4C;
  GL_FIRST_VERTEX_CONVENTION_EXT = $8E4D;
  GL_LAST_VERTEX_CONVENTION_EXT = $8E4E;
  GL_PROVOKING_VERTEX_EXT = $8E4F;
  GL_ALPHA_SNORM = $9010;
  GL_LUMINANCE_SNORM = $9011;
  GL_LUMINANCE_ALPHA_SNORM = $9012;
  GL_INTENSITY_SNORM = $9013;
  GL_ALPHA8_SNORM = $9014;
  GL_LUMINANCE8_SNORM = $9015;
  GL_LUMINANCE8_ALPHA8_SNORM = $9016;
  GL_INTENSITY8_SNORM = $9017;
  GL_ALPHA16_SNORM = $9018;
  GL_LUMINANCE16_SNORM = $9019;
  GL_LUMINANCE16_ALPHA16_SNORM = $901A;
  GL_INTENSITY16_SNORM = $901B;
  GL_TEXTURE_RANGE_LENGTH_APPLE = $85B7;
  GL_TEXTURE_RANGE_POINTER_APPLE = $85B8;
  GL_TEXTURE_STORAGE_HINT_APPLE = $85BC;
  GL_STORAGE_PRIVATE_APPLE = $85BD;
  GL_HALF_APPLE = $140B;
  GL_RGBA_FLOAT32_APPLE = $8814;
  GL_RGB_FLOAT32_APPLE = $8815;
  GL_ALPHA_FLOAT32_APPLE = $8816;
  GL_INTENSITY_FLOAT32_APPLE = $8817;
  GL_LUMINANCE_FLOAT32_APPLE = $8818;
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE = $8819;
  GL_RGBA_FLOAT16_APPLE = $881A;
  GL_RGB_FLOAT16_APPLE = $881B;
  GL_ALPHA_FLOAT16_APPLE = $881C;
  GL_INTENSITY_FLOAT16_APPLE = $881D;
  GL_LUMINANCE_FLOAT16_APPLE = $881E;
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE = $881F;
  GL_COLOR_FLOAT_APPLE = $8A0F;
  GL_VERTEX_ATTRIB_MAP1_APPLE = $8A00;
  GL_VERTEX_ATTRIB_MAP2_APPLE = $8A01;
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = $8A02;
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = $8A03;
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = $8A04;
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = $8A05;
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = $8A06;
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = $8A07;
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = $8A08;
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = $8A09;
  GL_AUX_DEPTH_STENCIL_APPLE = $8A14;
  GL_BUFFER_OBJECT_APPLE = $85B3;
  GL_RELEASED_APPLE = $8A19;
  GL_VOLATILE_APPLE = $8A1A;
  GL_RETAINED_APPLE = $8A1B;
  GL_UNDEFINED_APPLE = $8A1C;
  GL_PURGEABLE_APPLE = $8A1D;
  GL_PACK_ROW_BYTES_APPLE = $8A15;
  GL_UNPACK_ROW_BYTES_APPLE = $8A16;
  GL_RGB_422_APPLE = $8A1F;
  GL_VIDEO_BUFFER_NV = $9020;
  GL_VIDEO_BUFFER_BINDING_NV = $9021;
  GL_FIELD_UPPER_NV = $9022;
  GL_FIELD_LOWER_NV = $9023;
  GL_NUM_VIDEO_CAPTURE_STREAMS_NV = $9024;
  GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = $9025;
  GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = $9026;
  GL_LAST_VIDEO_CAPTURE_STATUS_NV = $9027;
  GL_VIDEO_BUFFER_PITCH_NV = $9028;
  GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = $9029;
  GL_VIDEO_COLOR_CONVERSION_MAX_NV = $902A;
  GL_VIDEO_COLOR_CONVERSION_MIN_NV = $902B;
  GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = $902C;
  GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = $902D;
  GL_PARTIAL_SUCCESS_NV = $902E;
  GL_SUCCESS_NV = $902F;
  GL_FAILURE_NV = $9030;
  GL_YCBYCR8_422_NV = $9031;
  GL_YCBAYCR8A_4224_NV = $9032;
  GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = $9033;
  GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = $9034;
  GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = $9035;
  GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = $9036;
  GL_Z4Y12Z4CB12Z4CR12_444_NV = $9037;
  GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = $9038;
  GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = $9039;
  GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = $903A;
  GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = $903B;
  GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = $903C;
  GL_ACTIVE_PROGRAM_EXT = $8B8D;
  GL_BUFFER_GPU_ADDRESS_NV = $8F1D;
  GL_GPU_ADDRESS_NV = $8F34;
  GL_MAX_SHADER_BUFFER_ADDRESS_NV = $8F35;
  GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = $8F1E;
  GL_ELEMENT_ARRAY_UNIFIED_NV = $8F1F;
  GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = $8F20;
  GL_VERTEX_ARRAY_ADDRESS_NV = $8F21;
  GL_NORMAL_ARRAY_ADDRESS_NV = $8F22;
  GL_COLOR_ARRAY_ADDRESS_NV = $8F23;
  GL_INDEX_ARRAY_ADDRESS_NV = $8F24;
  GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = $8F25;
  GL_EDGE_FLAG_ARRAY_ADDRESS_NV = $8F26;
  GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = $8F27;
  GL_FOG_COORD_ARRAY_ADDRESS_NV = $8F28;
  GL_ELEMENT_ARRAY_ADDRESS_NV = $8F29;
  GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = $8F2A;
  GL_VERTEX_ARRAY_LENGTH_NV = $8F2B;
  GL_NORMAL_ARRAY_LENGTH_NV = $8F2C;
  GL_COLOR_ARRAY_LENGTH_NV = $8F2D;
  GL_INDEX_ARRAY_LENGTH_NV = $8F2E;
  GL_TEXTURE_COORD_ARRAY_LENGTH_NV = $8F2F;
  GL_EDGE_FLAG_ARRAY_LENGTH_NV = $8F30;
  GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = $8F31;
  GL_FOG_COORD_ARRAY_LENGTH_NV = $8F32;
  GL_ELEMENT_ARRAY_LENGTH_NV = $8F33;
  WGL_FRONT_COLOR_BUFFER_BIT_ARB = $00000001;
  WGL_BACK_COLOR_BUFFER_BIT_ARB = $00000002;
  WGL_DEPTH_BUFFER_BIT_ARB = $00000004;
  WGL_STENCIL_BUFFER_BIT_ARB = $00000008;
  WGL_SAMPLE_BUFFERS_ARB = $2041;
  WGL_SAMPLES_ARB = $2042;
  WGL_NUMBER_PIXEL_FORMATS_ARB = $2000;
  WGL_DRAW_TO_WINDOW_ARB = $2001;
  WGL_DRAW_TO_BITMAP_ARB = $2002;
  WGL_ACCELERATION_ARB = $2003;
  WGL_NEED_PALETTE_ARB = $2004;
  WGL_NEED_SYSTEM_PALETTE_ARB = $2005;
  WGL_SWAP_LAYER_BUFFERS_ARB = $2006;
  WGL_SWAP_METHOD_ARB = $2007;
  WGL_NUMBER_OVERLAYS_ARB = $2008;
  WGL_NUMBER_UNDERLAYS_ARB = $2009;
  WGL_TRANSPARENT_ARB = $200A;
  WGL_TRANSPARENT_RED_VALUE_ARB = $2037;
  WGL_TRANSPARENT_GREEN_VALUE_ARB = $2038;
  WGL_TRANSPARENT_BLUE_VALUE_ARB = $2039;
  WGL_TRANSPARENT_ALPHA_VALUE_ARB = $203A;
  WGL_TRANSPARENT_INDEX_VALUE_ARB = $203B;
  WGL_SHARE_DEPTH_ARB = $200C;
  WGL_SHARE_STENCIL_ARB = $200D;
  WGL_SHARE_ACCUM_ARB = $200E;
  WGL_SUPPORT_GDI_ARB = $200F;
  WGL_SUPPORT_OPENGL_ARB = $2010;
  WGL_DOUBLE_BUFFER_ARB = $2011;
  WGL_STEREO_ARB = $2012;
  WGL_PIXEL_TYPE_ARB = $2013;
  WGL_COLOR_BITS_ARB = $2014;
  WGL_RED_BITS_ARB = $2015;
  WGL_RED_SHIFT_ARB = $2016;
  WGL_GREEN_BITS_ARB = $2017;
  WGL_GREEN_SHIFT_ARB = $2018;
  WGL_BLUE_BITS_ARB = $2019;
  WGL_BLUE_SHIFT_ARB = $201A;
  WGL_ALPHA_BITS_ARB = $201B;
  WGL_ALPHA_SHIFT_ARB = $201C;
  WGL_ACCUM_BITS_ARB = $201D;
  WGL_ACCUM_RED_BITS_ARB = $201E;
  WGL_ACCUM_GREEN_BITS_ARB = $201F;
  WGL_ACCUM_BLUE_BITS_ARB = $2020;
  WGL_ACCUM_ALPHA_BITS_ARB = $2021;
  WGL_DEPTH_BITS_ARB = $2022;
  WGL_STENCIL_BITS_ARB = $2023;
  WGL_AUX_BUFFERS_ARB = $2024;
  WGL_NO_ACCELERATION_ARB = $2025;
  WGL_GENERIC_ACCELERATION_ARB = $2026;
  WGL_FULL_ACCELERATION_ARB = $2027;
  WGL_SWAP_EXCHANGE_ARB = $2028;
  WGL_SWAP_COPY_ARB = $2029;
  WGL_SWAP_UNDEFINED_ARB = $202A;
  WGL_TYPE_RGBA_ARB = $202B;
  WGL_TYPE_COLORINDEX_ARB = $202C;
  ERROR_INVALID_PIXEL_TYPE_ARB = $2043;
  ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB = $2054;
  WGL_DRAW_TO_PBUFFER_ARB = $202D;
  WGL_MAX_PBUFFER_PIXELS_ARB = $202E;
  WGL_MAX_PBUFFER_WIDTH_ARB = $202F;
  WGL_MAX_PBUFFER_HEIGHT_ARB = $2030;
  WGL_PBUFFER_LARGEST_ARB = $2033;
  WGL_PBUFFER_WIDTH_ARB = $2034;
  WGL_PBUFFER_HEIGHT_ARB = $2035;
  WGL_PBUFFER_LOST_ARB = $2036;
  WGL_BIND_TO_TEXTURE_RGB_ARB = $2070;
  WGL_BIND_TO_TEXTURE_RGBA_ARB = $2071;
  WGL_TEXTURE_FORMAT_ARB = $2072;
  WGL_TEXTURE_TARGET_ARB = $2073;
  WGL_MIPMAP_TEXTURE_ARB = $2074;
  WGL_TEXTURE_RGB_ARB = $2075;
  WGL_TEXTURE_RGBA_ARB = $2076;
  WGL_NO_TEXTURE_ARB = $2077;
  WGL_TEXTURE_CUBE_MAP_ARB = $2078;
  WGL_TEXTURE_1D_ARB = $2079;
  WGL_TEXTURE_2D_ARB = $207A;
  WGL_MIPMAP_LEVEL_ARB = $207B;
  WGL_CUBE_MAP_FACE_ARB = $207C;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = $207D;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = $207E;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = $207F;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = $2080;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = $2081;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = $2082;
  WGL_FRONT_LEFT_ARB = $2083;
  WGL_FRONT_RIGHT_ARB = $2084;
  WGL_BACK_LEFT_ARB = $2085;
  WGL_BACK_RIGHT_ARB = $2086;
  WGL_AUX0_ARB = $2087;
  WGL_AUX1_ARB = $2088;
  WGL_AUX2_ARB = $2089;
  WGL_AUX3_ARB = $208A;
  WGL_AUX4_ARB = $208B;
  WGL_AUX5_ARB = $208C;
  WGL_AUX6_ARB = $208D;
  WGL_AUX7_ARB = $208E;
  WGL_AUX8_ARB = $208F;
  WGL_AUX9_ARB = $2090;
  WGL_TYPE_RGBA_FLOAT_ARB = $21A0;
  WGL_CONTEXT_DEBUG_BIT_ARB = $0001;
  WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = $0002;
  WGL_CONTEXT_MAJOR_VERSION_ARB = $2091;
  WGL_CONTEXT_MINOR_VERSION_ARB = $2092;
  WGL_CONTEXT_LAYER_PLANE_ARB = $2093;
  WGL_CONTEXT_FLAGS_ARB = $2094;
  ERROR_INVALID_VERSION_ARB = $2095;
  WGL_CONTEXT_PROFILE_MASK_ARB = $9126;
  WGL_CONTEXT_CORE_PROFILE_BIT_ARB = $00000001;
  WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = $00000002;
  ERROR_INVALID_PROFILE_ARB = $2096;
  ERROR_INVALID_PIXEL_TYPE_EXT = $2043;
  WGL_NUMBER_PIXEL_FORMATS_EXT = $2000;
  WGL_DRAW_TO_WINDOW_EXT = $2001;
  WGL_DRAW_TO_BITMAP_EXT = $2002;
  WGL_ACCELERATION_EXT = $2003;
  WGL_NEED_PALETTE_EXT = $2004;
  WGL_NEED_SYSTEM_PALETTE_EXT = $2005;
  WGL_SWAP_LAYER_BUFFERS_EXT = $2006;
  WGL_SWAP_METHOD_EXT = $2007;
  WGL_NUMBER_OVERLAYS_EXT = $2008;
  WGL_NUMBER_UNDERLAYS_EXT = $2009;
  WGL_TRANSPARENT_EXT = $200A;
  WGL_TRANSPARENT_VALUE_EXT = $200B;
  WGL_SHARE_DEPTH_EXT = $200C;
  WGL_SHARE_STENCIL_EXT = $200D;
  WGL_SHARE_ACCUM_EXT = $200E;
  WGL_SUPPORT_GDI_EXT = $200F;
  WGL_SUPPORT_OPENGL_EXT = $2010;
  WGL_DOUBLE_BUFFER_EXT = $2011;
  WGL_STEREO_EXT = $2012;
  WGL_PIXEL_TYPE_EXT = $2013;
  WGL_COLOR_BITS_EXT = $2014;
  WGL_RED_BITS_EXT = $2015;
  WGL_RED_SHIFT_EXT = $2016;
  WGL_GREEN_BITS_EXT = $2017;
  WGL_GREEN_SHIFT_EXT = $2018;
  WGL_BLUE_BITS_EXT = $2019;
  WGL_BLUE_SHIFT_EXT = $201A;
  WGL_ALPHA_BITS_EXT = $201B;
  WGL_ALPHA_SHIFT_EXT = $201C;
  WGL_ACCUM_BITS_EXT = $201D;
  WGL_ACCUM_RED_BITS_EXT = $201E;
  WGL_ACCUM_GREEN_BITS_EXT = $201F;
  WGL_ACCUM_BLUE_BITS_EXT = $2020;
  WGL_ACCUM_ALPHA_BITS_EXT = $2021;
  WGL_DEPTH_BITS_EXT = $2022;
  WGL_STENCIL_BITS_EXT = $2023;
  WGL_AUX_BUFFERS_EXT = $2024;
  WGL_NO_ACCELERATION_EXT = $2025;
  WGL_GENERIC_ACCELERATION_EXT = $2026;
  WGL_FULL_ACCELERATION_EXT = $2027;
  WGL_SWAP_EXCHANGE_EXT = $2028;
  WGL_SWAP_COPY_EXT = $2029;
  WGL_SWAP_UNDEFINED_EXT = $202A;
  WGL_TYPE_RGBA_EXT = $202B;
  WGL_TYPE_COLORINDEX_EXT = $202C;
  WGL_DRAW_TO_PBUFFER_EXT = $202D;
  WGL_MAX_PBUFFER_PIXELS_EXT = $202E;
  WGL_MAX_PBUFFER_WIDTH_EXT = $202F;
  WGL_MAX_PBUFFER_HEIGHT_EXT = $2030;
  WGL_OPTIMAL_PBUFFER_WIDTH_EXT = $2031;
  WGL_OPTIMAL_PBUFFER_HEIGHT_EXT = $2032;
  WGL_PBUFFER_LARGEST_EXT = $2033;
  WGL_PBUFFER_WIDTH_EXT = $2034;
  WGL_PBUFFER_HEIGHT_EXT = $2035;
  WGL_DEPTH_FLOAT_EXT = $2040;
  WGL_SAMPLE_BUFFERS_3DFX = $2060;
  WGL_SAMPLES_3DFX = $2061;
  WGL_SAMPLE_BUFFERS_EXT = $2041;
  WGL_SAMPLES_EXT = $2042;
  WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = $2050;
  WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = $2051;
  WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = $2052;
  WGL_DIGITAL_VIDEO_GAMMA_CORTRectED_I3D = $2053;
  WGL_GAMMA_TABLE_SIZE_I3D = $204E;
  WGL_GAMMA_EXCLUDE_DESKTOP_I3D = $204F;
  WGL_GENLOCK_SOURCE_MULTIVIEW_I3D = $2044;
  WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D = $2045;
  WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D = $2046;
  WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D = $2047;
  WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D = $2048;
  WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D = $2049;
  WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D = $204A;
  WGL_GENLOCK_SOURCE_EDGE_RISING_I3D = $204B;
  WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D = $204C;
  WGL_IMAGE_BUFFER_MIN_ACCESS_I3D = $00000001;
  WGL_IMAGE_BUFFER_LOCK_I3D = $00000002;
  WGL_BIND_TO_TEXTURE_DEPTH_NV = $20A3;
  WGL_BIND_TO_TEXTURE_TRectANGLE_DEPTH_NV = $20A4;
  WGL_DEPTH_TEXTURE_FORMAT_NV = $20A5;
  WGL_TEXTURE_DEPTH_COMPONENT_NV = $20A6;
  WGL_DEPTH_COMPONENT_NV = $20A7;
  WGL_BIND_TO_TEXTURE_TRectANGLE_RGB_NV = $20A0;
  WGL_BIND_TO_TEXTURE_TRectANGLE_RGBA_NV = $20A1;
  WGL_TEXTURE_TRectANGLE_NV = $20A2;
  WGL_FLOAT_COMPONENTS_NV = $20B0;
  WGL_BIND_TO_TEXTURE_TRectANGLE_FLOAT_R_NV = $20B1;
  WGL_BIND_TO_TEXTURE_TRectANGLE_FLOAT_RG_NV = $20B2;
  WGL_BIND_TO_TEXTURE_TRectANGLE_FLOAT_RGB_NV = $20B3;
  WGL_BIND_TO_TEXTURE_TRectANGLE_FLOAT_RGBA_NV = $20B4;
  WGL_TEXTURE_FLOAT_R_NV = $20B5;
  WGL_TEXTURE_FLOAT_RG_NV = $20B6;
  WGL_TEXTURE_FLOAT_RGB_NV = $20B7;
  WGL_TEXTURE_FLOAT_RGBA_NV = $20B8;
  WGL_STEREO_EMITTER_ENABLE_3DL = $2055;
  WGL_STEREO_EMITTER_DISABLE_3DL = $2056;
  WGL_STEREO_POLARITY_NORMAL_3DL = $2057;
  WGL_STEREO_POLARITY_INVERT_3DL = $2058;
  WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT = $20A9;
  WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT = $20A8;
  WGL_NUM_VIDEO_SLOTS_NV = $20F0;
  WGL_BIND_TO_VIDEO_RGB_NV = $20C0;
  WGL_BIND_TO_VIDEO_RGBA_NV = $20C1;
  WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV = $20C2;
  WGL_VIDEO_OUT_COLOR_NV = $20C3;
  WGL_VIDEO_OUT_ALPHA_NV = $20C4;
  WGL_VIDEO_OUT_DEPTH_NV = $20C5;
  WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV = $20C6;
  WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV = $20C7;
  WGL_VIDEO_OUT_FRAME = $20C8;
  WGL_VIDEO_OUT_FIELD_1 = $20C9;
  WGL_VIDEO_OUT_FIELD_2 = $20CA;
  WGL_VIDEO_OUT_STACKED_FIELDS_1_2 = $20CB;
  WGL_VIDEO_OUT_STACKED_FIELDS_2_1 = $20CC;
  WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV = $20D0;
  WGL_ERROR_MISSING_AFFINITY_MASK_NV = $20D1;
  WGL_GPU_VENDOR_AMD = $1F00;
  WGL_GPU_RENDERER_STRING_AMD = $1F01;
  WGL_GPU_OPENGL_VERSION_STRING_AMD = $1F02;
  WGL_GPU_FASTEST_TARGET_GPUS_AMD = $21A2;
  WGL_GPU_RAM_AMD = $21A3;
  WGL_GPU_CLOCK_AMD = $21A4;
  WGL_GPU_NUM_PIPES_AMD = $21A5;
  WGL_GPU_NUM_SIMD_AMD = $21A6;
  WGL_GPU_NUM_RB_AMD = $21A7;
  WGL_GPU_NUM_SPI_AMD = $21A8;
  WGL_UNIQUE_ID_NV = $20CE;
  WGL_NUM_VIDEO_CAPTURE_SLOTS_NV = $20CF;
  ALLEGRO_MAX_CHANNELS = 8;
  ALLEGRO_AUDIO_PAN_NONE = (-1000.0);
  ALLEGRO_VERTEX_CACHE_SIZE = 256;
  ALLEGRO_PRIM_QUALITY = 10;
  ALLEGRO_TTF_NO_KERNING = 1;
  ALLEGRO_TTF_MONOCHROME = 2;
  ALLEGRO_TTF_NO_AUTOHINT = 4;
  PHYSFS_VER_MAJOR = 3;
  PHYSFS_VER_MINOR = 0;
  PHYSFS_VER_PATCH = 2;
  Z_BZIP2ED = 12;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (-1);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  ALLEGRO_PIXEL_FORMAT_ANY = 0;
  ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1;
  ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2;
  ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3;
  ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4;
  ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5;
  ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6;
  ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7;
  ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8;
  ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9;
  ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10;
  ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11;
  ALLEGRO_PIXEL_FORMAT_RGB_888 = 12;
  ALLEGRO_PIXEL_FORMAT_RGB_565 = 13;
  ALLEGRO_PIXEL_FORMAT_RGB_555 = 14;
  ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15;
  ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17;
  ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18;
  ALLEGRO_PIXEL_FORMAT_BGR_888 = 19;
  ALLEGRO_PIXEL_FORMAT_BGR_565 = 20;
  ALLEGRO_PIXEL_FORMAT_BGR_555 = 21;
  ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22;
  ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23;
  ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25;
  ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26;
  ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30;
  ALLEGRO_NUM_PIXEL_FORMATS = 31;
  ALLEGRO_MEMORY_BITMAP = 1;
  _ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_FORCE_LOCKING = 4;
  ALLEGRO_NO_PRESERVE_TEXTURE = 8;
  _ALLEGRO_ALPHA_TEST = 16;
  _ALLEGRO_INTERNAL_OPENGL = 32;
  ALLEGRO_MIN_LINEAR = 64;
  ALLEGRO_MAG_LINEAR = 128;
  ALLEGRO_MIPMAP = 256;
  _ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_VIDEO_BITMAP = 1024;
  ALLEGRO_CONVERT_BITMAP = 4096;
  ALLEGRO_FLIP_HORIZONTAL = 1;
  ALLEGRO_FLIP_VERTICAL = 2;
  ALLEGRO_SEEK_SET = 0;
  ALLEGRO_SEEK_CUR = 1;
  ALLEGRO_SEEK_END = 2;
  ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_KEEP_INDEX = 2048;
  ALLEGRO_LOCK_READWRITE = 0;
  ALLEGRO_LOCK_READONLY = 1;
  ALLEGRO_LOCK_WRITEONLY = 2;
  ALLEGRO_ZERO = 0;
  ALLEGRO_ONE = 1;
  ALLEGRO_ALPHA = 2;
  ALLEGRO_INVERSE_ALPHA = 3;
  ALLEGRO_SRC_COLOR = 4;
  ALLEGRO_DEST_COLOR = 5;
  ALLEGRO_INVERSE_SRC_COLOR = 6;
  ALLEGRO_INVERSE_DEST_COLOR = 7;
  ALLEGRO_CONST_COLOR = 8;
  ALLEGRO_INVERSE_CONST_COLOR = 9;
  ALLEGRO_NUM_BLEND_MODES = 10;
  ALLEGRO_ADD = 0;
  ALLEGRO_SRC_MINUS_DEST = 1;
  ALLEGRO_DEST_MINUS_SRC = 2;
  ALLEGRO_NUM_BLEND_OPERATIONS = 3;
  ALLEGRO_EVENT_JOYSTICK_AXIS = 1;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3;
  ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4;
  ALLEGRO_EVENT_KEY_DOWN = 10;
  ALLEGRO_EVENT_KEY_CHAR = 11;
  ALLEGRO_EVENT_KEY_UP = 12;
  ALLEGRO_EVENT_MOUSE_AXES = 20;
  ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21;
  ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22;
  ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23;
  ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24;
  ALLEGRO_EVENT_MOUSE_WARPED = 25;
  ALLEGRO_EVENT_TIMER = 30;
  ALLEGRO_EVENT_DISPLAY_EXPOSE = 40;
  ALLEGRO_EVENT_DISPLAY_RESIZE = 41;
  ALLEGRO_EVENT_DISPLAY_CLOSE = 42;
  ALLEGRO_EVENT_DISPLAY_LOST = 43;
  ALLEGRO_EVENT_DISPLAY_FOUND = 44;
  ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45;
  ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46;
  ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47;
  ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48;
  ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49;
  ALLEGRO_EVENT_TOUCH_BEGIN = 50;
  ALLEGRO_EVENT_TOUCH_END = 51;
  ALLEGRO_EVENT_TOUCH_MOVE = 52;
  ALLEGRO_EVENT_TOUCH_CANCEL = 53;
  ALLEGRO_EVENT_DISPLAY_CONNECTED = 60;
  ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61;
  ALLEGRO_WINDOWED = 1;
  ALLEGRO_FULLSCREEN = 2;
  ALLEGRO_OPENGL = 4;
  ALLEGRO_DITRect3D_INTERNAL = 8;
  ALLEGRO_RESIZABLE = 16;
  ALLEGRO_FRAMELESS = 32;
  ALLEGRO_NOFRAME = 32;
  ALLEGRO_GENERATE_EXPOSE_EVENTS = 64;
  ALLEGRO_OPENGL_3_0 = 128;
  ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 256;
  ALLEGRO_FULLSCREEN_WINDOW = 512;
  ALLEGRO_MINIMIZED = 1024;
  ALLEGRO_PROGRAMMABLE_PIPELINE = 2048;
  ALLEGRO_GTK_TOPLEVEL_INTERNAL = 4096;
  ALLEGRO_MAXIMIZED = 8192;
  ALLEGRO_OPENGL_ES_PROFILE = 16384;
  ALLEGRO_OPENGL_CORE_PROFILE = 32768;
  ALLEGRO_RED_SIZE = 0;
  ALLEGRO_GREEN_SIZE = 1;
  ALLEGRO_BLUE_SIZE = 2;
  ALLEGRO_ALPHA_SIZE = 3;
  ALLEGRO_RED_SHIFT = 4;
  ALLEGRO_GREEN_SHIFT = 5;
  ALLEGRO_BLUE_SHIFT = 6;
  ALLEGRO_ALPHA_SHIFT = 7;
  ALLEGRO_ACC_RED_SIZE = 8;
  ALLEGRO_ACC_GREEN_SIZE = 9;
  ALLEGRO_ACC_BLUE_SIZE = 10;
  ALLEGRO_ACC_ALPHA_SIZE = 11;
  ALLEGRO_STEREO = 12;
  ALLEGRO_AUX_BUFFERS = 13;
  ALLEGRO_COLOR_SIZE = 14;
  ALLEGRO_DEPTH_SIZE = 15;
  ALLEGRO_STENCIL_SIZE = 16;
  ALLEGRO_SAMPLE_BUFFERS = 17;
  ALLEGRO_SAMPLES = 18;
  ALLEGRO_RENDER_METHOD = 19;
  ALLEGRO_FLOAT_COLOR = 20;
  ALLEGRO_FLOAT_DEPTH = 21;
  ALLEGRO_SINGLE_BUFFER = 22;
  ALLEGRO_SWAP_METHOD = 23;
  ALLEGRO_COMPATIBLE_DISPLAY = 24;
  ALLEGRO_UPDATE_DISPLAY_REGION = 25;
  ALLEGRO_VSYNC = 26;
  ALLEGRO_MAX_BITMAP_SIZE = 27;
  ALLEGRO_SUPPORT_NPOT_BITMAP = 28;
  ALLEGRO_CAN_DRAW_INTO_BITMAP = 29;
  ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30;
  ALLEGRO_AUTO_CONVERT_BITMAPS = 31;
  ALLEGRO_SUPPORTED_ORIENTATIONS = 32;
  ALLEGRO_OPENGL_MAJOR_VERSION = 33;
  ALLEGRO_OPENGL_MINOR_VERSION = 34;
  ALLEGRO_DISPLAY_OPTIONS_COUNT = 35;
  ALLEGRO_DONTCARE = 0;
  ALLEGRO_REQUIRE = 1;
  ALLEGRO_SUGGEST = 2;
  ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0;
  ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1;
  ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2;
  ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4;
  ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8;
  ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5;
  ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10;
  ALLEGRO_DISPLAY_ORIENTATION_ALL = 15;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32;
  _ALLEGRO_PRIM_MAX_USER_ATTR = 10;
  ALLEGRO_FILEMODE_READ = 1;
  ALLEGRO_FILEMODE_WRITE = 2;
  ALLEGRO_FILEMODE_EXECUTE = 4;
  ALLEGRO_FILEMODE_HIDDEN = 8;
  ALLEGRO_FILEMODE_ISFILE = 16;
  ALLEGRO_FILEMODE_ISDIR = 32;
  ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1;
  ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0;
  ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1;
  ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2;
  ALLEGRO_JOYFLAG_DIGITAL = 1;
  ALLEGRO_JOYFLAG_ANALOGUE = 2;
  ALLEGRO_KEY_A = 1;
  ALLEGRO_KEY_B = 2;
  ALLEGRO_KEY_C = 3;
  ALLEGRO_KEY_D = 4;
  ALLEGRO_KEY_E = 5;
  ALLEGRO_KEY_F = 6;
  ALLEGRO_KEY_G = 7;
  ALLEGRO_KEY_H = 8;
  ALLEGRO_KEY_I = 9;
  ALLEGRO_KEY_J = 10;
  ALLEGRO_KEY_K = 11;
  ALLEGRO_KEY_L = 12;
  ALLEGRO_KEY_M = 13;
  ALLEGRO_KEY_N = 14;
  ALLEGRO_KEY_O = 15;
  ALLEGRO_KEY_P = 16;
  ALLEGRO_KEY_Q = 17;
  ALLEGRO_KEY_R = 18;
  ALLEGRO_KEY_S = 19;
  ALLEGRO_KEY_T = 20;
  ALLEGRO_KEY_U = 21;
  ALLEGRO_KEY_V = 22;
  ALLEGRO_KEY_W = 23;
  ALLEGRO_KEY_X = 24;
  ALLEGRO_KEY_Y = 25;
  ALLEGRO_KEY_Z = 26;
  ALLEGRO_KEY_0 = 27;
  ALLEGRO_KEY_1 = 28;
  ALLEGRO_KEY_2 = 29;
  ALLEGRO_KEY_3 = 30;
  ALLEGRO_KEY_4 = 31;
  ALLEGRO_KEY_5 = 32;
  ALLEGRO_KEY_6 = 33;
  ALLEGRO_KEY_7 = 34;
  ALLEGRO_KEY_8 = 35;
  ALLEGRO_KEY_9 = 36;
  ALLEGRO_KEY_PAD_0 = 37;
  ALLEGRO_KEY_PAD_1 = 38;
  ALLEGRO_KEY_PAD_2 = 39;
  ALLEGRO_KEY_PAD_3 = 40;
  ALLEGRO_KEY_PAD_4 = 41;
  ALLEGRO_KEY_PAD_5 = 42;
  ALLEGRO_KEY_PAD_6 = 43;
  ALLEGRO_KEY_PAD_7 = 44;
  ALLEGRO_KEY_PAD_8 = 45;
  ALLEGRO_KEY_PAD_9 = 46;
  ALLEGRO_KEY_F1 = 47;
  ALLEGRO_KEY_F2 = 48;
  ALLEGRO_KEY_F3 = 49;
  ALLEGRO_KEY_F4 = 50;
  ALLEGRO_KEY_F5 = 51;
  ALLEGRO_KEY_F6 = 52;
  ALLEGRO_KEY_F7 = 53;
  ALLEGRO_KEY_F8 = 54;
  ALLEGRO_KEY_F9 = 55;
  ALLEGRO_KEY_F10 = 56;
  ALLEGRO_KEY_F11 = 57;
  ALLEGRO_KEY_F12 = 58;
  ALLEGRO_KEY_ESCAPE = 59;
  ALLEGRO_KEY_TILDE = 60;
  ALLEGRO_KEY_MINUS = 61;
  ALLEGRO_KEY_EQUALS = 62;
  ALLEGRO_KEY_BACKSPACE = 63;
  ALLEGRO_KEY_TAB = 64;
  ALLEGRO_KEY_OPENBRACE = 65;
  ALLEGRO_KEY_CLOSEBRACE = 66;
  ALLEGRO_KEY_ENTER = 67;
  ALLEGRO_KEY_SEMICOLON = 68;
  ALLEGRO_KEY_QUOTE = 69;
  ALLEGRO_KEY_BACKSLASH = 70;
  ALLEGRO_KEY_BACKSLASH2 = 71;
  ALLEGRO_KEY_COMMA = 72;
  ALLEGRO_KEY_FULLSTOP = 73;
  ALLEGRO_KEY_SLASH = 74;
  ALLEGRO_KEY_SPACE = 75;
  ALLEGRO_KEY_INSERT = 76;
  ALLEGRO_KEY_DELETE = 77;
  ALLEGRO_KEY_HOME = 78;
  ALLEGRO_KEY_END = 79;
  ALLEGRO_KEY_PGUP = 80;
  ALLEGRO_KEY_PGDN = 81;
  ALLEGRO_KEY_LEFT = 82;
  ALLEGRO_KEY_RIGHT = 83;
  ALLEGRO_KEY_UP = 84;
  ALLEGRO_KEY_DOWN = 85;
  ALLEGRO_KEY_PAD_SLASH = 86;
  ALLEGRO_KEY_PAD_ASTERISK = 87;
  ALLEGRO_KEY_PAD_MINUS = 88;
  ALLEGRO_KEY_PAD_PLUS = 89;
  ALLEGRO_KEY_PAD_DELETE = 90;
  ALLEGRO_KEY_PAD_ENTER = 91;
  ALLEGRO_KEY_PRINTSCREEN = 92;
  ALLEGRO_KEY_PAUSE = 93;
  ALLEGRO_KEY_ABNT_C1 = 94;
  ALLEGRO_KEY_YEN = 95;
  ALLEGRO_KEY_KANA = 96;
  ALLEGRO_KEY_CONVERT = 97;
  ALLEGRO_KEY_NOCONVERT = 98;
  ALLEGRO_KEY_AT = 99;
  ALLEGRO_KEY_CIRCUMFLEX = 100;
  ALLEGRO_KEY_COLON2 = 101;
  ALLEGRO_KEY_KANJI = 102;
  ALLEGRO_KEY_PAD_EQUALS = 103;
  ALLEGRO_KEY_BACKQUOTE = 104;
  ALLEGRO_KEY_SEMICOLON2 = 105;
  ALLEGRO_KEY_COMMAND = 106;
  ALLEGRO_KEY_BACK = 107;
  ALLEGRO_KEY_VOLUME_UP = 108;
  ALLEGRO_KEY_VOLUME_DOWN = 109;
  ALLEGRO_KEY_SEARCH = 110;
  ALLEGRO_KEY_DPAD_CENTER = 111;
  ALLEGRO_KEY_BUTTON_X = 112;
  ALLEGRO_KEY_BUTTON_Y = 113;
  ALLEGRO_KEY_DPAD_UP = 114;
  ALLEGRO_KEY_DPAD_DOWN = 115;
  ALLEGRO_KEY_DPAD_LEFT = 116;
  ALLEGRO_KEY_DPAD_RIGHT = 117;
  ALLEGRO_KEY_SELECT = 118;
  ALLEGRO_KEY_START = 119;
  ALLEGRO_KEY_BUTTON_L1 = 120;
  ALLEGRO_KEY_BUTTON_R1 = 121;
  ALLEGRO_KEY_BUTTON_L2 = 122;
  ALLEGRO_KEY_BUTTON_R2 = 123;
  ALLEGRO_KEY_BUTTON_A = 124;
  ALLEGRO_KEY_BUTTON_B = 125;
  ALLEGRO_KEY_THUMBL = 126;
  ALLEGRO_KEY_THUMBR = 127;
  ALLEGRO_KEY_UNKNOWN = 128;
  ALLEGRO_KEY_MODIFIERS = 215;
  ALLEGRO_KEY_LSHIFT = 215;
  ALLEGRO_KEY_RSHIFT = 216;
  ALLEGRO_KEY_LCTRL = 217;
  ALLEGRO_KEY_RCTRL = 218;
  ALLEGRO_KEY_ALT = 219;
  ALLEGRO_KEY_ALTGR = 220;
  ALLEGRO_KEY_LWIN = 221;
  ALLEGRO_KEY_RWIN = 222;
  ALLEGRO_KEY_MENU = 223;
  ALLEGRO_KEY_SCROLLLOCK = 224;
  ALLEGRO_KEY_NUMLOCK = 225;
  ALLEGRO_KEY_CAPSLOCK = 226;
  ALLEGRO_KEY_MAX = 227;
  ALLEGRO_KEYMOD_SHIFT = 1;
  ALLEGRO_KEYMOD_CTRL = 2;
  ALLEGRO_KEYMOD_ALT = 4;
  ALLEGRO_KEYMOD_LWIN = 8;
  ALLEGRO_KEYMOD_RWIN = 16;
  ALLEGRO_KEYMOD_MENU = 32;
  ALLEGRO_KEYMOD_ALTGR = 64;
  ALLEGRO_KEYMOD_COMMAND = 128;
  ALLEGRO_KEYMOD_SCROLLLOCK = 256;
  ALLEGRO_KEYMOD_NUMLOCK = 512;
  ALLEGRO_KEYMOD_CAPSLOCK = 1024;
  ALLEGRO_KEYMOD_INALTSEQ = 2048;
  ALLEGRO_KEYMOD_ACCENT1 = 4096;
  ALLEGRO_KEYMOD_ACCENT2 = 8192;
  ALLEGRO_KEYMOD_ACCENT3 = 16384;
  ALLEGRO_KEYMOD_ACCENT4 = 32768;
  ALLEGRO_MOUSE_EMULATION_NONE = 0;
  ALLEGRO_MOUSE_EMULATION_TRANSPARENT = 1;
  ALLEGRO_MOUSE_EMULATION_INCLUSIVE = 2;
  ALLEGRO_MOUSE_EMULATION_EXCLUSIVE = 3;
  ALLEGRO_MOUSE_EMULATION_5_0_x = 4;
  ALLEGRO_HAPTIC_RUMBLE = 1;
  ALLEGRO_HAPTIC_PERIODIC = 2;
  ALLEGRO_HAPTIC_CONSTANT = 4;
  ALLEGRO_HAPTIC_SPRING = 8;
  ALLEGRO_HAPTIC_FRICTION = 16;
  ALLEGRO_HAPTIC_DAMPER = 32;
  ALLEGRO_HAPTIC_INERTIA = 64;
  ALLEGRO_HAPTIC_RAMP = 128;
  ALLEGRO_HAPTIC_SQUARE = 256;
  ALLEGRO_HAPTIC_TRIANGLE = 512;
  ALLEGRO_HAPTIC_SINE = 1024;
  ALLEGRO_HAPTIC_SAW_UP = 2048;
  ALLEGRO_HAPTIC_SAW_DOWN = 4096;
  ALLEGRO_HAPTIC_CUSTOM = 8192;
  ALLEGRO_HAPTIC_GAIN = 16384;
  ALLEGRO_HAPTIC_ANGLE = 32768;
  ALLEGRO_HAPTIC_RADIUS = 65536;
  ALLEGRO_HAPTIC_AZIMUTH = 131072;
  ALLEGRO_HAPTIC_AUTOCENTER = 262144;
  ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19;
  ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20;
  ALLEGRO_ALPHA_TEST = 16;
  ALLEGRO_WRITE_MASK = 17;
  ALLEGRO_DEPTH_TEST = 18;
  ALLEGRO_DEPTH_FUNCTION = 19;
  ALLEGRO_ALPHA_FUNCTION = 20;
  ALLEGRO_ALPHA_TEST_VALUE = 21;
  ALLEGRO_RENDER_NEVER = 0;
  ALLEGRO_RENDER_ALWAYS = 1;
  ALLEGRO_RENDER_LESS = 2;
  ALLEGRO_RENDER_EQUAL = 3;
  ALLEGRO_RENDER_LESS_EQUAL = 4;
  ALLEGRO_RENDER_GREATER = 5;
  ALLEGRO_RENDER_NOT_EQUAL = 6;
  ALLEGRO_RENDER_GREATER_EQUAL = 7;
  ALLEGRO_MASK_RED = 1;
  ALLEGRO_MASK_GREEN = 2;
  ALLEGRO_MASK_BLUE = 4;
  ALLEGRO_MASK_ALPHA = 8;
  ALLEGRO_MASK_DEPTH = 16;
  ALLEGRO_MASK_RGB = 7;
  ALLEGRO_MASK_RGBA = 15;
  ALLEGRO_VERTEX_SHADER = 1;
  ALLEGRO_PIXEL_SHADER = 2;
  ALLEGRO_SHADER_AUTO = 0;
  ALLEGRO_SHADER_GLSL = 1;
  ALLEGRO_SHADER_HLSL = 2;
  ALLEGRO_SYSTEM_ID_UNKNOWN = 0;
  ALLEGRO_SYSTEM_ID_XGLX = 1481067608;
  ALLEGRO_SYSTEM_ID_WINDOWS = 1464421956;
  ALLEGRO_SYSTEM_ID_MACOSX = 1330862112;
  ALLEGRO_SYSTEM_ID_ANDROID = 1095648338;
  ALLEGRO_SYSTEM_ID_IPHONE = 1229998159;
  ALLEGRO_SYSTEM_ID_GP2XWIZ = 1464424992;
  ALLEGRO_SYSTEM_ID_RASPBERRYPI = 1380012880;
  ALLEGRO_SYSTEM_ID_SDL = 1396984882;
  ALLEGRO_RESOURCES_PATH = 0;
  ALLEGRO_TEMP_PATH = 1;
  ALLEGRO_USER_DATA_PATH = 2;
  ALLEGRO_USER_HOME_PATH = 3;
  ALLEGRO_USER_SETTINGS_PATH = 4;
  ALLEGRO_USER_DOCUMENTS_PATH = 5;
  ALLEGRO_EXENAME_PATH = 6;
  ALLEGRO_LAST_PATH = 7;
  ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 1;
  ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 2;
  ALLEGRO_STATE_DISPLAY = 4;
  ALLEGRO_STATE_TARGET_BITMAP = 8;
  ALLEGRO_STATE_BLENDER = 16;
  ALLEGRO_STATE_NEW_FILE_INTERFACE = 32;
  ALLEGRO_STATE_TRANSFORM = 64;
  ALLEGRO_STATE_PROJECTION_TRANSFORM = 256;
  ALLEGRO_STATE_BITMAP = 10;
  ALLEGRO_STATE_ALL = 65535;
  ALLEGRO_DESKTOP_OPENGL = 0;
  ALLEGRO_OPENGL_ES = 1;
  _KCM_STREAM_FEEDER_QUIT_EVENT_TYPE = 512;
  ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT = 513;
  ALLEGRO_EVENT_AUDIO_STREAM_FINISHED = 514;
  ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT = 515;
  ALLEGRO_AUDIO_DEPTH_INT8 = 0;
  ALLEGRO_AUDIO_DEPTH_INT16 = 1;
  ALLEGRO_AUDIO_DEPTH_INT24 = 2;
  ALLEGRO_AUDIO_DEPTH_FLOAT32 = 3;
  ALLEGRO_AUDIO_DEPTH_UNSIGNED = 8;
  ALLEGRO_AUDIO_DEPTH_UINT8 = 8;
  ALLEGRO_AUDIO_DEPTH_UINT16 = 9;
  ALLEGRO_AUDIO_DEPTH_UINT24 = 10;
  ALLEGRO_CHANNEL_CONF_1 = 16;
  ALLEGRO_CHANNEL_CONF_2 = 32;
  ALLEGRO_CHANNEL_CONF_3 = 48;
  ALLEGRO_CHANNEL_CONF_4 = 64;
  ALLEGRO_CHANNEL_CONF_5_1 = 81;
  ALLEGRO_CHANNEL_CONF_6_1 = 97;
  ALLEGRO_CHANNEL_CONF_7_1 = 113;
  ALLEGRO_PLAYMODE_ONCE = 256;
  ALLEGRO_PLAYMODE_LOOP = 257;
  ALLEGRO_PLAYMODE_BIDIR = 258;
  _ALLEGRO_PLAYMODE_STREAM_ONCE = 259;
  _ALLEGRO_PLAYMODE_STREAM_ONEDIR = 260;
  ALLEGRO_MIXER_QUALITY_POINT = 272;
  ALLEGRO_MIXER_QUALITY_LINEAR = 273;
  ALLEGRO_MIXER_QUALITY_CUBIC = 274;
  ALLEGRO_NO_KERNING = -1;
  ALLEGRO_ALIGN_LEFT = 0;
  ALLEGRO_ALIGN_CENTRE = 1;
  ALLEGRO_ALIGN_CENTER = 1;
  ALLEGRO_ALIGN_RIGHT = 2;
  ALLEGRO_ALIGN_INTEGER = 4;
  ALLEGRO_FILECHOOSER_FILE_MUST_EXIST = 1;
  ALLEGRO_FILECHOOSER_SAVE = 2;
  ALLEGRO_FILECHOOSER_FOLDER = 4;
  ALLEGRO_FILECHOOSER_PICTURES = 8;
  ALLEGRO_FILECHOOSER_SHOW_HIDDEN = 16;
  ALLEGRO_FILECHOOSER_MULTIPLE = 32;
  ALLEGRO_MESSAGEBOX_WARN = 1;
  ALLEGRO_MESSAGEBOX_ERROR = 2;
  ALLEGRO_MESSAGEBOX_OK_CANCEL = 4;
  ALLEGRO_MESSAGEBOX_YES_NO = 8;
  ALLEGRO_MESSAGEBOX_QUESTION = 16;
  ALLEGRO_TEXTLOG_NO_CLOSE = 1;
  ALLEGRO_TEXTLOG_MONOSPACE = 2;
  ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE = 600;
  ALLEGRO_EVENT_MENU_CLICK = 601;
  ALLEGRO_MENU_ITEM_ENABLED = 0;
  ALLEGRO_MENU_ITEM_CHECKBOX = 1;
  ALLEGRO_MENU_ITEM_CHECKED = 2;
  ALLEGRO_MENU_ITEM_DISABLED = 4;
  ALLEGRO_PRIM_LINE_LIST = 0;
  ALLEGRO_PRIM_LINE_STRIP = 1;
  ALLEGRO_PRIM_LINE_LOOP = 2;
  ALLEGRO_PRIM_TRIANGLE_LIST = 3;
  ALLEGRO_PRIM_TRIANGLE_STRIP = 4;
  ALLEGRO_PRIM_TRIANGLE_FAN = 5;
  ALLEGRO_PRIM_POINT_LIST = 6;
  ALLEGRO_PRIM_NUM_TYPES = 7;
  ALLEGRO_PRIM_MAX_USER_ATTR = 10;
  ALLEGRO_PRIM_POSITION = 1;
  ALLEGRO_PRIM_COLOR_ATTR = 2;
  ALLEGRO_PRIM_TEX_COORD = 3;
  ALLEGRO_PRIM_TEX_COORD_PIXEL = 4;
  ALLEGRO_PRIM_USER_ATTR = 5;
  ALLEGRO_PRIM_ATTR_NUM = 15;
  ALLEGRO_PRIM_FLOAT_2 = 0;
  ALLEGRO_PRIM_FLOAT_3 = 1;
  ALLEGRO_PRIM_SHORT_2 = 2;
  ALLEGRO_PRIM_FLOAT_1 = 3;
  ALLEGRO_PRIM_FLOAT_4 = 4;
  ALLEGRO_PRIM_UBYTE_4 = 5;
  ALLEGRO_PRIM_SHORT_4 = 6;
  ALLEGRO_PRIM_NORMALIZED_UBYTE_4 = 7;
  ALLEGRO_PRIM_NORMALIZED_SHORT_2 = 8;
  ALLEGRO_PRIM_NORMALIZED_SHORT_4 = 9;
  ALLEGRO_PRIM_NORMALIZED_USHORT_2 = 10;
  ALLEGRO_PRIM_NORMALIZED_USHORT_4 = 11;
  ALLEGRO_PRIM_HALF_FLOAT_2 = 12;
  ALLEGRO_PRIM_HALF_FLOAT_4 = 13;
  ALLEGRO_LINE_JOIN_NONE = 0;
  ALLEGRO_LINE_JOIN_BEVEL = 1;
  ALLEGRO_LINE_JOIN_ROUND = 2;
  ALLEGRO_LINE_JOIN_MITER = 3;
  ALLEGRO_LINE_JOIN_MITRE = 3;
  ALLEGRO_LINE_CAP_NONE = 0;
  ALLEGRO_LINE_CAP_SQUARE = 1;
  ALLEGRO_LINE_CAP_ROUND = 2;
  ALLEGRO_LINE_CAP_TRIANGLE = 3;
  ALLEGRO_LINE_CAP_CLOSED = 4;
  ALLEGRO_PRIM_BUFFER_STREAM = 1;
  ALLEGRO_PRIM_BUFFER_STATIC = 2;
  ALLEGRO_PRIM_BUFFER_DYNAMIC = 4;
  ALLEGRO_PRIM_BUFFER_READWRITE = 8;
  ALLEGRO_EVENT_VIDEO_FRAME_SHOW = 550;
  ALLEGRO_EVENT_VIDEO_FINISHED = 551;
  _ALLEGRO_EVENT_VIDEO_SEEK = 552;
  ALLEGRO_VIDEO_POSITION_ACTUAL = 0;
  ALLEGRO_VIDEO_POSITION_VIDEO_DECODE = 1;
  ALLEGRO_VIDEO_POSITION_AUDIO_DECODE = 2;
  PHYSFS_ENUM_ERROR = -1;
  PHYSFS_ENUM_STOP = 0;
  PHYSFS_ENUM_OK = 1;
  PHYSFS_FILETYPE_REGULAR = 0;
  PHYSFS_FILETYPE_DITRectORY = 1;
  PHYSFS_FILETYPE_SYMLINK = 2;
  PHYSFS_FILETYPE_OTHER = 3;
  PHYSFS_ERR_OK = 0;
  PHYSFS_ERR_OTHER_ERROR = 1;
  PHYSFS_ERR_OUT_OF_MEMORY = 2;
  PHYSFS_ERR_NOT_INITIALIZED = 3;
  PHYSFS_ERR_IS_INITIALIZED = 4;
  PHYSFS_ERR_ARGV0_IS_NULL = 5;
  PHYSFS_ERR_UNSUPPORTED = 6;
  PHYSFS_ERR_PAST_EOF = 7;
  PHYSFS_ERR_FILES_STILL_OPEN = 8;
  PHYSFS_ERR_INVALID_ARGUMENT = 9;
  PHYSFS_ERR_NOT_MOUNTED = 10;
  PHYSFS_ERR_NOT_FOUND = 11;
  PHYSFS_ERR_SYMLINK_FORBIDDEN = 12;
  PHYSFS_ERR_NO_WRITE_DIR = 13;
  PHYSFS_ERR_OPEN_FOR_READING = 14;
  PHYSFS_ERR_OPEN_FOR_WRITING = 15;
  PHYSFS_ERR_NOT_A_FILE = 16;
  PHYSFS_ERR_READ_ONLY = 17;
  PHYSFS_ERR_CORRUPT = 18;
  PHYSFS_ERR_SYMLINK_LOOP = 19;
  PHYSFS_ERR_IO = 20;
  PHYSFS_ERR_PERMISSION = 21;
  PHYSFS_ERR_NO_SPACE = 22;
  PHYSFS_ERR_BAD_FILENAME = 23;
  PHYSFS_ERR_BUSY = 24;
  PHYSFS_ERR_DIR_NOT_EMPTY = 25;
  PHYSFS_ERR_OS_ERROR = 26;
  PHYSFS_ERR_DUPLICATE = 27;
  PHYSFS_ERR_BAD_PASSWORD = 28;
  PHYSFS_ERR_APP_CALLBACK = 29;

type

  { ALLEGRO_PIXEL_FORMAT  }
  ALLEGRO_PIXEL_FORMAT = Integer;

  { PALLEGRO_PIXEL_FORMAT  }
  PALLEGRO_PIXEL_FORMAT = ^ALLEGRO_PIXEL_FORMAT;

  { _anonymous_type_1  }
  _anonymous_type_1 = Integer;

  { P_anonymous_type_1  }
  P_anonymous_type_1 = ^_anonymous_type_1;

  { _anonymous_type_2  }
  _anonymous_type_2 = Integer;

  { P_anonymous_type_2  }
  P_anonymous_type_2 = ^_anonymous_type_2;

  { ALLEGRO_SEEK  }
  ALLEGRO_SEEK = Integer;

  { PALLEGRO_SEEK  }
  PALLEGRO_SEEK = ^ALLEGRO_SEEK;

  { _anonymous_type_3  }
  _anonymous_type_3 = Integer;

  { P_anonymous_type_3  }
  P_anonymous_type_3 = ^_anonymous_type_3;

  { _anonymous_type_4  }
  _anonymous_type_4 = Integer;

  { P_anonymous_type_4  }
  P_anonymous_type_4 = ^_anonymous_type_4;

  { ALLEGRO_BLEND_MODE  }
  ALLEGRO_BLEND_MODE = Integer;

  { PALLEGRO_BLEND_MODE  }
  PALLEGRO_BLEND_MODE = ^ALLEGRO_BLEND_MODE;

  { ALLEGRO_BLEND_OPERATIONS  }
  ALLEGRO_BLEND_OPERATIONS = Integer;

  { PALLEGRO_BLEND_OPERATIONS  }
  PALLEGRO_BLEND_OPERATIONS = ^ALLEGRO_BLEND_OPERATIONS;

  { _anonymous_type_5  }
  _anonymous_type_5 = Integer;

  { P_anonymous_type_5  }
  P_anonymous_type_5 = ^_anonymous_type_5;

  { _anonymous_type_6  }
  _anonymous_type_6 = Integer;

  { P_anonymous_type_6  }
  P_anonymous_type_6 = ^_anonymous_type_6;

  { ALLEGRO_DISPLAY_OPTIONS  }
  ALLEGRO_DISPLAY_OPTIONS = Integer;

  { PALLEGRO_DISPLAY_OPTIONS  }
  PALLEGRO_DISPLAY_OPTIONS = ^ALLEGRO_DISPLAY_OPTIONS;

  { _anonymous_type_7  }
  _anonymous_type_7 = Integer;

  { P_anonymous_type_7  }
  P_anonymous_type_7 = ^_anonymous_type_7;

  { ALLEGRO_DISPLAY_ORIENTATION  }
  ALLEGRO_DISPLAY_ORIENTATION = Integer;

  { PALLEGRO_DISPLAY_ORIENTATION  }
  PALLEGRO_DISPLAY_ORIENTATION = ^ALLEGRO_DISPLAY_ORIENTATION;

  { _anonymous_type_8  }
  _anonymous_type_8 = Integer;

  { P_anonymous_type_8  }
  P_anonymous_type_8 = ^_anonymous_type_8;

  { ALLEGRO_FILE_MODE  }
  ALLEGRO_FILE_MODE = Integer;

  { PALLEGRO_FILE_MODE  }
  PALLEGRO_FILE_MODE = ^ALLEGRO_FILE_MODE;

  { ALLEGRO_FOR_EACH_FS_ENTRY_RESULT  }
  ALLEGRO_FOR_EACH_FS_ENTRY_RESULT = Integer;

  { PALLEGRO_FOR_EACH_FS_ENTRY_RESULT  }
  PALLEGRO_FOR_EACH_FS_ENTRY_RESULT = ^ALLEGRO_FOR_EACH_FS_ENTRY_RESULT;

  { ALLEGRO_JOYFLAGS  }
  ALLEGRO_JOYFLAGS = Integer;

  { PALLEGRO_JOYFLAGS  }
  PALLEGRO_JOYFLAGS = ^ALLEGRO_JOYFLAGS;

  { _anonymous_type_9  }
  _anonymous_type_9 = Integer;

  { P_anonymous_type_9  }
  P_anonymous_type_9 = ^_anonymous_type_9;

  { _anonymous_type_10  }
  _anonymous_type_10 = Integer;

  { P_anonymous_type_10  }
  P_anonymous_type_10 = ^_anonymous_type_10;

  { ALLEGRO_MOUSE_EMULATION_MODE  }
  ALLEGRO_MOUSE_EMULATION_MODE = Integer;

  { PALLEGRO_MOUSE_EMULATION_MODE  }
  PALLEGRO_MOUSE_EMULATION_MODE = ^ALLEGRO_MOUSE_EMULATION_MODE;

  { ALLEGRO_HAPTIC_CONSTANTS  }
  ALLEGRO_HAPTIC_CONSTANTS = Integer;

  { PALLEGRO_HAPTIC_CONSTANTS  }
  PALLEGRO_HAPTIC_CONSTANTS = ^ALLEGRO_HAPTIC_CONSTANTS;

  { _anonymous_type_11  }
  _anonymous_type_11 = Integer;

  { P_anonymous_type_11  }
  P_anonymous_type_11 = ^_anonymous_type_11;

  { ALLEGRO_SYSTEM_MOUSE_CURSOR  }
  ALLEGRO_SYSTEM_MOUSE_CURSOR = Integer;

  { PALLEGRO_SYSTEM_MOUSE_CURSOR  }
  PALLEGRO_SYSTEM_MOUSE_CURSOR = ^ALLEGRO_SYSTEM_MOUSE_CURSOR;

  { ALLEGRO_RENDER_STATE  }
  ALLEGRO_RENDER_STATE = Integer;

  { PALLEGRO_RENDER_STATE  }
  PALLEGRO_RENDER_STATE = ^ALLEGRO_RENDER_STATE;

  { ALLEGRO_RENDER_FUNCTION  }
  ALLEGRO_RENDER_FUNCTION = Integer;

  { PALLEGRO_RENDER_FUNCTION  }
  PALLEGRO_RENDER_FUNCTION = ^ALLEGRO_RENDER_FUNCTION;

  { ALLEGRO_WRITE_MASK_FLAGS  }
  ALLEGRO_WRITE_MASK_FLAGS = Integer;

  { PALLEGRO_WRITE_MASK_FLAGS  }
  PALLEGRO_WRITE_MASK_FLAGS = ^ALLEGRO_WRITE_MASK_FLAGS;

  { ALLEGRO_SHADER_TYPE  }
  ALLEGRO_SHADER_TYPE = Integer;

  { PALLEGRO_SHADER_TYPE  }
  PALLEGRO_SHADER_TYPE = ^ALLEGRO_SHADER_TYPE;

  { ALLEGRO_SHADER_PLATFORM  }
  ALLEGRO_SHADER_PLATFORM = Integer;

  { PALLEGRO_SHADER_PLATFORM  }
  PALLEGRO_SHADER_PLATFORM = ^ALLEGRO_SHADER_PLATFORM;

  { ALLEGRO_SYSTEM_ID  }
  ALLEGRO_SYSTEM_ID = Integer;

  { PALLEGRO_SYSTEM_ID  }
  PALLEGRO_SYSTEM_ID = ^ALLEGRO_SYSTEM_ID;

  { _anonymous_type_12  }
  _anonymous_type_12 = Integer;

  { P_anonymous_type_12  }
  P_anonymous_type_12 = ^_anonymous_type_12;

  { ALLEGRO_STATE_FLAGS  }
  ALLEGRO_STATE_FLAGS = Integer;

  { PALLEGRO_STATE_FLAGS  }
  PALLEGRO_STATE_FLAGS = ^ALLEGRO_STATE_FLAGS;

  { ALLEGRO_OPENGL_VARIANT  }
  ALLEGRO_OPENGL_VARIANT = Integer;

  { PALLEGRO_OPENGL_VARIANT  }
  PALLEGRO_OPENGL_VARIANT = ^ALLEGRO_OPENGL_VARIANT;

  { ALLEGRO_AUDIO_EVENT_TYPE  }
  ALLEGRO_AUDIO_EVENT_TYPE = Integer;

  { PALLEGRO_AUDIO_EVENT_TYPE  }
  PALLEGRO_AUDIO_EVENT_TYPE = ^ALLEGRO_AUDIO_EVENT_TYPE;

  { ALLEGRO_AUDIO_DEPTH  }
  ALLEGRO_AUDIO_DEPTH = Integer;

  { PALLEGRO_AUDIO_DEPTH  }
  PALLEGRO_AUDIO_DEPTH = ^ALLEGRO_AUDIO_DEPTH;

  { ALLEGRO_CHANNEL_CONF  }
  ALLEGRO_CHANNEL_CONF = Integer;

  { PALLEGRO_CHANNEL_CONF  }
  PALLEGRO_CHANNEL_CONF = ^ALLEGRO_CHANNEL_CONF;

  { ALLEGRO_PLAYMODE  }
  ALLEGRO_PLAYMODE = Integer;

  { PALLEGRO_PLAYMODE  }
  PALLEGRO_PLAYMODE = ^ALLEGRO_PLAYMODE;

  { ALLEGRO_MIXER_QUALITY  }
  ALLEGRO_MIXER_QUALITY = Integer;

  { PALLEGRO_MIXER_QUALITY  }
  PALLEGRO_MIXER_QUALITY = ^ALLEGRO_MIXER_QUALITY;

  { _anonymous_type_13  }
  _anonymous_type_13 = Integer;

  { P_anonymous_type_13  }
  P_anonymous_type_13 = ^_anonymous_type_13;

  { _anonymous_type_14  }
  _anonymous_type_14 = Integer;

  { P_anonymous_type_14  }
  P_anonymous_type_14 = ^_anonymous_type_14;

  { _anonymous_type_15  }
  _anonymous_type_15 = Integer;

  { P_anonymous_type_15  }
  P_anonymous_type_15 = ^_anonymous_type_15;

  { _anonymous_type_16  }
  _anonymous_type_16 = Integer;

  { P_anonymous_type_16  }
  P_anonymous_type_16 = ^_anonymous_type_16;

  { _anonymous_type_17  }
  _anonymous_type_17 = Integer;

  { P_anonymous_type_17  }
  P_anonymous_type_17 = ^_anonymous_type_17;

  { _anonymous_type_18  }
  _anonymous_type_18 = Integer;

  { P_anonymous_type_18  }
  P_anonymous_type_18 = ^_anonymous_type_18;

  { ALLEGRO_PRIM_TYPE  }
  ALLEGRO_PRIM_TYPE = Integer;

  { PALLEGRO_PRIM_TYPE  }
  PALLEGRO_PRIM_TYPE = ^ALLEGRO_PRIM_TYPE;

  { _anonymous_type_19  }
  _anonymous_type_19 = Integer;

  { P_anonymous_type_19  }
  P_anonymous_type_19 = ^_anonymous_type_19;

  { ALLEGRO_PRIM_ATTR  }
  ALLEGRO_PRIM_ATTR = Integer;

  { PALLEGRO_PRIM_ATTR  }
  PALLEGRO_PRIM_ATTR = ^ALLEGRO_PRIM_ATTR;

  { ALLEGRO_PRIM_STORAGE  }
  ALLEGRO_PRIM_STORAGE = Integer;

  { PALLEGRO_PRIM_STORAGE  }
  PALLEGRO_PRIM_STORAGE = ^ALLEGRO_PRIM_STORAGE;

  { ALLEGRO_LINE_JOIN  }
  ALLEGRO_LINE_JOIN = Integer;

  { PALLEGRO_LINE_JOIN  }
  PALLEGRO_LINE_JOIN = ^ALLEGRO_LINE_JOIN;

  { ALLEGRO_LINE_CAP  }
  ALLEGRO_LINE_CAP = Integer;

  { PALLEGRO_LINE_CAP  }
  PALLEGRO_LINE_CAP = ^ALLEGRO_LINE_CAP;

  { ALLEGRO_PRIM_BUFFER_FLAGS  }
  ALLEGRO_PRIM_BUFFER_FLAGS = Integer;

  { PALLEGRO_PRIM_BUFFER_FLAGS  }
  PALLEGRO_PRIM_BUFFER_FLAGS = ^ALLEGRO_PRIM_BUFFER_FLAGS;

  { ALLEGRO_VIDEO_EVENT_TYPE  }
  ALLEGRO_VIDEO_EVENT_TYPE = Integer;

  { PALLEGRO_VIDEO_EVENT_TYPE  }
  PALLEGRO_VIDEO_EVENT_TYPE = ^ALLEGRO_VIDEO_EVENT_TYPE;

  { ALLEGRO_VIDEO_POSITION_TYPE  }
  ALLEGRO_VIDEO_POSITION_TYPE = Integer;

  { PALLEGRO_VIDEO_POSITION_TYPE  }
  PALLEGRO_VIDEO_POSITION_TYPE = ^ALLEGRO_VIDEO_POSITION_TYPE;

  { PHYSFS_EnumerateCallbackResult  }
  PHYSFS_EnumerateCallbackResult = Integer;

  { PPHYSFS_EnumerateCallbackResult  }
  PPHYSFS_EnumerateCallbackResult = ^PHYSFS_EnumerateCallbackResult;

  { PHYSFS_FileType  }
  PHYSFS_FileType = Integer;

  { PPHYSFS_FileType  }
  PPHYSFS_FileType = ^PHYSFS_FileType;

  { PHYSFS_ErrorCode  }
  PHYSFS_ErrorCode = Integer;

  { PPHYSFS_ErrorCode  }
  PPHYSFS_ErrorCode = ^PHYSFS_ErrorCode;
  // Forward declarations

  { PPUTF8Char  }
  PPUTF8Char = ^PUTF8Char;

  { PUInt16  }
  PUInt16 = ^UInt16;

  { PALLEGRO_USER_EVENT_DESCRIPTOR  }
  PALLEGRO_USER_EVENT_DESCRIPTOR = Pointer;

  { PPALLEGRO_USER_EVENT_DESCRIPTOR  }
  PPALLEGRO_USER_EVENT_DESCRIPTOR = ^PALLEGRO_USER_EVENT_DESCRIPTOR;

  { PALLEGRO_JOYSTICK_DRIVER  }
  PALLEGRO_JOYSTICK_DRIVER = Pointer;

  { PPALLEGRO_JOYSTICK_DRIVER  }
  PPALLEGRO_JOYSTICK_DRIVER = ^PALLEGRO_JOYSTICK_DRIVER;

  { PALLEGRO_HAPTIC_DRIVER  }
  PALLEGRO_HAPTIC_DRIVER = Pointer;

  { PPALLEGRO_HAPTIC_DRIVER  }
  PPALLEGRO_HAPTIC_DRIVER = ^PALLEGRO_HAPTIC_DRIVER;

  { PALLEGRO_TIMEOUT  }
  PALLEGRO_TIMEOUT = ^ALLEGRO_TIMEOUT;

  { PALLEGRO_COLOR  }
  PALLEGRO_COLOR = ^ALLEGRO_COLOR;

  { PALLEGRO_FILE_INTERFACE  }
  PALLEGRO_FILE_INTERFACE = ^ALLEGRO_FILE_INTERFACE;

  { PALLEGRO_LOCKED_REGION  }
  PALLEGRO_LOCKED_REGION = ^ALLEGRO_LOCKED_REGION;

  { PALLEGRO_EVENT_SOURCE  }
  PALLEGRO_EVENT_SOURCE = ^ALLEGRO_EVENT_SOURCE;

  { PALLEGRO_ANY_EVENT  }
  PALLEGRO_ANY_EVENT = ^ALLEGRO_ANY_EVENT;

  { PALLEGRO_DISPLAY_EVENT  }
  PALLEGRO_DISPLAY_EVENT = ^ALLEGRO_DISPLAY_EVENT;

  { PALLEGRO_JOYSTICK_EVENT  }
  PALLEGRO_JOYSTICK_EVENT = ^ALLEGRO_JOYSTICK_EVENT;

  { PALLEGRO_KEYBOARD_EVENT  }
  PALLEGRO_KEYBOARD_EVENT = ^ALLEGRO_KEYBOARD_EVENT;

  { PALLEGRO_MOUSE_EVENT  }
  PALLEGRO_MOUSE_EVENT = ^ALLEGRO_MOUSE_EVENT;

  { PALLEGRO_TIMER_EVENT  }
  PALLEGRO_TIMER_EVENT = ^ALLEGRO_TIMER_EVENT;

  { PALLEGRO_TOUCH_EVENT  }
  PALLEGRO_TOUCH_EVENT = ^ALLEGRO_TOUCH_EVENT;

  { PALLEGRO_USER_EVENT  }
  PALLEGRO_USER_EVENT = ^ALLEGRO_USER_EVENT;

  { PALLEGRO_FS_ENTRY  }
  PALLEGRO_FS_ENTRY = ^ALLEGRO_FS_ENTRY;

  { PALLEGRO_FS_INTERFACE  }
  PALLEGRO_FS_INTERFACE = ^ALLEGRO_FS_INTERFACE;

  { PALLEGRO_DISPLAY_MODE  }
  PALLEGRO_DISPLAY_MODE = ^ALLEGRO_DISPLAY_MODE;

  { PALLEGRO_JOYSTICK_STATE  }
  PALLEGRO_JOYSTICK_STATE = ^ALLEGRO_JOYSTICK_STATE;

  { PALLEGRO_KEYBOARD_STATE  }
  PALLEGRO_KEYBOARD_STATE = ^ALLEGRO_KEYBOARD_STATE;

  { PALLEGRO_MOUSE_STATE  }
  PALLEGRO_MOUSE_STATE = ^ALLEGRO_MOUSE_STATE;

  { PALLEGRO_TOUCH_STATE  }
  PALLEGRO_TOUCH_STATE = ^ALLEGRO_TOUCH_STATE;

  { PALLEGRO_TOUCH_INPUT_STATE  }
  PALLEGRO_TOUCH_INPUT_STATE = ^ALLEGRO_TOUCH_INPUT_STATE;

  { PALLEGRO_HAPTIC_DITRectION  }
  PALLEGRO_HAPTIC_DITRectION = ^ALLEGRO_HAPTIC_DITRectION;

  { PALLEGRO_HAPTIC_REPLAY  }
  PALLEGRO_HAPTIC_REPLAY = ^ALLEGRO_HAPTIC_REPLAY;

  { PALLEGRO_HAPTIC_ENVELOPE  }
  PALLEGRO_HAPTIC_ENVELOPE = ^ALLEGRO_HAPTIC_ENVELOPE;

  { PALLEGRO_HAPTIC_CONSTANT_EFFECT  }
  PALLEGRO_HAPTIC_CONSTANT_EFFECT = ^ALLEGRO_HAPTIC_CONSTANT_EFFECT;

  { PALLEGRO_HAPTIC_RAMP_EFFECT  }
  PALLEGRO_HAPTIC_RAMP_EFFECT = ^ALLEGRO_HAPTIC_RAMP_EFFECT;

  { PALLEGRO_HAPTIC_CONDITION_EFFECT  }
  PALLEGRO_HAPTIC_CONDITION_EFFECT = ^ALLEGRO_HAPTIC_CONDITION_EFFECT;

  { PALLEGRO_HAPTIC_PERIODIC_EFFECT  }
  PALLEGRO_HAPTIC_PERIODIC_EFFECT = ^ALLEGRO_HAPTIC_PERIODIC_EFFECT;

  { PALLEGRO_HAPTIC_RUMBLE_EFFECT  }
  PALLEGRO_HAPTIC_RUMBLE_EFFECT = ^ALLEGRO_HAPTIC_RUMBLE_EFFECT;

  { PALLEGRO_HAPTIC_EFFECT  }
  PALLEGRO_HAPTIC_EFFECT = ^ALLEGRO_HAPTIC_EFFECT;

  { PALLEGRO_HAPTIC_EFFECT_ID  }
  PALLEGRO_HAPTIC_EFFECT_ID = ^ALLEGRO_HAPTIC_EFFECT_ID;

  { PALLEGRO_MEMORY_INTERFACE  }
  PALLEGRO_MEMORY_INTERFACE = ^ALLEGRO_MEMORY_INTERFACE;

  { PALLEGRO_MONITOR_INFO  }
  PALLEGRO_MONITOR_INFO = ^ALLEGRO_MONITOR_INFO;

  { PALLEGRO_TRANSFORM  }
  PALLEGRO_TRANSFORM = ^ALLEGRO_TRANSFORM;

  { PALLEGRO_STATE  }
  PALLEGRO_STATE = ^ALLEGRO_STATE;

  { PHPBUFFERARB__  }
  PHPBUFFERARB__ = ^HPBUFFERARB__;

  { PHPBUFFEREXT__  }
  PHPBUFFEREXT__ = ^HPBUFFEREXT__;

  { PHVIDEOOUTPUTDEVICENV__  }
  PHVIDEOOUTPUTDEVICENV__ = ^HVIDEOOUTPUTDEVICENV__;

  { PHPVIDEODEV__  }
  PHPVIDEODEV__ = ^HPVIDEODEV__;

  { PHPGPUNV__  }
  PHPGPUNV__ = ^HPGPUNV__;

  { PHGPUNV__  }
  PHGPUNV__ = ^HGPUNV__;

  { P_GPU_DEVICE  }
  P_GPU_DEVICE = ^_GPU_DEVICE;

  { PHVIDEOINPUTDEVICENV__  }
  PHVIDEOINPUTDEVICENV__ = ^HVIDEOINPUTDEVICENV__;

  { PALLEGRO_OGL_EXT_LIST  }
  PALLEGRO_OGL_EXT_LIST = ^ALLEGRO_OGL_EXT_LIST;

  { PALLEGRO_OGL_EXT_API  }
  PALLEGRO_OGL_EXT_API = ^ALLEGRO_OGL_EXT_API;

  { PALLEGRO_AUDIO_RECORDER_EVENT  }
  PALLEGRO_AUDIO_RECORDER_EVENT = ^ALLEGRO_AUDIO_RECORDER_EVENT;

  { PALLEGRO_SAMPLE_ID  }
  PALLEGRO_SAMPLE_ID = ^ALLEGRO_SAMPLE_ID;

  { PALLEGRO_GLYPH  }
  PALLEGRO_GLYPH = ^ALLEGRO_GLYPH;

  { PALLEGRO_MENU_INFO  }
  PALLEGRO_MENU_INFO = ^ALLEGRO_MENU_INFO;

  { PALLEGRO_VERTEX_ELEMENT  }
  PALLEGRO_VERTEX_ELEMENT = ^ALLEGRO_VERTEX_ELEMENT;

  { PALLEGRO_VERTEX  }
  PALLEGRO_VERTEX = ^ALLEGRO_VERTEX;

  { PPHYSFS_File  }
  PPHYSFS_File = ^PHYSFS_File;

  { PPHYSFS_ArchiveInfo  }
  PPHYSFS_ArchiveInfo = ^PHYSFS_ArchiveInfo;

  { PPPHYSFS_ArchiveInfo  }
  PPPHYSFS_ArchiveInfo = ^PPHYSFS_ArchiveInfo;

  { PPHYSFS_Version  }
  PPHYSFS_Version = ^PHYSFS_Version;

  { PPHYSFS_Allocator  }
  PPHYSFS_Allocator = ^PHYSFS_Allocator;

  { PPHYSFS_Stat_  }
  PPHYSFS_Stat_ = ^PHYSFS_Stat_;

  { PPHYSFS_Io  }
  PPHYSFS_Io = ^PHYSFS_Io;

  { PPHYSFS_Archiver  }
  PPHYSFS_Archiver = ^PHYSFS_Archiver;

  { Ptm_zip_s  }
  Ptm_zip_s = ^tm_zip_s;

  { Pzip_fileinfo  }
  Pzip_fileinfo = ^zip_fileinfo;

  { ALLEGRO_TIMEOUT  }
  ALLEGRO_TIMEOUT = record
    __pad1__: UInt64;
    __pad2__: UInt64;
  end;

  { ALLEGRO_COLOR  }
  ALLEGRO_COLOR = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  { PALLEGRO_BITMAP  }
  PALLEGRO_BITMAP = Pointer;

  { PPALLEGRO_BITMAP  }
  PPALLEGRO_BITMAP = ^PALLEGRO_BITMAP;

  { _al_tagbstring  }
  _al_tagbstring = record
    mlen: Integer;
    slen: Integer;
    data: PByte;
  end;

  { PALLEGRO_PATH  }
  PALLEGRO_PATH = Pointer;

  { PALLEGRO_USTR_INFO  }
  PALLEGRO_USTR_INFO = ^ALLEGRO_USTR_INFO;

  { ALLEGRO_USTR_INFO  }
  ALLEGRO_USTR_INFO = _al_tagbstring;

  { PALLEGRO_USTR  }
  PALLEGRO_USTR = ^ALLEGRO_USTR;

  { ALLEGRO_USTR  }
  ALLEGRO_USTR = _al_tagbstring;

  { PPALLEGRO_PATH  }
  PPALLEGRO_PATH = ^PALLEGRO_PATH;

  { PALLEGRO_FILE  }
  PALLEGRO_FILE = Pointer;

  { PPALLEGRO_FILE  }
  PPALLEGRO_FILE = ^PALLEGRO_FILE;

  { ALLEGRO_FILE_INTERFACE  }
  ALLEGRO_FILE_INTERFACE = record
    fi_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): Pointer; cdecl;
    fi_fclose: function(handle: PALLEGRO_FILE): Boolean; cdecl;
    fi_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
    fi_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
    fi_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
    fi_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
    fi_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
    fi_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
    fi_fsize: function(f: PALLEGRO_FILE): longint; cdecl;
  end;

  { ALLEGRO_IIO_LOADER_FUNCTION  }
  ALLEGRO_IIO_LOADER_FUNCTION = function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;

  { ALLEGRO_IIO_FS_LOADER_FUNCTION  }
  ALLEGRO_IIO_FS_LOADER_FUNCTION = function(fp: PALLEGRO_FILE; flags: Integer): PALLEGRO_BITMAP; cdecl;

  { ALLEGRO_IIO_SAVER_FUNCTION  }
  ALLEGRO_IIO_SAVER_FUNCTION = function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  { ALLEGRO_IIO_FS_SAVER_FUNCTION  }
  ALLEGRO_IIO_FS_SAVER_FUNCTION = function(fp: PALLEGRO_FILE; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  { ALLEGRO_IIO_IDENTIFIER_FUNCTION  }
  ALLEGRO_IIO_IDENTIFIER_FUNCTION = function(f: PALLEGRO_FILE): Boolean; cdecl;

  { ALLEGRO_LOCKED_REGION  }
  ALLEGRO_LOCKED_REGION = record
    data: Pointer;
    format: Integer;
    pitch: Integer;
    pixel_size: Integer;
  end;

  { ALLEGRO_EVENT_TYPE  }
  ALLEGRO_EVENT_TYPE = Cardinal;

  { ALLEGRO_EVENT_SOURCE  }
  ALLEGRO_EVENT_SOURCE = record
    __pad: array [0..31] of Integer;
  end;

  { ALLEGRO_ANY_EVENT  }
  ALLEGRO_ANY_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
  end;

  { PALLEGRO_DISPLAY  }
  PALLEGRO_DISPLAY = Pointer;

  { PPALLEGRO_DISPLAY  }
  PPALLEGRO_DISPLAY = ^PALLEGRO_DISPLAY;

  { ALLEGRO_DISPLAY_EVENT  }
  ALLEGRO_DISPLAY_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_DISPLAY;
    timestamp: Double;
    x: Integer;
    y: Integer;
    width: Integer;
    height: Integer;
    orientation: Integer;
  end;

  { PALLEGRO_JOYSTICK  }
  PALLEGRO_JOYSTICK = Pointer;

  { PPALLEGRO_JOYSTICK  }
  PPALLEGRO_JOYSTICK = ^PALLEGRO_JOYSTICK;

  { ALLEGRO_JOYSTICK_EVENT  }
  ALLEGRO_JOYSTICK_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_JOYSTICK;
    timestamp: Double;
    id: PALLEGRO_JOYSTICK;
    stick: Integer;
    axis: Integer;
    pos: Single;
    button: Integer;
  end;

  { PALLEGRO_KEYBOARD  }
  PALLEGRO_KEYBOARD = Pointer;

  { PPALLEGRO_KEYBOARD  }
  PPALLEGRO_KEYBOARD = ^PALLEGRO_KEYBOARD;

  { ALLEGRO_KEYBOARD_EVENT  }
  ALLEGRO_KEYBOARD_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_KEYBOARD;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    keycode: Integer;
    unichar: Integer;
    modifiers: Cardinal;
    _repeat: Boolean;
  end;

  { PALLEGRO_MOUSE  }
  PALLEGRO_MOUSE = Pointer;

  { PPALLEGRO_MOUSE  }
  PPALLEGRO_MOUSE = ^PALLEGRO_MOUSE;

  { ALLEGRO_MOUSE_EVENT  }
  ALLEGRO_MOUSE_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_MOUSE;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    dx: Integer;
    dy: Integer;
    dz: Integer;
    dw: Integer;
    button: Cardinal;
    pressure: Single;
  end;

  { PALLEGRO_TIMER  }
  PALLEGRO_TIMER = Pointer;

  { PPALLEGRO_TIMER  }
  PPALLEGRO_TIMER = ^PALLEGRO_TIMER;

  { ALLEGRO_TIMER_EVENT  }
  ALLEGRO_TIMER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TIMER;
    timestamp: Double;
    count: Int64;
    error: Double;
  end;

  { PALLEGRO_TOUCH_INPUT  }
  PALLEGRO_TOUCH_INPUT = Pointer;

  { PPALLEGRO_TOUCH_INPUT  }
  PPALLEGRO_TOUCH_INPUT = ^PALLEGRO_TOUCH_INPUT;

  { ALLEGRO_TOUCH_EVENT  }
  ALLEGRO_TOUCH_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TOUCH_INPUT;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
  end;

  { ALLEGRO_USER_EVENT  }
  ALLEGRO_USER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    data1: IntPtr;
    data2: IntPtr;
    data3: IntPtr;
    data4: IntPtr;
  end;

  { PALLEGRO_EVENT  }
  PALLEGRO_EVENT = ^ALLEGRO_EVENT;

  { ALLEGRO_EVENT  }
  ALLEGRO_EVENT = record
    case Integer of
      0: (_type: ALLEGRO_EVENT_TYPE);
      1: (any: ALLEGRO_ANY_EVENT);
      2: (display: ALLEGRO_DISPLAY_EVENT);
      3: (joystick: ALLEGRO_JOYSTICK_EVENT);
      4: (keyboard: ALLEGRO_KEYBOARD_EVENT);
      5: (mouse: ALLEGRO_MOUSE_EVENT);
      6: (timer: ALLEGRO_TIMER_EVENT);
      7: (touch: ALLEGRO_TOUCH_EVENT);
      8: (user: ALLEGRO_USER_EVENT);
  end;

  { PALLEGRO_EVENT_QUEUE  }
  PALLEGRO_EVENT_QUEUE = Pointer;

  { PPALLEGRO_EVENT_QUEUE  }
  PPALLEGRO_EVENT_QUEUE = ^PALLEGRO_EVENT_QUEUE;

  { PALLEGRO_CONFIG  }
  PALLEGRO_CONFIG = Pointer;

  { PPALLEGRO_CONFIG  }
  PPALLEGRO_CONFIG = ^PALLEGRO_CONFIG;

  { PALLEGRO_CONFIG_SECTION  }
  PALLEGRO_CONFIG_SECTION = Pointer;

  { PPALLEGRO_CONFIG_SECTION  }
  PPALLEGRO_CONFIG_SECTION = ^PALLEGRO_CONFIG_SECTION;

  { PALLEGRO_CONFIG_ENTRY  }
  PALLEGRO_CONFIG_ENTRY = Pointer;

  { PPALLEGRO_CONFIG_ENTRY  }
  PPALLEGRO_CONFIG_ENTRY = ^PALLEGRO_CONFIG_ENTRY;

  { al_fixed  }
  al_fixed = Int32;

  { ALLEGRO_FS_ENTRY  }
  ALLEGRO_FS_ENTRY = record
    vtable: PALLEGRO_FS_INTERFACE;
  end;

  { ALLEGRO_FS_INTERFACE  }
  ALLEGRO_FS_INTERFACE = record
    fs_create_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
    fs_destroy_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
    fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
    fs_update_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
    fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_size: function(e: PALLEGRO_FS_ENTRY): longint; cdecl;
    fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_remove_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
    fs_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
    fs_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
    fs_get_current_directory: function(): PUTF8Char; cdecl;
    fs_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_open_file: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  end;

  { ALLEGRO_DISPLAY_MODE  }
  ALLEGRO_DISPLAY_MODE = record
    width: Integer;
    height: Integer;
    format: Integer;
    refresh_rate: Integer;
  end;

  { _anonymous_type_20  }
  _anonymous_type_20 = record
    axis: array [0..2] of Single;
  end;

  { P_anonymous_type_20  }
  P_anonymous_type_20 = ^_anonymous_type_20;

  { ALLEGRO_JOYSTICK_STATE  }
  ALLEGRO_JOYSTICK_STATE = record
    stick: array [0..15] of _anonymous_type_20;
    button: array [0..31] of Integer;
  end;

  { ALLEGRO_KEYBOARD_STATE  }
  ALLEGRO_KEYBOARD_STATE = record
    display: PALLEGRO_DISPLAY;
    __key_down__internal__: array [0..7] of Cardinal;
  end;

  { ALLEGRO_MOUSE_STATE  }
  ALLEGRO_MOUSE_STATE = record
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    more_axes: array [0..3] of Integer;
    buttons: Integer;
    pressure: Single;
    display: PALLEGRO_DISPLAY;
  end;

  { ALLEGRO_TOUCH_STATE  }
  ALLEGRO_TOUCH_STATE = record
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
    display: PALLEGRO_DISPLAY;
  end;

  { ALLEGRO_TOUCH_INPUT_STATE  }
  ALLEGRO_TOUCH_INPUT_STATE = record
    touches: array [0..15] of ALLEGRO_TOUCH_STATE;
  end;

  { PALLEGRO_HAPTIC  }
  PALLEGRO_HAPTIC = Pointer;

  { PPALLEGRO_HAPTIC  }
  PPALLEGRO_HAPTIC = ^PALLEGRO_HAPTIC;

  { ALLEGRO_HAPTIC_DITRectION  }
  ALLEGRO_HAPTIC_DITRectION = record
    angle: Double;
    radius: Double;
    azimuth: Double;
  end;

  { ALLEGRO_HAPTIC_REPLAY  }
  ALLEGRO_HAPTIC_REPLAY = record
    length: Double;
    delay: Double;
  end;

  { ALLEGRO_HAPTIC_ENVELOPE  }
  ALLEGRO_HAPTIC_ENVELOPE = record
    attack_length: Double;
    attack_level: Double;
    fade_length: Double;
    fade_level: Double;
  end;

  { ALLEGRO_HAPTIC_CONSTANT_EFFECT  }
  ALLEGRO_HAPTIC_CONSTANT_EFFECT = record
    level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  { ALLEGRO_HAPTIC_RAMP_EFFECT  }
  ALLEGRO_HAPTIC_RAMP_EFFECT = record
    start_level: Double;
    end_level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  { ALLEGRO_HAPTIC_CONDITION_EFFECT  }
  ALLEGRO_HAPTIC_CONDITION_EFFECT = record
    right_saturation: Double;
    left_saturation: Double;
    right_coeff: Double;
    left_coeff: Double;
    deadband: Double;
    center: Double;
  end;

  { ALLEGRO_HAPTIC_PERIODIC_EFFECT  }
  ALLEGRO_HAPTIC_PERIODIC_EFFECT = record
    waveform: Integer;
    period: Double;
    magnitude: Double;
    offset: Double;
    phase: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
    custom_len: Integer;
    custom_data: PDouble;
  end;

  { ALLEGRO_HAPTIC_RUMBLE_EFFECT  }
  ALLEGRO_HAPTIC_RUMBLE_EFFECT = record
    strong_magnitude: Double;
    weak_magnitude: Double;
  end;

  { ALLEGRO_HAPTIC_EFFECT_UNION  }
  ALLEGRO_HAPTIC_EFFECT_UNION = record
    case Integer of
      0: (constant: ALLEGRO_HAPTIC_CONSTANT_EFFECT);
      1: (ramp: ALLEGRO_HAPTIC_RAMP_EFFECT);
      2: (periodic: ALLEGRO_HAPTIC_PERIODIC_EFFECT);
      3: (condition: ALLEGRO_HAPTIC_CONDITION_EFFECT);
      4: (rumble: ALLEGRO_HAPTIC_RUMBLE_EFFECT);
  end;

  { ALLEGRO_HAPTIC_EFFECT  }
  ALLEGRO_HAPTIC_EFFECT = record
    _type: Integer;
    direction: ALLEGRO_HAPTIC_DITRectION;
    replay: ALLEGRO_HAPTIC_REPLAY;
    data: ALLEGRO_HAPTIC_EFFECT_UNION;
  end;

  { ALLEGRO_HAPTIC_EFFECT_ID  }
  ALLEGRO_HAPTIC_EFFECT_ID = record
    _haptic: PALLEGRO_HAPTIC;
    _id: Integer;
    _handle: Integer;
    _pointer: Pointer;
    _effect_duration: Double;
    _playing: Boolean;
    _start_time: Double;
    _end_time: Double;
    driver: Pointer;
  end;

  { ALLEGRO_MEMORY_INTERFACE  }
  ALLEGRO_MEMORY_INTERFACE = record
    mi_malloc: function(n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_free: procedure(ptr: Pointer; line: Integer; const _file: PUTF8Char; const func: PUTF8Char); cdecl;
    mi_realloc: function(ptr: Pointer; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_calloc: function(count: NativeUInt; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  end;

  { ALLEGRO_MONITOR_INFO  }
  ALLEGRO_MONITOR_INFO = record
    x1: Integer;
    y1: Integer;
    x2: Integer;
    y2: Integer;
  end;

  { PALLEGRO_MOUSE_CURSOR  }
  PALLEGRO_MOUSE_CURSOR = Pointer;

  { PPALLEGRO_MOUSE_CURSOR  }
  PPALLEGRO_MOUSE_CURSOR = ^PALLEGRO_MOUSE_CURSOR;

  { ALLEGRO_TRANSFORM  }
  ALLEGRO_TRANSFORM = record
    m: array [0..3] of array [0..3] of Single;
  end;

  { PALLEGRO_SHADER  }
  PALLEGRO_SHADER = Pointer;

  { PPALLEGRO_SHADER  }
  PPALLEGRO_SHADER = ^PALLEGRO_SHADER;

  { PALLEGRO_SYSTEM  }
  PALLEGRO_SYSTEM = Pointer;

  { PPALLEGRO_SYSTEM  }
  PPALLEGRO_SYSTEM = ^PALLEGRO_SYSTEM;

  { PALLEGRO_THREAD  }
  PALLEGRO_THREAD = Pointer;

  { PPALLEGRO_THREAD  }
  PPALLEGRO_THREAD = ^PALLEGRO_THREAD;

  { PALLEGRO_MUTEX  }
  PALLEGRO_MUTEX = Pointer;

  { PPALLEGRO_MUTEX  }
  PPALLEGRO_MUTEX = ^PALLEGRO_MUTEX;

  { PALLEGRO_COND  }
  PALLEGRO_COND = Pointer;

  { PPALLEGRO_COND  }
  PPALLEGRO_COND = ^PALLEGRO_COND;

  { ALLEGRO_STATE  }
  ALLEGRO_STATE = record
    _tls: array [0..1023] of UTF8Char;
  end;

  { GLint64  }
  GLint64 = Int64;

  { PGLint64  }
  PGLint64 = ^GLint64;

  { GLuint64  }
  GLuint64 = UInt64;

  { PGLuint64  }
  PGLuint64 = ^GLuint64;

  { GLintptr  }
  GLintptr = NativeInt;

  { GLsizeiptr  }
  GLsizeiptr = NativeInt;

  { GLchar  }
  GLchar = UTF8Char;

  { PGLchar  }
  PGLchar = PUTF8Char;

  { PPGLchar  }
  PPGLchar = ^PGLchar;

  { GLenum  }
  GLenum = Cardinal;

  { GLboolean  }
  GLboolean = Byte;

  { GLbitfield  }
  GLbitfield = Cardinal;

  { GLbyte  }
  GLbyte = Shortint;

  { GLshort  }
  GLshort = SmallInt;

  { GLint  }
  GLint = Integer;

  { GLsizei  }
  GLsizei = Integer;

  { GLubyte  }
  GLubyte = Byte;

  { GLushort  }
  GLushort = Word;

  { GLuint  }
  GLuint = Cardinal;

  { GLfloat  }
  GLfloat = Single;

  { GLclampf  }
  GLclampf = Single;

  { GLdouble  }
  GLdouble = Double;

  { GLclampd  }
  GLclampd = Double;

  { PGLBoolean  }
  PGLBoolean = ^GLBoolean;

  { PPGLBoolean  }
  PPGLBoolean = ^PGLBoolean;

  { PGLEnum  }
  PGLEnum = ^GLEnum;

  { PGLByte  }
  PGLByte = ^GLByte;

  { PGLShort  }
  PGLShort = ^GLShort;

  { PGLInt  }
  PGLInt = ^GLInt;

  { PGLSizei  }
  PGLSizei = ^GLSizei;

  { PGLubyte  }
  PGLubyte = ^GLubyte;

  { PGLushort  }
  PGLushort = ^GLushort;

  { PGLuint  }
  PGLuint = ^GLuint;

  { PGLclampf  }
  PGLclampf = ^GLclampf;

  { PGLfloat  }
  PGLfloat =  ^GLFloat;

  { PGLdouble  }
  PGLdouble = ^GLDouble;

  { PGLclampd  }
  PGLclampd = ^GLclampd;

  { PGLvoid  }
  PGLvoid = Pointer;

  { PPGLvoid  }
  PPGLvoid = ^PGLvoid;

  { PFLOAT  }
  PFLOAT = ^Single;

  { PINT32  }
  PINT32 = ^Integer;

  { PLPVOID  }
  PLPVOID = ^PPointer;

  { PTHandle  }
  PTHandle = ^THandle;

  { INT  }
  INT = Integer;

  { GLDEBUGPROC  }
  GLDEBUGPROC = procedure(source: GLenum; _type: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const _message: PGLchar; const userParam: Pointer); cdecl;

  { PPFNGLCLEARBUFFERDATAPROC  }
  PPFNGLCLEARBUFFERDATAPROC = procedure(target: GLenum; internalformat: GLenum; format: GLenum; _type: GLenum; const data: Pointer); cdecl;

  { PPFNGLCLEARBUFFERSUBDATAPROC  }
  PPFNGLCLEARBUFFERSUBDATAPROC = procedure(target: GLenum; internalformat: GLenum; offset: GLintptr; size: GLsizeiptr; format: GLenum; _type: GLenum; const data: Pointer); cdecl;

  { PPFNGLDISPATCHCOMPUTEPROC  }
  PPFNGLDISPATCHCOMPUTEPROC = procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint); cdecl;

  { PPFNGLDISPATCHCOMPUTEINDITRectPROC  }
  PPFNGLDISPATCHCOMPUTEINDITRectPROC = procedure(indirect: GLintptr); cdecl;

  { PPFNGLCOPYIMAGESUBDATAPROC  }
  PPFNGLCOPYIMAGESUBDATAPROC = procedure(srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; srcWidth: GLsizei; srcHeight: GLsizei; srcDepth: GLsizei); cdecl;

  { PPFNGLFRAMEBUFFERPARAMETERIPROC  }
  PPFNGLFRAMEBUFFERPARAMETERIPROC = procedure(target: GLenum; pname: GLenum; param: GLint); cdecl;

  { PPFNGLGETFRAMEBUFFERPARAMETERIVPROC  }
  PPFNGLGETFRAMEBUFFERPARAMETERIVPROC = procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;

  { PPFNGLGETINTERNALFORMATI64VPROC  }
  PPFNGLGETINTERNALFORMATI64VPROC = procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint64); cdecl;

  { PPFNGLINVALIDATETEXSUBIMAGEPROC  }
  PPFNGLINVALIDATETEXSUBIMAGEPROC = procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei); cdecl;

  { PPFNGLINVALIDATETEXIMAGEPROC  }
  PPFNGLINVALIDATETEXIMAGEPROC = procedure(texture: GLuint; level: GLint); cdecl;

  { PPFNGLINVALIDATEBUFFERSUBDATAPROC  }
  PPFNGLINVALIDATEBUFFERSUBDATAPROC = procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); cdecl;

  { PPFNGLINVALIDATEBUFFERDATAPROC  }
  PPFNGLINVALIDATEBUFFERDATAPROC = procedure(buffer: GLuint); cdecl;

  { PPFNGLINVALIDATEFRAMEBUFFERPROC  }
  PPFNGLINVALIDATEFRAMEBUFFERPROC = procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum); cdecl;

  { PPFNGLINVALIDATESUBFRAMEBUFFERPROC  }
  PPFNGLINVALIDATESUBFRAMEBUFFERPROC = procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;

  { PPFNGLMULTIDRAWARRAYSINDITRectPROC  }
  PPFNGLMULTIDRAWARRAYSINDITRectPROC = procedure(mode: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); cdecl;

  { PPFNGLMULTIDRAWELEMENTSINDITRectPROC  }
  PPFNGLMULTIDRAWELEMENTSINDITRectPROC = procedure(mode: GLenum; _type: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); cdecl;

  { PPFNGLGETPROGRAMINTERFACEIVPROC  }
  PPFNGLGETPROGRAMINTERFACEIVPROC = procedure(_program: GLuint; programInterface: GLenum; pname: GLenum; params: PGLint); cdecl;

  { PPFNGLGETPROGRAMRESOURCEINDEXPROC  }
  PPFNGLGETPROGRAMRESOURCEINDEXPROC = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLuint; cdecl;

  { PPFNGLGETPROGRAMRESOURCENAMEPROC  }
  PPFNGLGETPROGRAMRESOURCENAMEPROC = procedure(_program: GLuint; programInterface: GLenum; index: GLuint; bufSize: GLsizei; length: PGLsizei; name: PGLchar); cdecl;

  { PPFNGLGETPROGRAMRESOURCEIVPROC  }
  PPFNGLGETPROGRAMRESOURCEIVPROC = procedure(_program: GLuint; programInterface: GLenum; index: GLuint; propCount: GLsizei; const props: PGLenum; bufSize: GLsizei; length: PGLsizei; params: PGLint); cdecl;

  { PPFNGLGETPROGRAMRESOURCELOCATIONPROC  }
  PPFNGLGETPROGRAMRESOURCELOCATIONPROC = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; cdecl;

  { PPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC  }
  PPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; cdecl;

  { PPFNGLSHADERSTORAGEBLOCKBINDINGPROC  }
  PPFNGLSHADERSTORAGEBLOCKBINDINGPROC = procedure(_program: GLuint; storageBlockIndex: GLuint; storageBlockBinding: GLuint); cdecl;

  { PPFNGLTEXBUFFERRANGEPROC  }
  PPFNGLTEXBUFFERRANGEPROC = procedure(target: GLenum; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); cdecl;

  { PPFNGLTEXSTORAGE2DMULTISAMPLEPROC  }
  PPFNGLTEXSTORAGE2DMULTISAMPLEPROC = procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { PPFNGLTEXSTORAGE3DMULTISAMPLEPROC  }
  PPFNGLTEXSTORAGE3DMULTISAMPLEPROC = procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { PPFNGLTEXTUREVIEWPROC  }
  PPFNGLTEXTUREVIEWPROC = procedure(texture: GLuint; target: GLenum; origtexture: GLuint; internalformat: GLenum; minlevel: GLuint; numlevels: GLuint; minlayer: GLuint; numlayers: GLuint); cdecl;

  { PPFNGLBINDVERTEXBUFFERPROC  }
  PPFNGLBINDVERTEXBUFFERPROC = procedure(bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); cdecl;

  { PPFNGLVERTEXATTRIBFORMATPROC  }
  PPFNGLVERTEXATTRIBFORMATPROC = procedure(attribindex: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; relativeoffset: GLuint); cdecl;

  { PPFNGLVERTEXATTRIBIFORMATPROC  }
  PPFNGLVERTEXATTRIBIFORMATPROC = procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); cdecl;

  { PPFNGLVERTEXATTRIBLFORMATPROC  }
  PPFNGLVERTEXATTRIBLFORMATPROC = procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); cdecl;

  { PPFNGLVERTEXATTRIBBINDINGPROC  }
  PPFNGLVERTEXATTRIBBINDINGPROC = procedure(attribindex: GLuint; bindingindex: GLuint); cdecl;

  { PPFNGLVERTEXBINDINGDIVISORPROC  }
  PPFNGLVERTEXBINDINGDIVISORPROC = procedure(bindingindex: GLuint; divisor: GLuint); cdecl;

  { PPFNGLDEBUGMESSAGECONTROLPROC  }
  PPFNGLDEBUGMESSAGECONTROLPROC = procedure(source: GLenum; _type: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); cdecl;

  { PPFNGLDEBUGMESSAGEINSERTPROC  }
  PPFNGLDEBUGMESSAGEINSERTPROC = procedure(source: GLenum; _type: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); cdecl;

  { PPFNGLDEBUGMESSAGECALLBACKPROC  }
  PPFNGLDEBUGMESSAGECALLBACKPROC = procedure(callback: GLDEBUGPROC; const userParam: Pointer); cdecl;

  { PPFNGLGETDEBUGMESSAGELOGPROC  }
  PPFNGLGETDEBUGMESSAGELOGPROC = function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; cdecl;

  { PPFNGLPUSHDEBUGGROUPPROC  }
  PPFNGLPUSHDEBUGGROUPPROC = procedure(source: GLenum; id: GLuint; length: GLsizei; const _message: PGLchar); cdecl;

  { PPFNGLPOPDEBUGGROUPPROC  }
  PPFNGLPOPDEBUGGROUPPROC = procedure(); cdecl;

  { PPFNGLOBJECTLABELPROC  }
  PPFNGLOBJECTLABELPROC = procedure(identifier: GLenum; name: GLuint; length: GLsizei; const _label: PGLchar); cdecl;

  { PPFNGLGETOBJECTLABELPROC  }
  PPFNGLGETOBJECTLABELPROC = procedure(identifier: GLenum; name: GLuint; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); cdecl;

  { PPFNGLOBJECTPTRLABELPROC  }
  PPFNGLOBJECTPTRLABELPROC = procedure(const ptr: Pointer; length: GLsizei; const _label: PGLchar); cdecl;

  { PPFNGLGETOBJECTPTRLABELPROC  }
  PPFNGLGETOBJECTPTRLABELPROC = procedure(const ptr: Pointer; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); cdecl;

  { GLintptrARB  }
  GLintptrARB = NativeInt;

  { GLsizeiptrARB  }
  GLsizeiptrARB = NativeInt;

  { GLcharARB  }
  GLcharARB = UTF8Char;

  { PGLcharARB  }
  PGLcharARB = PUTF8Char;

  { PPGLcharARB  }
  PPGLcharARB = ^PGLcharARB;

  { GLhandleARB  }
  GLhandleARB = Cardinal;

  { PGLhandleARB  }
  PGLhandleARB = ^GLhandleARB;

  { GLsync  }
  GLsync = Pointer;

  { PGLsync  }
  PGLsync = ^GLsync;

  { GLhalfNV  }
  GLhalfNV = Smallint;

  { PGLhalfNV  }
  PGLhalfNV = ^GLhalfNV;

  { GLfixed  }
  GLfixed = Integer;

  { PGLfixed  }
  PGLfixed = ^GLfixed;

  { GLclampx  }
  GLclampx = Integer;

  { PGLclampx  }
  PGLclampx = ^GLclampx;

  { GLint64EXT  }
  GLint64EXT = Int64;

  { PGLint64EXT  }
  PGLint64EXT = ^GLint64EXT;

  { GLuint64EXT  }
  GLuint64EXT = UInt64;

  { PGLuint64EXT  }
  PGLuint64EXT = ^GLuint64EXT;

  { HPBUFFERARB__  }
  HPBUFFERARB__ = record
    unused: Integer;
  end;

  { HPBUFFERARB  }
  HPBUFFERARB = PHPBUFFERARB__;

  { HPBUFFEREXT__  }
  HPBUFFEREXT__ = record
    unused: Integer;
  end;

  { HPBUFFEREXT  }
  HPBUFFEREXT = PHPBUFFEREXT__;

  { HVIDEOOUTPUTDEVICENV__  }
  HVIDEOOUTPUTDEVICENV__ = record
    unused: Integer;
  end;

  { HVIDEOOUTPUTDEVICENV  }
  HVIDEOOUTPUTDEVICENV = PHVIDEOOUTPUTDEVICENV__;

  { PHVIDEOOUTPUTDEVICENV  }
  PHVIDEOOUTPUTDEVICENV = ^HVIDEOOUTPUTDEVICENV;

  { HPVIDEODEV__  }
  HPVIDEODEV__ = record
    unused: Integer;
  end;

  { HPVIDEODEV  }
  HPVIDEODEV = PHPVIDEODEV__;

  { PHPVIDEODEV  }
  PHPVIDEODEV = ^HPVIDEODEV;

  { HPGPUNV__  }
  HPGPUNV__ = record
    unused: Integer;
  end;

  { HPGPUNV  }
  HPGPUNV = PHPGPUNV__;

  { HGPUNV__  }
  HGPUNV__ = record
    unused: Integer;
  end;

  { HGPUNV  }
  HGPUNV = PHGPUNV__;

  { PHGPUNV  }
  PHGPUNV = ^HGPUNV;

  { _GPU_DEVICE  }
  _GPU_DEVICE = record
    cb: DWORD;
    DeviceName: array [0..31] of CHAR;
    DeviceString: array [0..127] of CHAR;
    Flags: DWORD;
    rcVirtualScreen: TRect;
  end;

  { GPU_DEVICE  }
  GPU_DEVICE = _GPU_DEVICE;

  { PGPU_DEVICE  }
  PGPU_DEVICE = P_GPU_DEVICE;

  { HVIDEOINPUTDEVICENV__  }
  HVIDEOINPUTDEVICENV__ = record
    unused: Integer;
  end;

  { HVIDEOINPUTDEVICENV  }
  HVIDEOINPUTDEVICENV = PHVIDEOINPUTDEVICENV__;

  { PHVIDEOINPUTDEVICENV  }
  PHVIDEOINPUTDEVICENV = ^HVIDEOINPUTDEVICENV;

  { _ALLEGRO_glBlendColor_t  }
  _ALLEGRO_glBlendColor_t = procedure(p1: GLclampf; p2: GLclampf; p3: GLclampf; p4: GLclampf); cdecl;

  { _ALLEGRO_glBlendEquation_t  }
  _ALLEGRO_glBlendEquation_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glDrawRangeElements_t  }
  _ALLEGRO_glDrawRangeElements_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLsizei; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glColorTable_t  }
  _ALLEGRO_glColorTable_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glColorTableParameterfv_t  }
  _ALLEGRO_glColorTableParameterfv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glColorTableParameteriv_t  }
  _ALLEGRO_glColorTableParameteriv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glCopyColorTable_t  }
  _ALLEGRO_glCopyColorTable_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glGetColorTable_t  }
  _ALLEGRO_glGetColorTable_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetColorTableParameterfv_t  }
  _ALLEGRO_glGetColorTableParameterfv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetColorTableParameteriv_t  }
  _ALLEGRO_glGetColorTableParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glColorSubTable_t  }
  _ALLEGRO_glColorSubTable_t = procedure(p1: GLenum; p2: GLsizei; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glCopyColorSubTable_t  }
  _ALLEGRO_glCopyColorSubTable_t = procedure(p1: GLenum; p2: GLsizei; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glTexImage3D_t  }
  _ALLEGRO_glTexImage3D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLsizei; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glTexSubImage3D_t  }
  _ALLEGRO_glTexSubImage3D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLsizei; p9: GLenum; p10: GLenum; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glCopyTexSubImage3D_t  }
  _ALLEGRO_glCopyTexSubImage3D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLsizei; p9: GLsizei); cdecl;

  { _ALLEGRO_glConvolutionFilter1D_t  }
  _ALLEGRO_glConvolutionFilter1D_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glConvolutionFilter2D_t  }
  _ALLEGRO_glConvolutionFilter2D_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei; p5: GLenum; p6: GLenum; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glConvolutionParameterf_t  }
  _ALLEGRO_glConvolutionParameterf_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glConvolutionParameterfv_t  }
  _ALLEGRO_glConvolutionParameterfv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glConvolutionParameteri_t  }
  _ALLEGRO_glConvolutionParameteri_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glConvolutionParameteriv_t  }
  _ALLEGRO_glConvolutionParameteriv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glCopyConvolutionFilter1D_t  }
  _ALLEGRO_glCopyConvolutionFilter1D_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glCopyConvolutionFilter2D_t  }
  _ALLEGRO_glCopyConvolutionFilter2D_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLsizei); cdecl;

  { _ALLEGRO_glGetConvolutionFilter_t  }
  _ALLEGRO_glGetConvolutionFilter_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetConvolutionParameterfv_t  }
  _ALLEGRO_glGetConvolutionParameterfv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetConvolutionParameteriv_t  }
  _ALLEGRO_glGetConvolutionParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetSeparableFilter_t  }
  _ALLEGRO_glGetSeparableFilter_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid; p5: PGLvoid; p6: PGLvoid); cdecl;

  { _ALLEGRO_glSeparableFilter2D_t  }
  _ALLEGRO_glSeparableFilter2D_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei; p5: GLenum; p6: GLenum; const p7: PGLvoid; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glGetHistogram_t  }
  _ALLEGRO_glGetHistogram_t = procedure(p1: GLenum; p2: GLboolean; p3: GLenum; p4: GLenum; p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetHistogramParameterfv_t  }
  _ALLEGRO_glGetHistogramParameterfv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetHistogramParameteriv_t  }
  _ALLEGRO_glGetHistogramParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetMinmax_t  }
  _ALLEGRO_glGetMinmax_t = procedure(p1: GLenum; p2: GLboolean; p3: GLenum; p4: GLenum; p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetMinmaxParameterfv_t  }
  _ALLEGRO_glGetMinmaxParameterfv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetMinmaxParameteriv_t  }
  _ALLEGRO_glGetMinmaxParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glHistogram_t  }
  _ALLEGRO_glHistogram_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; p4: GLboolean); cdecl;

  { _ALLEGRO_glMinmax_t  }
  _ALLEGRO_glMinmax_t = procedure(p1: GLenum; p2: GLenum; p3: GLboolean); cdecl;

  { _ALLEGRO_glResetHistogram_t  }
  _ALLEGRO_glResetHistogram_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glResetMinmax_t  }
  _ALLEGRO_glResetMinmax_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glActiveTexture_t  }
  _ALLEGRO_glActiveTexture_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glClientActiveTexture_t  }
  _ALLEGRO_glClientActiveTexture_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMultiTexCoord1d_t  }
  _ALLEGRO_glMultiTexCoord1d_t = procedure(p1: GLenum; p2: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord1dv_t  }
  _ALLEGRO_glMultiTexCoord1dv_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord1f_t  }
  _ALLEGRO_glMultiTexCoord1f_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord1fv_t  }
  _ALLEGRO_glMultiTexCoord1fv_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord1i_t  }
  _ALLEGRO_glMultiTexCoord1i_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord1iv_t  }
  _ALLEGRO_glMultiTexCoord1iv_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord1s_t  }
  _ALLEGRO_glMultiTexCoord1s_t = procedure(p1: GLenum; p2: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord1sv_t  }
  _ALLEGRO_glMultiTexCoord1sv_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord2d_t  }
  _ALLEGRO_glMultiTexCoord2d_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord2dv_t  }
  _ALLEGRO_glMultiTexCoord2dv_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord2f_t  }
  _ALLEGRO_glMultiTexCoord2f_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord2fv_t  }
  _ALLEGRO_glMultiTexCoord2fv_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord2i_t  }
  _ALLEGRO_glMultiTexCoord2i_t = procedure(p1: GLenum; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord2iv_t  }
  _ALLEGRO_glMultiTexCoord2iv_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord2s_t  }
  _ALLEGRO_glMultiTexCoord2s_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord2sv_t  }
  _ALLEGRO_glMultiTexCoord2sv_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord3d_t  }
  _ALLEGRO_glMultiTexCoord3d_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord3dv_t  }
  _ALLEGRO_glMultiTexCoord3dv_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord3f_t  }
  _ALLEGRO_glMultiTexCoord3f_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord3fv_t  }
  _ALLEGRO_glMultiTexCoord3fv_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord3i_t  }
  _ALLEGRO_glMultiTexCoord3i_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord3iv_t  }
  _ALLEGRO_glMultiTexCoord3iv_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord3s_t  }
  _ALLEGRO_glMultiTexCoord3s_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord3sv_t  }
  _ALLEGRO_glMultiTexCoord3sv_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord4d_t  }
  _ALLEGRO_glMultiTexCoord4d_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord4dv_t  }
  _ALLEGRO_glMultiTexCoord4dv_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord4f_t  }
  _ALLEGRO_glMultiTexCoord4f_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord4fv_t  }
  _ALLEGRO_glMultiTexCoord4fv_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord4i_t  }
  _ALLEGRO_glMultiTexCoord4i_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord4iv_t  }
  _ALLEGRO_glMultiTexCoord4iv_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord4s_t  }
  _ALLEGRO_glMultiTexCoord4s_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord4sv_t  }
  _ALLEGRO_glMultiTexCoord4sv_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glLoadTransposeMatrixf_t  }
  _ALLEGRO_glLoadTransposeMatrixf_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glLoadTransposeMatrixd_t  }
  _ALLEGRO_glLoadTransposeMatrixd_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glMultTransposeMatrixf_t  }
  _ALLEGRO_glMultTransposeMatrixf_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glMultTransposeMatrixd_t  }
  _ALLEGRO_glMultTransposeMatrixd_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glSampleCoverage_t  }
  _ALLEGRO_glSampleCoverage_t = procedure(p1: GLclampf; p2: GLboolean); cdecl;

  { _ALLEGRO_glCompressedTexImage3D_t  }
  _ALLEGRO_glCompressedTexImage3D_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexImage2D_t  }
  _ALLEGRO_glCompressedTexImage2D_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLint; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexImage1D_t  }
  _ALLEGRO_glCompressedTexImage1D_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLint; p6: GLsizei; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage3D_t  }
  _ALLEGRO_glCompressedTexSubImage3D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLsizei; p9: GLenum; p10: GLsizei; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage2D_t  }
  _ALLEGRO_glCompressedTexSubImage2D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLsizei; p6: GLsizei; p7: GLenum; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage1D_t  }
  _ALLEGRO_glCompressedTexSubImage1D_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLsizei; p5: GLenum; p6: GLsizei; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glGetCompressedTexImage_t  }
  _ALLEGRO_glGetCompressedTexImage_t = procedure(p1: GLenum; p2: GLint; p3: PGLvoid); cdecl;

  { _ALLEGRO_glBlendFuncSeparate_t  }
  _ALLEGRO_glBlendFuncSeparate_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glFogCoordf_t  }
  _ALLEGRO_glFogCoordf_t = procedure(p1: GLfloat); cdecl;

  { _ALLEGRO_glFogCoordfv_t  }
  _ALLEGRO_glFogCoordfv_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glFogCoordd_t  }
  _ALLEGRO_glFogCoordd_t = procedure(p1: GLdouble); cdecl;

  { _ALLEGRO_glFogCoorddv_t  }
  _ALLEGRO_glFogCoorddv_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glFogCoordPointer_t  }
  _ALLEGRO_glFogCoordPointer_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glMultiDrawArrays_t  }
  _ALLEGRO_glMultiDrawArrays_t = procedure(p1: GLenum; p2: PGLint; p3: PGLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawElements_t  }
  _ALLEGRO_glMultiDrawElements_t = procedure(p1: GLenum; const p2: PGLsizei; p3: GLenum; p4: PPGLvoid; p5: GLsizei); cdecl;

  { _ALLEGRO_glPointParameterf_t  }
  _ALLEGRO_glPointParameterf_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glPointParameterfv_t  }
  _ALLEGRO_glPointParameterfv_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glPointParameteri_t  }
  _ALLEGRO_glPointParameteri_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glPointParameteriv_t  }
  _ALLEGRO_glPointParameteriv_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glSecondaryColor3b_t  }
  _ALLEGRO_glSecondaryColor3b_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glSecondaryColor3bv_t  }
  _ALLEGRO_glSecondaryColor3bv_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glSecondaryColor3d_t  }
  _ALLEGRO_glSecondaryColor3d_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glSecondaryColor3dv_t  }
  _ALLEGRO_glSecondaryColor3dv_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glSecondaryColor3f_t  }
  _ALLEGRO_glSecondaryColor3f_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glSecondaryColor3fv_t  }
  _ALLEGRO_glSecondaryColor3fv_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glSecondaryColor3i_t  }
  _ALLEGRO_glSecondaryColor3i_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glSecondaryColor3iv_t  }
  _ALLEGRO_glSecondaryColor3iv_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glSecondaryColor3s_t  }
  _ALLEGRO_glSecondaryColor3s_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glSecondaryColor3sv_t  }
  _ALLEGRO_glSecondaryColor3sv_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glSecondaryColor3ub_t  }
  _ALLEGRO_glSecondaryColor3ub_t = procedure(p1: GLubyte; p2: GLubyte; p3: GLubyte); cdecl;

  { _ALLEGRO_glSecondaryColor3ubv_t  }
  _ALLEGRO_glSecondaryColor3ubv_t = procedure(const p1: PGLubyte); cdecl;

  { _ALLEGRO_glSecondaryColor3ui_t  }
  _ALLEGRO_glSecondaryColor3ui_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glSecondaryColor3uiv_t  }
  _ALLEGRO_glSecondaryColor3uiv_t = procedure(const p1: PGLuint); cdecl;

  { _ALLEGRO_glSecondaryColor3us_t  }
  _ALLEGRO_glSecondaryColor3us_t = procedure(p1: GLushort; p2: GLushort; p3: GLushort); cdecl;

  { _ALLEGRO_glSecondaryColor3usv_t  }
  _ALLEGRO_glSecondaryColor3usv_t = procedure(const p1: PGLushort); cdecl;

  { _ALLEGRO_glSecondaryColorPointer_t  }
  _ALLEGRO_glSecondaryColorPointer_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glWindowPos2d_t  }
  _ALLEGRO_glWindowPos2d_t = procedure(p1: GLdouble; p2: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos2dv_t  }
  _ALLEGRO_glWindowPos2dv_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos2f_t  }
  _ALLEGRO_glWindowPos2f_t = procedure(p1: GLfloat; p2: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos2fv_t  }
  _ALLEGRO_glWindowPos2fv_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos2i_t  }
  _ALLEGRO_glWindowPos2i_t = procedure(p1: GLint; p2: GLint); cdecl;

  { _ALLEGRO_glWindowPos2iv_t  }
  _ALLEGRO_glWindowPos2iv_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos2s_t  }
  _ALLEGRO_glWindowPos2s_t = procedure(p1: GLshort; p2: GLshort); cdecl;

  { _ALLEGRO_glWindowPos2sv_t  }
  _ALLEGRO_glWindowPos2sv_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glWindowPos3d_t  }
  _ALLEGRO_glWindowPos3d_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos3dv_t  }
  _ALLEGRO_glWindowPos3dv_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos3f_t  }
  _ALLEGRO_glWindowPos3f_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos3fv_t  }
  _ALLEGRO_glWindowPos3fv_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos3i_t  }
  _ALLEGRO_glWindowPos3i_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glWindowPos3iv_t  }
  _ALLEGRO_glWindowPos3iv_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos3s_t  }
  _ALLEGRO_glWindowPos3s_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glWindowPos3sv_t  }
  _ALLEGRO_glWindowPos3sv_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glBindBuffer_t  }
  _ALLEGRO_glBindBuffer_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteBuffers_t  }
  _ALLEGRO_glDeleteBuffers_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenBuffers_t  }
  _ALLEGRO_glGenBuffers_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsBuffer_t  }
  _ALLEGRO_glIsBuffer_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBufferData_t  }
  _ALLEGRO_glBufferData_t = procedure(p1: GLenum; p2: GLsizeiptr; const p3: PGLvoid; p4: GLenum); cdecl;

  { _ALLEGRO_glBufferSubData_t  }
  _ALLEGRO_glBufferSubData_t = procedure(p1: GLenum; p2: GLintptr; p3: GLsizeiptr; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetBufferSubData_t  }
  _ALLEGRO_glGetBufferSubData_t = procedure(p1: GLenum; p2: GLintptr; p3: GLsizeiptr; p4: PGLvoid); cdecl;

  { _ALLEGRO_glMapBuffer_t  }
  _ALLEGRO_glMapBuffer_t = function(p1: GLenum; p2: GLenum): PGLvoid; cdecl;

  { _ALLEGRO_glUnmapBuffer_t  }
  _ALLEGRO_glUnmapBuffer_t = function(p1: GLenum): GLboolean; cdecl;

  { _ALLEGRO_glGetBufferParameteriv_t  }
  _ALLEGRO_glGetBufferParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetBufferPointerv_t  }
  _ALLEGRO_glGetBufferPointerv_t = procedure(p1: GLenum; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glGenQueries_t  }
  _ALLEGRO_glGenQueries_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glDeleteQueries_t  }
  _ALLEGRO_glDeleteQueries_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glIsQuery_t  }
  _ALLEGRO_glIsQuery_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBeginQuery_t  }
  _ALLEGRO_glBeginQuery_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glEndQuery_t  }
  _ALLEGRO_glEndQuery_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glGetQueryiv_t  }
  _ALLEGRO_glGetQueryiv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetQueryObjectiv_t  }
  _ALLEGRO_glGetQueryObjectiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetQueryObjectuiv_t  }
  _ALLEGRO_glGetQueryObjectuiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLuint); cdecl;

  { _ALLEGRO_glBlendEquationSeparate_t  }
  _ALLEGRO_glBlendEquationSeparate_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glCreateProgram_t  }
  _ALLEGRO_glCreateProgram_t = function(): GLuint; cdecl;

  { _ALLEGRO_glCreateShader_t  }
  _ALLEGRO_glCreateShader_t = function(p1: GLenum): GLuint; cdecl;

  { _ALLEGRO_glDeleteProgram_t  }
  _ALLEGRO_glDeleteProgram_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDeleteShader_t  }
  _ALLEGRO_glDeleteShader_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glAttachShader_t  }
  _ALLEGRO_glAttachShader_t = procedure(p1: GLuint; p2: GLuint); cdecl;

  { _ALLEGRO_glDetachShader_t  }
  _ALLEGRO_glDetachShader_t = procedure(p1: GLuint; p2: GLuint); cdecl;

  { _ALLEGRO_glShaderSource_t  }
  _ALLEGRO_glShaderSource_t = procedure(p1: GLuint; p2: GLsizei; p3: PPGLchar; const p4: PGLint); cdecl;

  { _ALLEGRO_glCompileShader_t  }
  _ALLEGRO_glCompileShader_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glIsProgram_t  }
  _ALLEGRO_glIsProgram_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glIsShader_t  }
  _ALLEGRO_glIsShader_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glLinkProgram_t  }
  _ALLEGRO_glLinkProgram_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glUseProgram_t  }
  _ALLEGRO_glUseProgram_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glValidateProgram_t  }
  _ALLEGRO_glValidateProgram_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glUniform1f_t  }
  _ALLEGRO_glUniform1f_t = procedure(p1: GLint; p2: GLfloat); cdecl;

  { _ALLEGRO_glUniform2f_t  }
  _ALLEGRO_glUniform2f_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glUniform3f_t  }
  _ALLEGRO_glUniform3f_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glUniform4f_t  }
  _ALLEGRO_glUniform4f_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glUniform1i_t  }
  _ALLEGRO_glUniform1i_t = procedure(p1: GLint; p2: GLint); cdecl;

  { _ALLEGRO_glUniform2i_t  }
  _ALLEGRO_glUniform2i_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glUniform3i_t  }
  _ALLEGRO_glUniform3i_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glUniform4i_t  }
  _ALLEGRO_glUniform4i_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glUniform1fv_t  }
  _ALLEGRO_glUniform1fv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform2fv_t  }
  _ALLEGRO_glUniform2fv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform3fv_t  }
  _ALLEGRO_glUniform3fv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform4fv_t  }
  _ALLEGRO_glUniform4fv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform1iv_t  }
  _ALLEGRO_glUniform1iv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLint); cdecl;

  { _ALLEGRO_glUniform2iv_t  }
  _ALLEGRO_glUniform2iv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLint); cdecl;

  { _ALLEGRO_glUniform3iv_t  }
  _ALLEGRO_glUniform3iv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLint); cdecl;

  { _ALLEGRO_glUniform4iv_t  }
  _ALLEGRO_glUniform4iv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLint); cdecl;

  { _ALLEGRO_glUniformMatrix2fv_t  }
  _ALLEGRO_glUniformMatrix2fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix3fv_t  }
  _ALLEGRO_glUniformMatrix3fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix4fv_t  }
  _ALLEGRO_glUniformMatrix4fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetShaderfv_t  }
  _ALLEGRO_glGetShaderfv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetShaderiv_t  }
  _ALLEGRO_glGetShaderiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetProgramfv_t  }
  _ALLEGRO_glGetProgramfv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramiv_t  }
  _ALLEGRO_glGetProgramiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetShaderInfoLog_t  }
  _ALLEGRO_glGetShaderInfoLog_t = procedure(p1: GLuint; p2: GLsizei; p3: PGLsizei; p4: PGLchar); cdecl;

  { _ALLEGRO_glGetProgramInfoLog_t  }
  _ALLEGRO_glGetProgramInfoLog_t = procedure(p1: GLuint; p2: GLsizei; p3: PGLsizei; p4: PGLchar); cdecl;

  { _ALLEGRO_glGetAttachedShaders_t  }
  _ALLEGRO_glGetAttachedShaders_t = procedure(p1: GLuint; p2: GLsizei; p3: PGLsizei; p4: PGLuint); cdecl;

  { _ALLEGRO_glGetUniformLocation_t  }
  _ALLEGRO_glGetUniformLocation_t = function(p1: GLuint; const p2: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGetActiveUniform_t  }
  _ALLEGRO_glGetActiveUniform_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLint; p6: PGLenum; p7: PGLchar); cdecl;

  { _ALLEGRO_glGetUniformfv_t  }
  _ALLEGRO_glGetUniformfv_t = procedure(p1: GLuint; p2: GLint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetUniformiv_t  }
  _ALLEGRO_glGetUniformiv_t = procedure(p1: GLuint; p2: GLint; p3: PGLint); cdecl;

  { _ALLEGRO_glGetShaderSource_t  }
  _ALLEGRO_glGetShaderSource_t = procedure(p1: GLuint; p2: GLsizei; p3: PGLsizei; p4: PGLchar); cdecl;

  { _ALLEGRO_glVertexAttrib1f_t  }
  _ALLEGRO_glVertexAttrib1f_t = procedure(p1: GLuint; p2: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1s_t  }
  _ALLEGRO_glVertexAttrib1s_t = procedure(p1: GLuint; p2: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib1d_t  }
  _ALLEGRO_glVertexAttrib1d_t = procedure(p1: GLuint; p2: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2f_t  }
  _ALLEGRO_glVertexAttrib2f_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2s_t  }
  _ALLEGRO_glVertexAttrib2s_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2d_t  }
  _ALLEGRO_glVertexAttrib2d_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3f_t  }
  _ALLEGRO_glVertexAttrib3f_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3s_t  }
  _ALLEGRO_glVertexAttrib3s_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3d_t  }
  _ALLEGRO_glVertexAttrib3d_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4f_t  }
  _ALLEGRO_glVertexAttrib4f_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4s_t  }
  _ALLEGRO_glVertexAttrib4s_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4d_t  }
  _ALLEGRO_glVertexAttrib4d_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4Nub_t  }
  _ALLEGRO_glVertexAttrib4Nub_t = procedure(p1: GLuint; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib1fv_t  }
  _ALLEGRO_glVertexAttrib1fv_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1sv_t  }
  _ALLEGRO_glVertexAttrib1sv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib1dv_t  }
  _ALLEGRO_glVertexAttrib1dv_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2fv_t  }
  _ALLEGRO_glVertexAttrib2fv_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2sv_t  }
  _ALLEGRO_glVertexAttrib2sv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2dv_t  }
  _ALLEGRO_glVertexAttrib2dv_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3fv_t  }
  _ALLEGRO_glVertexAttrib3fv_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3sv_t  }
  _ALLEGRO_glVertexAttrib3sv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3dv_t  }
  _ALLEGRO_glVertexAttrib3dv_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4fv_t  }
  _ALLEGRO_glVertexAttrib4fv_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4sv_t  }
  _ALLEGRO_glVertexAttrib4sv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4dv_t  }
  _ALLEGRO_glVertexAttrib4dv_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4iv_t  }
  _ALLEGRO_glVertexAttrib4iv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttrib4bv_t  }
  _ALLEGRO_glVertexAttrib4bv_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttrib4ubv_t  }
  _ALLEGRO_glVertexAttrib4ubv_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4usv_t  }
  _ALLEGRO_glVertexAttrib4usv_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttrib4uiv_t  }
  _ALLEGRO_glVertexAttrib4uiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttrib4Nbv_t  }
  _ALLEGRO_glVertexAttrib4Nbv_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttrib4Nsv_t  }
  _ALLEGRO_glVertexAttrib4Nsv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4Niv_t  }
  _ALLEGRO_glVertexAttrib4Niv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttrib4Nubv_t  }
  _ALLEGRO_glVertexAttrib4Nubv_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4Nusv_t  }
  _ALLEGRO_glVertexAttrib4Nusv_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttrib4Nuiv_t  }
  _ALLEGRO_glVertexAttrib4Nuiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribPointer_t  }
  _ALLEGRO_glVertexAttribPointer_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLboolean; p5: GLsizei; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glEnableVertexAttribArray_t  }
  _ALLEGRO_glEnableVertexAttribArray_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDisableVertexAttribArray_t  }
  _ALLEGRO_glDisableVertexAttribArray_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glBindAttribLocation_t  }
  _ALLEGRO_glBindAttribLocation_t = procedure(p1: GLuint; p2: GLuint; const p3: PGLchar); cdecl;

  { _ALLEGRO_glGetActiveAttrib_t  }
  _ALLEGRO_glGetActiveAttrib_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLint; p6: PGLenum; p7: PGLchar); cdecl;

  { _ALLEGRO_glGetAttribLocation_t  }
  _ALLEGRO_glGetAttribLocation_t = function(p1: GLuint; const p2: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGetVertexAttribdv_t  }
  _ALLEGRO_glGetVertexAttribdv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetVertexAttribfv_t  }
  _ALLEGRO_glGetVertexAttribfv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVertexAttribiv_t  }
  _ALLEGRO_glGetVertexAttribiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribPointerv_t  }
  _ALLEGRO_glGetVertexAttribPointerv_t = procedure(p1: GLuint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glDrawBuffers_t  }
  _ALLEGRO_glDrawBuffers_t = procedure(n: GLsizei; const p2: PGLenum); cdecl;

  { _ALLEGRO_glStencilOpSeparate_t  }
  _ALLEGRO_glStencilOpSeparate_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glStencilFuncSeparate_t  }
  _ALLEGRO_glStencilFuncSeparate_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLuint); cdecl;

  { _ALLEGRO_glStencilMaskSeparate_t  }
  _ALLEGRO_glStencilMaskSeparate_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glUniformMatrix2x3fv_t  }
  _ALLEGRO_glUniformMatrix2x3fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix3x2fv_t  }
  _ALLEGRO_glUniformMatrix3x2fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix2x4fv_t  }
  _ALLEGRO_glUniformMatrix2x4fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix4x2fv_t  }
  _ALLEGRO_glUniformMatrix4x2fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix3x4fv_t  }
  _ALLEGRO_glUniformMatrix3x4fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix4x3fv_t  }
  _ALLEGRO_glUniformMatrix4x3fv_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glColorMaski_t  }
  _ALLEGRO_glColorMaski_t = procedure(p1: GLuint; p2: GLboolean; p3: GLboolean; p4: GLboolean; p5: GLboolean); cdecl;

  { _ALLEGRO_glGetBooleani_v_t  }
  _ALLEGRO_glGetBooleani_v_t = procedure(p1: GLenum; p2: GLuint; p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetIntegeri_v_t  }
  _ALLEGRO_glGetIntegeri_v_t = procedure(p1: GLenum; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glEnablei_t  }
  _ALLEGRO_glEnablei_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDisablei_t  }
  _ALLEGRO_glDisablei_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glIsEnabledi_t  }
  _ALLEGRO_glIsEnabledi_t = function(p1: GLenum; p2: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBeginTransformFeedback_t  }
  _ALLEGRO_glBeginTransformFeedback_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glEndTransformFeedback_t  }
  _ALLEGRO_glEndTransformFeedback_t = procedure(); cdecl;

  { _ALLEGRO_glBindBufferRange_t  }
  _ALLEGRO_glBindBufferRange_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLintptr; p5: GLsizeiptr); cdecl;

  { _ALLEGRO_glBindBufferBase_t  }
  _ALLEGRO_glBindBufferBase_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glTransformFeedbackVaryings_t  }
  _ALLEGRO_glTransformFeedbackVaryings_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLint; p4: GLenum); cdecl;

  { _ALLEGRO_glGetTransformFeedbackVarying_t  }
  _ALLEGRO_glGetTransformFeedbackVarying_t = procedure(p1: GLuint; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glClampColor_t  }
  _ALLEGRO_glClampColor_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glBeginConditionalRender_t  }
  _ALLEGRO_glBeginConditionalRender_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glEndConditionalRender_t  }
  _ALLEGRO_glEndConditionalRender_t = procedure(); cdecl;

  { _ALLEGRO_glVertexAttribI1i_t  }
  _ALLEGRO_glVertexAttribI1i_t = procedure(p1: GLuint; p2: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI2i_t  }
  _ALLEGRO_glVertexAttribI2i_t = procedure(p1: GLuint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI3i_t  }
  _ALLEGRO_glVertexAttribI3i_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI4i_t  }
  _ALLEGRO_glVertexAttribI4i_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI1ui_t  }
  _ALLEGRO_glVertexAttribI1ui_t = procedure(p1: GLuint; p2: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI2ui_t  }
  _ALLEGRO_glVertexAttribI2ui_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI3ui_t  }
  _ALLEGRO_glVertexAttribI3ui_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4ui_t  }
  _ALLEGRO_glVertexAttribI4ui_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI1iv_t  }
  _ALLEGRO_glVertexAttribI1iv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI2iv_t  }
  _ALLEGRO_glVertexAttribI2iv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI3iv_t  }
  _ALLEGRO_glVertexAttribI3iv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI4iv_t  }
  _ALLEGRO_glVertexAttribI4iv_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI1uiv_t  }
  _ALLEGRO_glVertexAttribI1uiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI2uiv_t  }
  _ALLEGRO_glVertexAttribI2uiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI3uiv_t  }
  _ALLEGRO_glVertexAttribI3uiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4uiv_t  }
  _ALLEGRO_glVertexAttribI4uiv_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4bv_t  }
  _ALLEGRO_glVertexAttribI4bv_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttribI4sv_t  }
  _ALLEGRO_glVertexAttribI4sv_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribI4ubv_t  }
  _ALLEGRO_glVertexAttribI4ubv_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttribI4usv_t  }
  _ALLEGRO_glVertexAttribI4usv_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttribIPointer_t  }
  _ALLEGRO_glVertexAttribIPointer_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetVertexAttribIiv_t  }
  _ALLEGRO_glGetVertexAttribIiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribIuiv_t  }
  _ALLEGRO_glGetVertexAttribIuiv_t = procedure(p1: GLuint; p2: GLenum; p3: PGLuint); cdecl;

  { _ALLEGRO_glGetUniformuiv_t  }
  _ALLEGRO_glGetUniformuiv_t = procedure(p1: GLuint; p2: GLint; p3: PGLuint); cdecl;

  { _ALLEGRO_glBindFragDataLocation_t  }
  _ALLEGRO_glBindFragDataLocation_t = procedure(p1: GLuint; p2: GLuint; const p3: PGLchar); cdecl;

  { _ALLEGRO_glGetFragDataLocation_t  }
  _ALLEGRO_glGetFragDataLocation_t = function(p1: GLuint; const p2: PGLchar): GLint; cdecl;

  { _ALLEGRO_glUniform1ui_t  }
  _ALLEGRO_glUniform1ui_t = procedure(p1: GLint; p2: GLuint); cdecl;

  { _ALLEGRO_glUniform2ui_t  }
  _ALLEGRO_glUniform2ui_t = procedure(p1: GLint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glUniform3ui_t  }
  _ALLEGRO_glUniform3ui_t = procedure(p1: GLint; p2: GLuint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glUniform4ui_t  }
  _ALLEGRO_glUniform4ui_t = procedure(p1: GLint; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glUniform1uiv_t  }
  _ALLEGRO_glUniform1uiv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform2uiv_t  }
  _ALLEGRO_glUniform2uiv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform3uiv_t  }
  _ALLEGRO_glUniform3uiv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform4uiv_t  }
  _ALLEGRO_glUniform4uiv_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glTexParameterIiv_t  }
  _ALLEGRO_glTexParameterIiv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glTexParameterIuiv_t  }
  _ALLEGRO_glTexParameterIuiv_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLuint); cdecl;

  { _ALLEGRO_glGetTexParameterIiv_t  }
  _ALLEGRO_glGetTexParameterIiv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetTexParameterIuiv_t  }
  _ALLEGRO_glGetTexParameterIuiv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLuint); cdecl;

  { _ALLEGRO_glClearBufferiv_t  }
  _ALLEGRO_glClearBufferiv_t = procedure(p1: GLenum; p2: GLint; const p3: PGLint); cdecl;

  { _ALLEGRO_glClearBufferuiv_t  }
  _ALLEGRO_glClearBufferuiv_t = procedure(p1: GLenum; p2: GLint; const p3: PGLuint); cdecl;

  { _ALLEGRO_glClearBufferfv_t  }
  _ALLEGRO_glClearBufferfv_t = procedure(p1: GLenum; p2: GLint; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glClearBufferfi_t  }
  _ALLEGRO_glClearBufferfi_t = procedure(p1: GLenum; p2: GLint; p3: GLfloat; p4: GLint); cdecl;

  { _ALLEGRO_glGetStringi_t  }
  _ALLEGRO_glGetStringi_t = function(p1: GLenum; p2: GLuint): PGLubyte; cdecl;

  { _ALLEGRO_glDrawArraysInstanced_t  }
  _ALLEGRO_glDrawArraysInstanced_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glDrawElementsInstanced_t  }
  _ALLEGRO_glDrawElementsInstanced_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; const p4: PGLvoid; p5: GLsizei); cdecl;

  { _ALLEGRO_glTexBuffer_t  }
  _ALLEGRO_glTexBuffer_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glPrimitiveRestartIndex_t  }
  _ALLEGRO_glPrimitiveRestartIndex_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glGetInteger64i_v_t  }
  _ALLEGRO_glGetInteger64i_v_t = procedure(target: GLenum; index: GLuint; data: PGLint64); cdecl;

  { _ALLEGRO_glGetBufferParameteri64v_t  }
  _ALLEGRO_glGetBufferParameteri64v_t = procedure(target: GLenum; pname: GLenum; params: PGLint64); cdecl;

  { _ALLEGRO_glProgramParameteri_t  }
  _ALLEGRO_glProgramParameteri_t = procedure(_program: GLuint; pname: GLenum; value: GLint); cdecl;

  { _ALLEGRO_glFramebufferTexture_t  }
  _ALLEGRO_glFramebufferTexture_t = procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); cdecl;

  { _ALLEGRO_glClearBufferData_t  }
  _ALLEGRO_glClearBufferData_t = procedure(target: GLenum; internalformat: GLenum; format: GLenum; _type: GLenum; const data: Pointer); cdecl;

  { _ALLEGRO_glClearBufferSubData_t  }
  _ALLEGRO_glClearBufferSubData_t = procedure(target: GLenum; internalformat: GLenum; offset: GLintptr; size: GLsizeiptr; format: GLenum; _type: GLenum; const data: Pointer); cdecl;

  { _ALLEGRO_glDispatchCompute_t  }
  _ALLEGRO_glDispatchCompute_t = procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint); cdecl;

  { _ALLEGRO_glDispatchComputeIndirect_t  }
  _ALLEGRO_glDispatchComputeIndirect_t = procedure(indirect: GLintptr); cdecl;

  { _ALLEGRO_glCopyImageSubData_t  }
  _ALLEGRO_glCopyImageSubData_t = procedure(srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; srcWidth: GLsizei; srcHeight: GLsizei; srcDepth: GLsizei); cdecl;

  { _ALLEGRO_glFramebufferParameteri_t  }
  _ALLEGRO_glFramebufferParameteri_t = procedure(target: GLenum; pname: GLenum; param: GLint); cdecl;

  { _ALLEGRO_glGetFramebufferParameteriv_t  }
  _ALLEGRO_glGetFramebufferParameteriv_t = procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetInternalformati64v_t  }
  _ALLEGRO_glGetInternalformati64v_t = procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint64); cdecl;

  { _ALLEGRO_glInvalidateTexSubImage_t  }
  _ALLEGRO_glInvalidateTexSubImage_t = procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei); cdecl;

  { _ALLEGRO_glInvalidateTexImage_t  }
  _ALLEGRO_glInvalidateTexImage_t = procedure(texture: GLuint; level: GLint); cdecl;

  { _ALLEGRO_glInvalidateBufferSubData_t  }
  _ALLEGRO_glInvalidateBufferSubData_t = procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); cdecl;

  { _ALLEGRO_glInvalidateBufferData_t  }
  _ALLEGRO_glInvalidateBufferData_t = procedure(buffer: GLuint); cdecl;

  { _ALLEGRO_glInvalidateFramebuffer_t  }
  _ALLEGRO_glInvalidateFramebuffer_t = procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum); cdecl;

  { _ALLEGRO_glInvalidateSubFramebuffer_t  }
  _ALLEGRO_glInvalidateSubFramebuffer_t = procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawArraysIndirect_t  }
  _ALLEGRO_glMultiDrawArraysIndirect_t = procedure(mode: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawElementsIndirect_t  }
  _ALLEGRO_glMultiDrawElementsIndirect_t = procedure(mode: GLenum; _type: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); cdecl;

  { _ALLEGRO_glGetProgramInterfaceiv_t  }
  _ALLEGRO_glGetProgramInterfaceiv_t = procedure(_program: GLuint; programInterface: GLenum; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetProgramResourceIndex_t  }
  _ALLEGRO_glGetProgramResourceIndex_t = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLuint; cdecl;

  { _ALLEGRO_glGetProgramResourceName_t  }
  _ALLEGRO_glGetProgramResourceName_t = procedure(_program: GLuint; programInterface: GLenum; index: GLuint; bufSize: GLsizei; length: PGLsizei; name: PGLchar); cdecl;

  { _ALLEGRO_glGetProgramResourceiv_t  }
  _ALLEGRO_glGetProgramResourceiv_t = procedure(_program: GLuint; programInterface: GLenum; index: GLuint; propCount: GLsizei; const props: PGLenum; bufSize: GLsizei; length: PGLsizei; params: PGLint); cdecl;

  { _ALLEGRO_glGetProgramResourceLocation_t  }
  _ALLEGRO_glGetProgramResourceLocation_t = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGetProgramResourceLocationIndex_t  }
  _ALLEGRO_glGetProgramResourceLocationIndex_t = function(_program: GLuint; programInterface: GLenum; const name: PGLchar): GLint; cdecl;

  { _ALLEGRO_glShaderStorageBlockBinding_t  }
  _ALLEGRO_glShaderStorageBlockBinding_t = procedure(_program: GLuint; storageBlockIndex: GLuint; storageBlockBinding: GLuint); cdecl;

  { _ALLEGRO_glTexBufferRange_t  }
  _ALLEGRO_glTexBufferRange_t = procedure(target: GLenum; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); cdecl;

  { _ALLEGRO_glTexStorage2DMultisample_t  }
  _ALLEGRO_glTexStorage2DMultisample_t = procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { _ALLEGRO_glTexStorage3DMultisample_t  }
  _ALLEGRO_glTexStorage3DMultisample_t = procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { _ALLEGRO_glTextureView_t  }
  _ALLEGRO_glTextureView_t = procedure(texture: GLuint; target: GLenum; origtexture: GLuint; internalformat: GLenum; minlevel: GLuint; numlevels: GLuint; minlayer: GLuint; numlayers: GLuint); cdecl;

  { _ALLEGRO_glBindVertexBuffer_t  }
  _ALLEGRO_glBindVertexBuffer_t = procedure(bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); cdecl;

  { _ALLEGRO_glVertexAttribFormat_t  }
  _ALLEGRO_glVertexAttribFormat_t = procedure(attribindex: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; relativeoffset: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribIFormat_t  }
  _ALLEGRO_glVertexAttribIFormat_t = procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribLFormat_t  }
  _ALLEGRO_glVertexAttribLFormat_t = procedure(attribindex: GLuint; size: GLint; _type: GLenum; relativeoffset: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribBinding_t  }
  _ALLEGRO_glVertexAttribBinding_t = procedure(attribindex: GLuint; bindingindex: GLuint); cdecl;

  { _ALLEGRO_glVertexBindingDivisor_t  }
  _ALLEGRO_glVertexBindingDivisor_t = procedure(bindingindex: GLuint; divisor: GLuint); cdecl;

  { _ALLEGRO_glDebugMessageControl_t  }
  _ALLEGRO_glDebugMessageControl_t = procedure(source: GLenum; _type: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); cdecl;

  { _ALLEGRO_glDebugMessageInsert_t  }
  _ALLEGRO_glDebugMessageInsert_t = procedure(source: GLenum; _type: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); cdecl;

  { _ALLEGRO_glDebugMessageCallback_t  }
  _ALLEGRO_glDebugMessageCallback_t = procedure(callback: GLDEBUGPROC; const userParam: Pointer); cdecl;

  { _ALLEGRO_glGetDebugMessageLog_t  }
  _ALLEGRO_glGetDebugMessageLog_t = function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; cdecl;

  { _ALLEGRO_glPushDebugGroup_t  }
  _ALLEGRO_glPushDebugGroup_t = procedure(source: GLenum; id: GLuint; length: GLsizei; const _message: PGLchar); cdecl;

  { _ALLEGRO_glPopDebugGroup_t  }
  _ALLEGRO_glPopDebugGroup_t = procedure(); cdecl;

  { _ALLEGRO_glObjectLabel_t  }
  _ALLEGRO_glObjectLabel_t = procedure(identifier: GLenum; name: GLuint; length: GLsizei; const _label: PGLchar); cdecl;

  { _ALLEGRO_glGetObjectLabel_t  }
  _ALLEGRO_glGetObjectLabel_t = procedure(identifier: GLenum; name: GLuint; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); cdecl;

  { _ALLEGRO_glObjectPtrLabel_t  }
  _ALLEGRO_glObjectPtrLabel_t = procedure(const ptr: Pointer; length: GLsizei; const _label: PGLchar); cdecl;

  { _ALLEGRO_glGetObjectPtrLabel_t  }
  _ALLEGRO_glGetObjectPtrLabel_t = procedure(const ptr: Pointer; bufSize: GLsizei; length: PGLsizei; _label: PGLchar); cdecl;

  { _ALLEGRO_glActiveTextureARB_t  }
  _ALLEGRO_glActiveTextureARB_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glClientActiveTextureARB_t  }
  _ALLEGRO_glClientActiveTextureARB_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMultiTexCoord1dARB_t  }
  _ALLEGRO_glMultiTexCoord1dARB_t = procedure(p1: GLenum; p2: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord1dvARB_t  }
  _ALLEGRO_glMultiTexCoord1dvARB_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord1fARB_t  }
  _ALLEGRO_glMultiTexCoord1fARB_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord1fvARB_t  }
  _ALLEGRO_glMultiTexCoord1fvARB_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord1iARB_t  }
  _ALLEGRO_glMultiTexCoord1iARB_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord1ivARB_t  }
  _ALLEGRO_glMultiTexCoord1ivARB_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord1sARB_t  }
  _ALLEGRO_glMultiTexCoord1sARB_t = procedure(p1: GLenum; p2: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord1svARB_t  }
  _ALLEGRO_glMultiTexCoord1svARB_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord2dARB_t  }
  _ALLEGRO_glMultiTexCoord2dARB_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord2dvARB_t  }
  _ALLEGRO_glMultiTexCoord2dvARB_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord2fARB_t  }
  _ALLEGRO_glMultiTexCoord2fARB_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord2fvARB_t  }
  _ALLEGRO_glMultiTexCoord2fvARB_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord2iARB_t  }
  _ALLEGRO_glMultiTexCoord2iARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord2ivARB_t  }
  _ALLEGRO_glMultiTexCoord2ivARB_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord2sARB_t  }
  _ALLEGRO_glMultiTexCoord2sARB_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord2svARB_t  }
  _ALLEGRO_glMultiTexCoord2svARB_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord3dARB_t  }
  _ALLEGRO_glMultiTexCoord3dARB_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord3dvARB_t  }
  _ALLEGRO_glMultiTexCoord3dvARB_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord3fARB_t  }
  _ALLEGRO_glMultiTexCoord3fARB_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord3fvARB_t  }
  _ALLEGRO_glMultiTexCoord3fvARB_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord3iARB_t  }
  _ALLEGRO_glMultiTexCoord3iARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord3ivARB_t  }
  _ALLEGRO_glMultiTexCoord3ivARB_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord3sARB_t  }
  _ALLEGRO_glMultiTexCoord3sARB_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord3svARB_t  }
  _ALLEGRO_glMultiTexCoord3svARB_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord4dARB_t  }
  _ALLEGRO_glMultiTexCoord4dARB_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord4dvARB_t  }
  _ALLEGRO_glMultiTexCoord4dvARB_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexCoord4fARB_t  }
  _ALLEGRO_glMultiTexCoord4fARB_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord4fvARB_t  }
  _ALLEGRO_glMultiTexCoord4fvARB_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexCoord4iARB_t  }
  _ALLEGRO_glMultiTexCoord4iARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glMultiTexCoord4ivARB_t  }
  _ALLEGRO_glMultiTexCoord4ivARB_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glMultiTexCoord4sARB_t  }
  _ALLEGRO_glMultiTexCoord4sARB_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glMultiTexCoord4svARB_t  }
  _ALLEGRO_glMultiTexCoord4svARB_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glLoadTransposeMatrixfARB_t  }
  _ALLEGRO_glLoadTransposeMatrixfARB_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glLoadTransposeMatrixdARB_t  }
  _ALLEGRO_glLoadTransposeMatrixdARB_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glMultTransposeMatrixfARB_t  }
  _ALLEGRO_glMultTransposeMatrixfARB_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glMultTransposeMatrixdARB_t  }
  _ALLEGRO_glMultTransposeMatrixdARB_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glSampleCoverageARB_t  }
  _ALLEGRO_glSampleCoverageARB_t = procedure(p1: GLclampf; p2: GLboolean); cdecl;

  { _ALLEGRO_glCompressedTexImage3DARB_t  }
  _ALLEGRO_glCompressedTexImage3DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexImage2DARB_t  }
  _ALLEGRO_glCompressedTexImage2DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLint; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexImage1DARB_t  }
  _ALLEGRO_glCompressedTexImage1DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLint; p6: GLsizei; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage3DARB_t  }
  _ALLEGRO_glCompressedTexSubImage3DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLsizei; p9: GLenum; p10: GLsizei; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage2DARB_t  }
  _ALLEGRO_glCompressedTexSubImage2DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLsizei; p6: GLsizei; p7: GLenum; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTexSubImage1DARB_t  }
  _ALLEGRO_glCompressedTexSubImage1DARB_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLsizei; p5: GLenum; p6: GLsizei; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glGetCompressedTexImageARB_t  }
  _ALLEGRO_glGetCompressedTexImageARB_t = procedure(p1: GLenum; p2: GLint; p3: PGLvoid); cdecl;

  { _ALLEGRO_glPointParameterfARB_t  }
  _ALLEGRO_glPointParameterfARB_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glPointParameterfvARB_t  }
  _ALLEGRO_glPointParameterfvARB_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glWeightbvARB_t  }
  _ALLEGRO_glWeightbvARB_t = procedure(p1: GLint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glWeightsvARB_t  }
  _ALLEGRO_glWeightsvARB_t = procedure(p1: GLint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glWeightivARB_t  }
  _ALLEGRO_glWeightivARB_t = procedure(p1: GLint; const p2: PGLint); cdecl;

  { _ALLEGRO_glWeightfvARB_t  }
  _ALLEGRO_glWeightfvARB_t = procedure(p1: GLint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glWeightdvARB_t  }
  _ALLEGRO_glWeightdvARB_t = procedure(p1: GLint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glWeightubvARB_t  }
  _ALLEGRO_glWeightubvARB_t = procedure(p1: GLint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glWeightusvARB_t  }
  _ALLEGRO_glWeightusvARB_t = procedure(p1: GLint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glWeightuivARB_t  }
  _ALLEGRO_glWeightuivARB_t = procedure(p1: GLint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glWeightPointerARB_t  }
  _ALLEGRO_glWeightPointerARB_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glVertexBlendARB_t  }
  _ALLEGRO_glVertexBlendARB_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glCurrentPaletteMatrixARB_t  }
  _ALLEGRO_glCurrentPaletteMatrixARB_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glMatrixIndexubvARB_t  }
  _ALLEGRO_glMatrixIndexubvARB_t = procedure(p1: GLint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glMatrixIndexusvARB_t  }
  _ALLEGRO_glMatrixIndexusvARB_t = procedure(p1: GLint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glMatrixIndexuivARB_t  }
  _ALLEGRO_glMatrixIndexuivARB_t = procedure(p1: GLint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glMatrixIndexPointerARB_t  }
  _ALLEGRO_glMatrixIndexPointerARB_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glWindowPos2dARB_t  }
  _ALLEGRO_glWindowPos2dARB_t = procedure(p1: GLdouble; p2: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos2dvARB_t  }
  _ALLEGRO_glWindowPos2dvARB_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos2fARB_t  }
  _ALLEGRO_glWindowPos2fARB_t = procedure(p1: GLfloat; p2: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos2fvARB_t  }
  _ALLEGRO_glWindowPos2fvARB_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos2iARB_t  }
  _ALLEGRO_glWindowPos2iARB_t = procedure(p1: GLint; p2: GLint); cdecl;

  { _ALLEGRO_glWindowPos2ivARB_t  }
  _ALLEGRO_glWindowPos2ivARB_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos2sARB_t  }
  _ALLEGRO_glWindowPos2sARB_t = procedure(p1: GLshort; p2: GLshort); cdecl;

  { _ALLEGRO_glWindowPos2svARB_t  }
  _ALLEGRO_glWindowPos2svARB_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glWindowPos3dARB_t  }
  _ALLEGRO_glWindowPos3dARB_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos3dvARB_t  }
  _ALLEGRO_glWindowPos3dvARB_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos3fARB_t  }
  _ALLEGRO_glWindowPos3fARB_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos3fvARB_t  }
  _ALLEGRO_glWindowPos3fvARB_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos3iARB_t  }
  _ALLEGRO_glWindowPos3iARB_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glWindowPos3ivARB_t  }
  _ALLEGRO_glWindowPos3ivARB_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos3sARB_t  }
  _ALLEGRO_glWindowPos3sARB_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glWindowPos3svARB_t  }
  _ALLEGRO_glWindowPos3svARB_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib1dARB_t  }
  _ALLEGRO_glVertexAttrib1dARB_t = procedure(p1: GLuint; p2: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib1dvARB_t  }
  _ALLEGRO_glVertexAttrib1dvARB_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib1fARB_t  }
  _ALLEGRO_glVertexAttrib1fARB_t = procedure(p1: GLuint; p2: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1fvARB_t  }
  _ALLEGRO_glVertexAttrib1fvARB_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1sARB_t  }
  _ALLEGRO_glVertexAttrib1sARB_t = procedure(p1: GLuint; p2: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib1svARB_t  }
  _ALLEGRO_glVertexAttrib1svARB_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2dARB_t  }
  _ALLEGRO_glVertexAttrib2dARB_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2dvARB_t  }
  _ALLEGRO_glVertexAttrib2dvARB_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2fARB_t  }
  _ALLEGRO_glVertexAttrib2fARB_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2fvARB_t  }
  _ALLEGRO_glVertexAttrib2fvARB_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2sARB_t  }
  _ALLEGRO_glVertexAttrib2sARB_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2svARB_t  }
  _ALLEGRO_glVertexAttrib2svARB_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3dARB_t  }
  _ALLEGRO_glVertexAttrib3dARB_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3dvARB_t  }
  _ALLEGRO_glVertexAttrib3dvARB_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3fARB_t  }
  _ALLEGRO_glVertexAttrib3fARB_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3fvARB_t  }
  _ALLEGRO_glVertexAttrib3fvARB_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3sARB_t  }
  _ALLEGRO_glVertexAttrib3sARB_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3svARB_t  }
  _ALLEGRO_glVertexAttrib3svARB_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4NbvARB_t  }
  _ALLEGRO_glVertexAttrib4NbvARB_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttrib4NivARB_t  }
  _ALLEGRO_glVertexAttrib4NivARB_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttrib4NsvARB_t  }
  _ALLEGRO_glVertexAttrib4NsvARB_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4NubARB_t  }
  _ALLEGRO_glVertexAttrib4NubARB_t = procedure(p1: GLuint; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4NubvARB_t  }
  _ALLEGRO_glVertexAttrib4NubvARB_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4NuivARB_t  }
  _ALLEGRO_glVertexAttrib4NuivARB_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttrib4NusvARB_t  }
  _ALLEGRO_glVertexAttrib4NusvARB_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttrib4bvARB_t  }
  _ALLEGRO_glVertexAttrib4bvARB_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttrib4dARB_t  }
  _ALLEGRO_glVertexAttrib4dARB_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4dvARB_t  }
  _ALLEGRO_glVertexAttrib4dvARB_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4fARB_t  }
  _ALLEGRO_glVertexAttrib4fARB_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4fvARB_t  }
  _ALLEGRO_glVertexAttrib4fvARB_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4ivARB_t  }
  _ALLEGRO_glVertexAttrib4ivARB_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttrib4sARB_t  }
  _ALLEGRO_glVertexAttrib4sARB_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4svARB_t  }
  _ALLEGRO_glVertexAttrib4svARB_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4ubvARB_t  }
  _ALLEGRO_glVertexAttrib4ubvARB_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4uivARB_t  }
  _ALLEGRO_glVertexAttrib4uivARB_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttrib4usvARB_t  }
  _ALLEGRO_glVertexAttrib4usvARB_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttribPointerARB_t  }
  _ALLEGRO_glVertexAttribPointerARB_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLboolean; p5: GLsizei; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glEnableVertexAttribArrayARB_t  }
  _ALLEGRO_glEnableVertexAttribArrayARB_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDisableVertexAttribArrayARB_t  }
  _ALLEGRO_glDisableVertexAttribArrayARB_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glProgramStringARB_t  }
  _ALLEGRO_glProgramStringARB_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glBindProgramARB_t  }
  _ALLEGRO_glBindProgramARB_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteProgramsARB_t  }
  _ALLEGRO_glDeleteProgramsARB_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenProgramsARB_t  }
  _ALLEGRO_glGenProgramsARB_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glProgramEnvParameter4dARB_t  }
  _ALLEGRO_glProgramEnvParameter4dARB_t = procedure(p1: GLenum; p2: GLuint; p3: GLdouble; p4: GLdouble; p5: GLdouble; p6: GLdouble); cdecl;

  { _ALLEGRO_glProgramEnvParameter4dvARB_t  }
  _ALLEGRO_glProgramEnvParameter4dvARB_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glProgramEnvParameter4fARB_t  }
  _ALLEGRO_glProgramEnvParameter4fARB_t = procedure(p1: GLenum; p2: GLuint; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glProgramEnvParameter4fvARB_t  }
  _ALLEGRO_glProgramEnvParameter4fvARB_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glProgramLocalParameter4dARB_t  }
  _ALLEGRO_glProgramLocalParameter4dARB_t = procedure(p1: GLenum; p2: GLuint; p3: GLdouble; p4: GLdouble; p5: GLdouble; p6: GLdouble); cdecl;

  { _ALLEGRO_glProgramLocalParameter4dvARB_t  }
  _ALLEGRO_glProgramLocalParameter4dvARB_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glProgramLocalParameter4fARB_t  }
  _ALLEGRO_glProgramLocalParameter4fARB_t = procedure(p1: GLenum; p2: GLuint; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glProgramLocalParameter4fvARB_t  }
  _ALLEGRO_glProgramLocalParameter4fvARB_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramEnvParameterdvARB_t  }
  _ALLEGRO_glGetProgramEnvParameterdvARB_t = procedure(p1: GLenum; p2: GLuint; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetProgramEnvParameterfvARB_t  }
  _ALLEGRO_glGetProgramEnvParameterfvARB_t = procedure(p1: GLenum; p2: GLuint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramLocalParameterdvARB_t  }
  _ALLEGRO_glGetProgramLocalParameterdvARB_t = procedure(p1: GLenum; p2: GLuint; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetProgramLocalParameterfvARB_t  }
  _ALLEGRO_glGetProgramLocalParameterfvARB_t = procedure(p1: GLenum; p2: GLuint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramivARB_t  }
  _ALLEGRO_glGetProgramivARB_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetProgramStringARB_t  }
  _ALLEGRO_glGetProgramStringARB_t = procedure(p1: GLenum; p2: GLenum; p3: PGLvoid); cdecl;

  { _ALLEGRO_glGetVertexAttribdvARB_t  }
  _ALLEGRO_glGetVertexAttribdvARB_t = procedure(p1: GLuint; p2: GLenum; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetVertexAttribfvARB_t  }
  _ALLEGRO_glGetVertexAttribfvARB_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVertexAttribivARB_t  }
  _ALLEGRO_glGetVertexAttribivARB_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribPointervARB_t  }
  _ALLEGRO_glGetVertexAttribPointervARB_t = procedure(p1: GLuint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glIsProgramARB_t  }
  _ALLEGRO_glIsProgramARB_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindBufferARB_t  }
  _ALLEGRO_glBindBufferARB_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteBuffersARB_t  }
  _ALLEGRO_glDeleteBuffersARB_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenBuffersARB_t  }
  _ALLEGRO_glGenBuffersARB_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsBufferARB_t  }
  _ALLEGRO_glIsBufferARB_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBufferDataARB_t  }
  _ALLEGRO_glBufferDataARB_t = procedure(p1: GLenum; p2: GLsizeiptrARB; const p3: PGLvoid; p4: GLenum); cdecl;

  { _ALLEGRO_glBufferSubDataARB_t  }
  _ALLEGRO_glBufferSubDataARB_t = procedure(p1: GLenum; p2: GLintptrARB; p3: GLsizeiptrARB; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetBufferSubDataARB_t  }
  _ALLEGRO_glGetBufferSubDataARB_t = procedure(p1: GLenum; p2: GLintptrARB; p3: GLsizeiptrARB; p4: PGLvoid); cdecl;

  { _ALLEGRO_glMapBufferARB_t  }
  _ALLEGRO_glMapBufferARB_t = function(p1: GLenum; p2: GLenum): PGLvoid; cdecl;

  { _ALLEGRO_glUnmapBufferARB_t  }
  _ALLEGRO_glUnmapBufferARB_t = function(p1: GLenum): GLboolean; cdecl;

  { _ALLEGRO_glGetBufferParameterivARB_t  }
  _ALLEGRO_glGetBufferParameterivARB_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetBufferPointervARB_t  }
  _ALLEGRO_glGetBufferPointervARB_t = procedure(p1: GLenum; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glGenQueriesARB_t  }
  _ALLEGRO_glGenQueriesARB_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glDeleteQueriesARB_t  }
  _ALLEGRO_glDeleteQueriesARB_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glIsQueryARB_t  }
  _ALLEGRO_glIsQueryARB_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBeginQueryARB_t  }
  _ALLEGRO_glBeginQueryARB_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glEndQueryARB_t  }
  _ALLEGRO_glEndQueryARB_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glGetQueryivARB_t  }
  _ALLEGRO_glGetQueryivARB_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetQueryObjectivARB_t  }
  _ALLEGRO_glGetQueryObjectivARB_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetQueryObjectuivARB_t  }
  _ALLEGRO_glGetQueryObjectuivARB_t = procedure(p1: GLuint; p2: GLenum; p3: PGLuint); cdecl;

  { _ALLEGRO_glDeleteObjectARB_t  }
  _ALLEGRO_glDeleteObjectARB_t = procedure(p1: GLhandleARB); cdecl;

  { _ALLEGRO_glGetHandleARB_t  }
  _ALLEGRO_glGetHandleARB_t = function(p1: GLenum): GLhandleARB; cdecl;

  { _ALLEGRO_glDetachObjectARB_t  }
  _ALLEGRO_glDetachObjectARB_t = procedure(p1: GLhandleARB; p2: GLhandleARB); cdecl;

  { _ALLEGRO_glCreateShaderObjectARB_t  }
  _ALLEGRO_glCreateShaderObjectARB_t = function(p1: GLenum): GLhandleARB; cdecl;

  { _ALLEGRO_glShaderSourceARB_t  }
  _ALLEGRO_glShaderSourceARB_t = procedure(p1: GLhandleARB; p2: GLsizei; p3: PPGLcharARB; const p4: PGLint); cdecl;

  { _ALLEGRO_glCompileShaderARB_t  }
  _ALLEGRO_glCompileShaderARB_t = procedure(p1: GLhandleARB); cdecl;

  { _ALLEGRO_glCreateProgramObjectARB_t  }
  _ALLEGRO_glCreateProgramObjectARB_t = function(): GLhandleARB; cdecl;

  { _ALLEGRO_glAttachObjectARB_t  }
  _ALLEGRO_glAttachObjectARB_t = procedure(p1: GLhandleARB; p2: GLhandleARB); cdecl;

  { _ALLEGRO_glLinkProgramARB_t  }
  _ALLEGRO_glLinkProgramARB_t = procedure(p1: GLhandleARB); cdecl;

  { _ALLEGRO_glUseProgramObjectARB_t  }
  _ALLEGRO_glUseProgramObjectARB_t = procedure(p1: GLhandleARB); cdecl;

  { _ALLEGRO_glValidateProgramARB_t  }
  _ALLEGRO_glValidateProgramARB_t = procedure(p1: GLhandleARB); cdecl;

  { _ALLEGRO_glUniform1fARB_t  }
  _ALLEGRO_glUniform1fARB_t = procedure(p1: GLint; p2: GLfloat); cdecl;

  { _ALLEGRO_glUniform2fARB_t  }
  _ALLEGRO_glUniform2fARB_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glUniform3fARB_t  }
  _ALLEGRO_glUniform3fARB_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glUniform4fARB_t  }
  _ALLEGRO_glUniform4fARB_t = procedure(p1: GLint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glUniform1iARB_t  }
  _ALLEGRO_glUniform1iARB_t = procedure(p1: GLint; p2: GLint); cdecl;

  { _ALLEGRO_glUniform2iARB_t  }
  _ALLEGRO_glUniform2iARB_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glUniform3iARB_t  }
  _ALLEGRO_glUniform3iARB_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glUniform4iARB_t  }
  _ALLEGRO_glUniform4iARB_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glUniform1fvARB_t  }
  _ALLEGRO_glUniform1fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform2fvARB_t  }
  _ALLEGRO_glUniform2fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform3fvARB_t  }
  _ALLEGRO_glUniform3fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform4fvARB_t  }
  _ALLEGRO_glUniform4fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLfloat); cdecl;

  { _ALLEGRO_glUniform1ivARB_t  }
  _ALLEGRO_glUniform1ivARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLint); cdecl;

  { _ALLEGRO_glUniform2ivARB_t  }
  _ALLEGRO_glUniform2ivARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLint); cdecl;

  { _ALLEGRO_glUniform3ivARB_t  }
  _ALLEGRO_glUniform3ivARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLint); cdecl;

  { _ALLEGRO_glUniform4ivARB_t  }
  _ALLEGRO_glUniform4ivARB_t = procedure(p1: GLint; p2: GLsizei; p3: PGLint); cdecl;

  { _ALLEGRO_glUniformMatrix2fvARB_t  }
  _ALLEGRO_glUniformMatrix2fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix3fvARB_t  }
  _ALLEGRO_glUniformMatrix3fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; p4: PGLfloat); cdecl;

  { _ALLEGRO_glUniformMatrix4fvARB_t  }
  _ALLEGRO_glUniformMatrix4fvARB_t = procedure(p1: GLint; p2: GLsizei; p3: GLboolean; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetObjectParameterfvARB_t  }
  _ALLEGRO_glGetObjectParameterfvARB_t = procedure(p1: GLhandleARB; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetObjectParameterivARB_t  }
  _ALLEGRO_glGetObjectParameterivARB_t = procedure(p1: GLhandleARB; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetInfoLogARB_t  }
  _ALLEGRO_glGetInfoLogARB_t = procedure(p1: GLhandleARB; p2: GLsizei; p3: PGLsizei; p4: PGLcharARB); cdecl;

  { _ALLEGRO_glGetAttachedObjectsARB_t  }
  _ALLEGRO_glGetAttachedObjectsARB_t = procedure(p1: GLhandleARB; p2: GLsizei; p3: PGLsizei; p4: PGLhandleARB); cdecl;

  { _ALLEGRO_glGetUniformLocationARB_t  }
  _ALLEGRO_glGetUniformLocationARB_t = function(p1: GLhandleARB; const p2: PGLcharARB): GLint; cdecl;

  { _ALLEGRO_glGetActiveUniformARB_t  }
  _ALLEGRO_glGetActiveUniformARB_t = procedure(p1: GLhandleARB; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLint; p6: PGLenum; p7: PGLcharARB); cdecl;

  { _ALLEGRO_glGetUniformfvARB_t  }
  _ALLEGRO_glGetUniformfvARB_t = procedure(p1: GLhandleARB; p2: GLint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetUniformivARB_t  }
  _ALLEGRO_glGetUniformivARB_t = procedure(p1: GLhandleARB; p2: GLint; p3: PGLint); cdecl;

  { _ALLEGRO_glGetShaderSourceARB_t  }
  _ALLEGRO_glGetShaderSourceARB_t = procedure(p1: GLhandleARB; p2: GLsizei; p3: PGLsizei; p4: PGLcharARB); cdecl;

  { _ALLEGRO_glBindAttribLocationARB_t  }
  _ALLEGRO_glBindAttribLocationARB_t = procedure(p1: GLhandleARB; p2: GLuint; const p3: PGLcharARB); cdecl;

  { _ALLEGRO_glGetActiveAttribARB_t  }
  _ALLEGRO_glGetActiveAttribARB_t = procedure(p1: GLhandleARB; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLint; p6: PGLenum; p7: PGLcharARB); cdecl;

  { _ALLEGRO_glGetAttribLocationARB_t  }
  _ALLEGRO_glGetAttribLocationARB_t = function(p1: GLhandleARB; const p2: PGLcharARB): GLint; cdecl;

  { _ALLEGRO_glDrawBuffersARB_t  }
  _ALLEGRO_glDrawBuffersARB_t = procedure(n: GLsizei; const bufs: PGLenum); cdecl;

  { _ALLEGRO_glClampColorARB_t  }
  _ALLEGRO_glClampColorARB_t = procedure(p1: GLenum; clamp: GLenum); cdecl;

  { _ALLEGRO_glDrawArraysInstancedARB_t  }
  _ALLEGRO_glDrawArraysInstancedARB_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glDrawElementsInstancedARB_t  }
  _ALLEGRO_glDrawElementsInstancedARB_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; const p4: PGLvoid; p5: GLsizei); cdecl;

  { _ALLEGRO_glIsRenderbuffer_t  }
  _ALLEGRO_glIsRenderbuffer_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindRenderbuffer_t  }
  _ALLEGRO_glBindRenderbuffer_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteRenderbuffers_t  }
  _ALLEGRO_glDeleteRenderbuffers_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenRenderbuffers_t  }
  _ALLEGRO_glGenRenderbuffers_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glRenderbufferStorage_t  }
  _ALLEGRO_glRenderbufferStorage_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glGetRenderbufferParameteriv_t  }
  _ALLEGRO_glGetRenderbufferParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glIsFramebuffer_t  }
  _ALLEGRO_glIsFramebuffer_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindFramebuffer_t  }
  _ALLEGRO_glBindFramebuffer_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteFramebuffers_t  }
  _ALLEGRO_glDeleteFramebuffers_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenFramebuffers_t  }
  _ALLEGRO_glGenFramebuffers_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glCheckFramebufferStatus_t  }
  _ALLEGRO_glCheckFramebufferStatus_t = function(p1: GLenum): GLenum; cdecl;

  { _ALLEGRO_glFramebufferTexture1D_t  }
  _ALLEGRO_glFramebufferTexture1D_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glFramebufferTexture2D_t  }
  _ALLEGRO_glFramebufferTexture2D_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glFramebufferTexture3D_t  }
  _ALLEGRO_glFramebufferTexture3D_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glFramebufferRenderbuffer_t  }
  _ALLEGRO_glFramebufferRenderbuffer_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint); cdecl;

  { _ALLEGRO_glGetFramebufferAttachmentParameteriv_t  }
  _ALLEGRO_glGetFramebufferAttachmentParameteriv_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGenerateMipmap_t  }
  _ALLEGRO_glGenerateMipmap_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glBlitFramebuffer_t  }
  _ALLEGRO_glBlitFramebuffer_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLint; p9: GLbitfield; p10: GLenum); cdecl;

  { _ALLEGRO_glRenderbufferStorageMultisample_t  }
  _ALLEGRO_glRenderbufferStorageMultisample_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; p4: GLsizei; p5: GLsizei); cdecl;

  { _ALLEGRO_glFramebufferTextureLayer_t  }
  _ALLEGRO_glFramebufferTextureLayer_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glProgramParameteriARB_t  }
  _ALLEGRO_glProgramParameteriARB_t = procedure(p1: GLuint; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glFramebufferTextureARB_t  }
  _ALLEGRO_glFramebufferTextureARB_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint); cdecl;

  { _ALLEGRO_glFramebufferTextureLayerARB_t  }
  _ALLEGRO_glFramebufferTextureLayerARB_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glFramebufferTextureFaceARB_t  }
  _ALLEGRO_glFramebufferTextureFaceARB_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint; p5: GLenum); cdecl;

  { _ALLEGRO_glVertexAttribDivisor_t  }
  _ALLEGRO_glVertexAttribDivisor_t = procedure(p1: GLuint; p2: GLuint); cdecl;

  { _ALLEGRO_glMapBufferRange_t  }
  _ALLEGRO_glMapBufferRange_t = procedure(p1: GLenum; p2: GLintptr; p3: GLsizeiptr; p4: GLbitfield); cdecl;

  { _ALLEGRO_glFlushMappedBufferRange_t  }
  _ALLEGRO_glFlushMappedBufferRange_t = procedure(p1: GLenum; p2: GLintptr; p3: GLsizeiptr); cdecl;

  { _ALLEGRO_glTexBufferARB_t  }
  _ALLEGRO_glTexBufferARB_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glBindVertexArray_t  }
  _ALLEGRO_glBindVertexArray_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDeleteVertexArrays_t  }
  _ALLEGRO_glDeleteVertexArrays_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenVertexArrays_t  }
  _ALLEGRO_glGenVertexArrays_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsVertexArray_t  }
  _ALLEGRO_glIsVertexArray_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glGetUniformIndices_t  }
  _ALLEGRO_glGetUniformIndices_t = procedure(p1: GLuint; p2: GLsizei; p3: PPGLchar; p4: PGLuint); cdecl;

  { _ALLEGRO_glGetActiveUniformsiv_t  }
  _ALLEGRO_glGetActiveUniformsiv_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLuint; p4: GLenum; p5: PGLint); cdecl;

  { _ALLEGRO_glGetActiveUniformName_t  }
  _ALLEGRO_glGetActiveUniformName_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLchar); cdecl;

  { _ALLEGRO_glGetUniformBlockIndex_t  }
  _ALLEGRO_glGetUniformBlockIndex_t = function(p1: GLuint; const p2: PGLchar): GLuint; cdecl;

  { _ALLEGRO_glGetActiveUniformBlockiv_t  }
  _ALLEGRO_glGetActiveUniformBlockiv_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetActiveUniformBlockName_t  }
  _ALLEGRO_glGetActiveUniformBlockName_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLchar); cdecl;

  { _ALLEGRO_glUniformBlockBinding_t  }
  _ALLEGRO_glUniformBlockBinding_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glCopyBufferSubData_t  }
  _ALLEGRO_glCopyBufferSubData_t = procedure(p1: GLenum; p2: GLenum; p3: GLintptr; p4: GLintptr; p5: GLsizeiptr); cdecl;

  { _ALLEGRO_glDrawElementsBaseVertex_t  }
  _ALLEGRO_glDrawElementsBaseVertex_t = procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; basevertex: GLint); cdecl;

  { _ALLEGRO_glDrawRangeElementsBaseVertex_t  }
  _ALLEGRO_glDrawRangeElementsBaseVertex_t = procedure(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid; basevertex: GLint); cdecl;

  { _ALLEGRO_glDrawElementsInstancedBaseVertex_t  }
  _ALLEGRO_glDrawElementsInstancedBaseVertex_t = procedure(mode: GLenum; count: GLsizei; _type: GLenum; const indices: PGLvoid; primcount: GLsizei; basevertex: GLint); cdecl;

  { _ALLEGRO_glMultiDrawElementsBaseVertex_t  }
  _ALLEGRO_glMultiDrawElementsBaseVertex_t = procedure(mode: GLenum; const count: PGLsizei; _type: GLenum; indices: PPGLvoid; primcount: GLsizei; const basevertex: PGLint); cdecl;

  { _ALLEGRO_glProvokingVertex_t  }
  _ALLEGRO_glProvokingVertex_t = procedure(mode: GLenum); cdecl;

  { _ALLEGRO_glFenceSync_t  }
  _ALLEGRO_glFenceSync_t = function(condition: GLenum; flags: GLbitfield): GLsync; cdecl;

  { _ALLEGRO_glIsSync_t  }
  _ALLEGRO_glIsSync_t = function(sync: GLsync): GLboolean; cdecl;

  { _ALLEGRO_glDeleteSync_t  }
  _ALLEGRO_glDeleteSync_t = procedure(sync: GLsync); cdecl;

  { _ALLEGRO_glClientWaitSync_t  }
  _ALLEGRO_glClientWaitSync_t = function(sync: GLsync; flags: GLbitfield; timeout: GLuint64): GLenum; cdecl;

  { _ALLEGRO_glWaitSync_t  }
  _ALLEGRO_glWaitSync_t = procedure(sync: GLsync; flags: GLbitfield; timeout: GLuint64); cdecl;

  { _ALLEGRO_glGetInteger64v_t  }
  _ALLEGRO_glGetInteger64v_t = procedure(pname: GLenum; params: PGLint64); cdecl;

  { _ALLEGRO_glGetSynciv_t  }
  _ALLEGRO_glGetSynciv_t = procedure(sync: GLsync; pname: GLenum; bufSize: GLsizei; length: PGLsizei; values: PGLint); cdecl;

  { _ALLEGRO_glTexImage2DMultisample_t  }
  _ALLEGRO_glTexImage2DMultisample_t = procedure(target: GLenum; samples: GLsizei; internalformat: GLint; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { _ALLEGRO_glTexImage3DMultisample_t  }
  _ALLEGRO_glTexImage3DMultisample_t = procedure(target: GLenum; samples: GLsizei; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); cdecl;

  { _ALLEGRO_glGetMultisamplefv_t  }
  _ALLEGRO_glGetMultisamplefv_t = procedure(pname: GLenum; index: GLuint; val: PGLfloat); cdecl;

  { _ALLEGRO_glSampleMaski_t  }
  _ALLEGRO_glSampleMaski_t = procedure(index: GLuint; mask: GLbitfield); cdecl;

  { _ALLEGRO_glBlendEquationi_t  }
  _ALLEGRO_glBlendEquationi_t = procedure(buf: GLuint; mode: GLenum); cdecl;

  { _ALLEGRO_glBlendEquationSeparatei_t  }
  _ALLEGRO_glBlendEquationSeparatei_t = procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); cdecl;

  { _ALLEGRO_glBlendFunci_t  }
  _ALLEGRO_glBlendFunci_t = procedure(buf: GLuint; src: GLenum; dst: GLenum); cdecl;

  { _ALLEGRO_glBlendFuncSeparatei_t  }
  _ALLEGRO_glBlendFuncSeparatei_t = procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); cdecl;

  { _ALLEGRO_glMinSampleShading_t  }
  _ALLEGRO_glMinSampleShading_t = procedure(value: GLclampf); cdecl;

  { _ALLEGRO_glNamedStringARB_t  }
  _ALLEGRO_glNamedStringARB_t = procedure(_type: GLenum; namelen: GLint; const name: PGLchar; stringlen: GLint; const _string: PGLchar); cdecl;

  { _ALLEGRO_glDeleteNamedStringARB_t  }
  _ALLEGRO_glDeleteNamedStringARB_t = procedure(namelen: GLint; const name: PGLchar); cdecl;

  { _ALLEGRO_glCompileShaderIncludeARB_t  }
  _ALLEGRO_glCompileShaderIncludeARB_t = procedure(shader: GLuint; count: GLsizei; path: PPGLchar; const length: PGLint); cdecl;

  { _ALLEGRO_glIsNamedStringARB_t  }
  _ALLEGRO_glIsNamedStringARB_t = function(namelen: GLint; const name: PGLchar): GLboolean; cdecl;

  { _ALLEGRO_glGetNamedStringARB_t  }
  _ALLEGRO_glGetNamedStringARB_t = procedure(namelen: GLint; const name: PGLchar; bufSize: GLsizei; stringlen: PGLint; _string: PGLchar); cdecl;

  { _ALLEGRO_glGetNamedStringivARB_t  }
  _ALLEGRO_glGetNamedStringivARB_t = procedure(namelen: GLint; const name: PGLchar; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glBindFragDataLocationIndexed_t  }
  _ALLEGRO_glBindFragDataLocationIndexed_t = procedure(_program: GLuint; colorNumber: GLuint; index: GLuint; const name: PGLchar); cdecl;

  { _ALLEGRO_glGetFragDataIndex_t  }
  _ALLEGRO_glGetFragDataIndex_t = function(_program: GLuint; const name: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGenSamplers_t  }
  _ALLEGRO_glGenSamplers_t = procedure(count: GLsizei; samplers: PGLuint); cdecl;

  { _ALLEGRO_glDeleteSamplers_t  }
  _ALLEGRO_glDeleteSamplers_t = procedure(count: GLsizei; const samplers: PGLuint); cdecl;

  { _ALLEGRO_glIsSampler_t  }
  _ALLEGRO_glIsSampler_t = function(sampler: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindSampler_t  }
  _ALLEGRO_glBindSampler_t = procedure(_unit: GLenum; sampler: GLuint); cdecl;

  { _ALLEGRO_glSamplerParameteri_t  }
  _ALLEGRO_glSamplerParameteri_t = procedure(sampler: GLuint; pname: GLenum; param: GLint); cdecl;

  { _ALLEGRO_glSamplerParameteriv_t  }
  _ALLEGRO_glSamplerParameteriv_t = procedure(sampler: GLuint; pname: GLenum; const param: PGLint); cdecl;

  { _ALLEGRO_glSamplerParameterf_t  }
  _ALLEGRO_glSamplerParameterf_t = procedure(sampler: GLuint; pname: GLenum; param: GLfloat); cdecl;

  { _ALLEGRO_glSamplerParameterfv_t  }
  _ALLEGRO_glSamplerParameterfv_t = procedure(sampler: GLuint; pname: GLenum; const param: PGLfloat); cdecl;

  { _ALLEGRO_glSamplerParameterIiv_t  }
  _ALLEGRO_glSamplerParameterIiv_t = procedure(sampler: GLuint; pname: GLenum; const param: PGLint); cdecl;

  { _ALLEGRO_glSamplerParameterIuiv_t  }
  _ALLEGRO_glSamplerParameterIuiv_t = procedure(sampler: GLuint; pname: GLenum; const param: PGLuint); cdecl;

  { _ALLEGRO_glGetSamplerParameteriv_t  }
  _ALLEGRO_glGetSamplerParameteriv_t = procedure(sampler: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetSamplerParameterIiv_t  }
  _ALLEGRO_glGetSamplerParameterIiv_t = procedure(sampler: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetSamplerParameterfv_t  }
  _ALLEGRO_glGetSamplerParameterfv_t = procedure(sampler: GLuint; pname: GLenum; params: PGLfloat); cdecl;

  { _ALLEGRO_glGetSamplerParameterIfv_t  }
  _ALLEGRO_glGetSamplerParameterIfv_t = procedure(sampler: GLuint; pname: GLenum; params: PGLfloat); cdecl;

  { _ALLEGRO_glQueryCounter_t  }
  _ALLEGRO_glQueryCounter_t = procedure(id: GLuint; target: GLenum); cdecl;

  { _ALLEGRO_glGetQueryObjecti64v_t  }
  _ALLEGRO_glGetQueryObjecti64v_t = procedure(id: GLuint; pname: GLenum; params: PGLint64); cdecl;

  { _ALLEGRO_glGetQueryObjectui64v_t  }
  _ALLEGRO_glGetQueryObjectui64v_t = procedure(id: GLuint; pname: GLenum; params: PGLuint64); cdecl;

  { _ALLEGRO_glVertexP2ui_t  }
  _ALLEGRO_glVertexP2ui_t = procedure(_type: GLenum; value: GLuint); cdecl;

  { _ALLEGRO_glVertexP2uiv_t  }
  _ALLEGRO_glVertexP2uiv_t = procedure(_type: GLenum; const value: PGLuint); cdecl;

  { _ALLEGRO_glVertexP3ui_t  }
  _ALLEGRO_glVertexP3ui_t = procedure(_type: GLenum; value: GLuint); cdecl;

  { _ALLEGRO_glVertexP3uiv_t  }
  _ALLEGRO_glVertexP3uiv_t = procedure(_type: GLenum; const value: PGLuint); cdecl;

  { _ALLEGRO_glVertexP4ui_t  }
  _ALLEGRO_glVertexP4ui_t = procedure(_type: GLenum; value: GLuint); cdecl;

  { _ALLEGRO_glVertexP4uiv_t  }
  _ALLEGRO_glVertexP4uiv_t = procedure(_type: GLenum; const value: PGLuint); cdecl;

  { _ALLEGRO_glTexCoordP1ui_t  }
  _ALLEGRO_glTexCoordP1ui_t = procedure(_type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glTexCoordP1uiv_t  }
  _ALLEGRO_glTexCoordP1uiv_t = procedure(_type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glTexCoordP2ui_t  }
  _ALLEGRO_glTexCoordP2ui_t = procedure(_type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glTexCoordP2uiv_t  }
  _ALLEGRO_glTexCoordP2uiv_t = procedure(_type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glTexCoordP3ui_t  }
  _ALLEGRO_glTexCoordP3ui_t = procedure(_type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glTexCoordP3uiv_t  }
  _ALLEGRO_glTexCoordP3uiv_t = procedure(_type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glTexCoordP4ui_t  }
  _ALLEGRO_glTexCoordP4ui_t = procedure(_type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glTexCoordP4uiv_t  }
  _ALLEGRO_glTexCoordP4uiv_t = procedure(_type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP1ui_t  }
  _ALLEGRO_glMultiTexCoordP1ui_t = procedure(texture: GLenum; _type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP1uiv_t  }
  _ALLEGRO_glMultiTexCoordP1uiv_t = procedure(texture: GLenum; _type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP2ui_t  }
  _ALLEGRO_glMultiTexCoordP2ui_t = procedure(texture: GLenum; _type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP2uiv_t  }
  _ALLEGRO_glMultiTexCoordP2uiv_t = procedure(texture: GLenum; _type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP3ui_t  }
  _ALLEGRO_glMultiTexCoordP3ui_t = procedure(texture: GLenum; _type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP3uiv_t  }
  _ALLEGRO_glMultiTexCoordP3uiv_t = procedure(texture: GLenum; _type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP4ui_t  }
  _ALLEGRO_glMultiTexCoordP4ui_t = procedure(texture: GLenum; _type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordP4uiv_t  }
  _ALLEGRO_glMultiTexCoordP4uiv_t = procedure(texture: GLenum; _type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glNormalP3ui_t  }
  _ALLEGRO_glNormalP3ui_t = procedure(_type: GLenum; coords: GLuint); cdecl;

  { _ALLEGRO_glNormalP3uiv_t  }
  _ALLEGRO_glNormalP3uiv_t = procedure(_type: GLenum; const coords: PGLuint); cdecl;

  { _ALLEGRO_glColorP3ui_t  }
  _ALLEGRO_glColorP3ui_t = procedure(_type: GLenum; color: GLuint); cdecl;

  { _ALLEGRO_glColorP3uiv_t  }
  _ALLEGRO_glColorP3uiv_t = procedure(_type: GLenum; const color: PGLuint); cdecl;

  { _ALLEGRO_glColorP4ui_t  }
  _ALLEGRO_glColorP4ui_t = procedure(_type: GLenum; color: GLuint); cdecl;

  { _ALLEGRO_glColorP4uiv_t  }
  _ALLEGRO_glColorP4uiv_t = procedure(_type: GLenum; const color: PGLuint); cdecl;

  { _ALLEGRO_glSecondaryColorP3ui_t  }
  _ALLEGRO_glSecondaryColorP3ui_t = procedure(_type: GLenum; color: GLuint); cdecl;

  { _ALLEGRO_glSecondaryColorP3uiv_t  }
  _ALLEGRO_glSecondaryColorP3uiv_t = procedure(_type: GLenum; const color: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribP1ui_t  }
  _ALLEGRO_glVertexAttribP1ui_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribP1uiv_t  }
  _ALLEGRO_glVertexAttribP1uiv_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribP2ui_t  }
  _ALLEGRO_glVertexAttribP2ui_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribP2uiv_t  }
  _ALLEGRO_glVertexAttribP2uiv_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribP3ui_t  }
  _ALLEGRO_glVertexAttribP3ui_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribP3uiv_t  }
  _ALLEGRO_glVertexAttribP3uiv_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribP4ui_t  }
  _ALLEGRO_glVertexAttribP4ui_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; value: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribP4uiv_t  }
  _ALLEGRO_glVertexAttribP4uiv_t = procedure(index: GLuint; _type: GLenum; normalized: GLboolean; const value: PGLuint); cdecl;

  { _ALLEGRO_glDrawArraysIndirect_t  }
  _ALLEGRO_glDrawArraysIndirect_t = procedure(mode: GLenum; const indirect: PGLvoid); cdecl;

  { _ALLEGRO_glDrawElementsIndirect_t  }
  _ALLEGRO_glDrawElementsIndirect_t = procedure(mode: GLenum; _type: GLenum; const indirect: PGLvoid); cdecl;

  { _ALLEGRO_glUniform1d_t  }
  _ALLEGRO_glUniform1d_t = procedure(location: GLint; x: GLdouble); cdecl;

  { _ALLEGRO_glUniform2d_t  }
  _ALLEGRO_glUniform2d_t = procedure(location: GLint; x: GLdouble; y: GLdouble); cdecl;

  { _ALLEGRO_glUniform3d_t  }
  _ALLEGRO_glUniform3d_t = procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble); cdecl;

  { _ALLEGRO_glUniform4d_t  }
  _ALLEGRO_glUniform4d_t = procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;

  { _ALLEGRO_glUniform1dv_t  }
  _ALLEGRO_glUniform1dv_t = procedure(location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniform2dv_t  }
  _ALLEGRO_glUniform2dv_t = procedure(location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniform3dv_t  }
  _ALLEGRO_glUniform3dv_t = procedure(location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniform4dv_t  }
  _ALLEGRO_glUniform4dv_t = procedure(location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix2dv_t  }
  _ALLEGRO_glUniformMatrix2dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix3dv_t  }
  _ALLEGRO_glUniformMatrix3dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix4dv_t  }
  _ALLEGRO_glUniformMatrix4dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix2x3dv_t  }
  _ALLEGRO_glUniformMatrix2x3dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix2x4dv_t  }
  _ALLEGRO_glUniformMatrix2x4dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix3x2dv_t  }
  _ALLEGRO_glUniformMatrix3x2dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix3x4dv_t  }
  _ALLEGRO_glUniformMatrix3x4dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix4x2dv_t  }
  _ALLEGRO_glUniformMatrix4x2dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glUniformMatrix4x3dv_t  }
  _ALLEGRO_glUniformMatrix4x3dv_t = procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glGetUniformdv_t  }
  _ALLEGRO_glGetUniformdv_t = procedure(_program: GLuint; location: GLint; params: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniform1dEXT_t  }
  _ALLEGRO_glProgramUniform1dEXT_t = procedure(_program: GLuint; location: GLint; x: GLdouble); cdecl;

  { _ALLEGRO_glProgramUniform2dEXT_t  }
  _ALLEGRO_glProgramUniform2dEXT_t = procedure(_program: GLuint; location: GLint; x: GLdouble; y: GLdouble); cdecl;

  { _ALLEGRO_glProgramUniform3dEXT_t  }
  _ALLEGRO_glProgramUniform3dEXT_t = procedure(_program: GLuint; location: GLint; x: GLdouble; y: GLdouble; z: GLdouble); cdecl;

  { _ALLEGRO_glProgramUniform4dEXT_t  }
  _ALLEGRO_glProgramUniform4dEXT_t = procedure(_program: GLuint; location: GLint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;

  { _ALLEGRO_glProgramUniform1dvEXT_t  }
  _ALLEGRO_glProgramUniform1dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniform2dvEXT_t  }
  _ALLEGRO_glProgramUniform2dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniform3dvEXT_t  }
  _ALLEGRO_glProgramUniform3dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniform4dvEXT_t  }
  _ALLEGRO_glProgramUniform4dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2x3dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2x3dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2x4dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2x4dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3x2dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3x2dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3x4dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3x4dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4x2dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4x2dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4x3dvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4x3dvEXT_t = procedure(_program: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); cdecl;

  { _ALLEGRO_glGetSubroutineUniformLocation_t  }
  _ALLEGRO_glGetSubroutineUniformLocation_t = function(_program: GLuint; shadertype: GLenum; const name: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGetSubroutineIndex_t  }
  _ALLEGRO_glGetSubroutineIndex_t = function(_program: GLuint; shadertype: GLenum; const name: PGLchar): GLuint; cdecl;

  { _ALLEGRO_glGetActiveSubroutineUniformiv_t  }
  _ALLEGRO_glGetActiveSubroutineUniformiv_t = procedure(_program: GLuint; shadertype: GLenum; index: GLuint; pname: GLenum; values: PGLint); cdecl;

  { _ALLEGRO_glGetActiveSubroutineUniformName_t  }
  _ALLEGRO_glGetActiveSubroutineUniformName_t = procedure(_program: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); cdecl;

  { _ALLEGRO_glGetActiveSubroutineName_t  }
  _ALLEGRO_glGetActiveSubroutineName_t = procedure(_program: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); cdecl;

  { _ALLEGRO_glUniformSubroutinesuiv_t  }
  _ALLEGRO_glUniformSubroutinesuiv_t = procedure(shadertype: GLenum; count: GLsizei; const indices: PGLuint); cdecl;

  { _ALLEGRO_glGetUniformSubroutineuiv_t  }
  _ALLEGRO_glGetUniformSubroutineuiv_t = procedure(shadertype: GLenum; location: GLint; params: PGLuint); cdecl;

  { _ALLEGRO_glGetProgramStageiv_t  }
  _ALLEGRO_glGetProgramStageiv_t = procedure(_program: GLuint; shadertype: GLenum; pname: GLenum; values: PGLint); cdecl;

  { _ALLEGRO_glPatchParameteri_t  }
  _ALLEGRO_glPatchParameteri_t = procedure(pname: GLenum; value: GLint); cdecl;

  { _ALLEGRO_glPatchParameterfv_t  }
  _ALLEGRO_glPatchParameterfv_t = procedure(pname: GLenum; const values: PGLfloat); cdecl;

  { _ALLEGRO_glBindTransformFeedback_t  }
  _ALLEGRO_glBindTransformFeedback_t = procedure(target: GLenum; id: GLuint); cdecl;

  { _ALLEGRO_glDeleteTransformFeedbacks_t  }
  _ALLEGRO_glDeleteTransformFeedbacks_t = procedure(n: GLsizei; const ids: PGLuint); cdecl;

  { _ALLEGRO_glGenTransformFeedbacks_t  }
  _ALLEGRO_glGenTransformFeedbacks_t = procedure(n: GLsizei; ids: PGLuint); cdecl;

  { _ALLEGRO_glIsTransformFeedback_t  }
  _ALLEGRO_glIsTransformFeedback_t = function(id: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glPauseTransformFeedback_t  }
  _ALLEGRO_glPauseTransformFeedback_t = procedure(); cdecl;

  { _ALLEGRO_glResumeTransformFeedback_t  }
  _ALLEGRO_glResumeTransformFeedback_t = procedure(); cdecl;

  { _ALLEGRO_glDrawTransformFeedback_t  }
  _ALLEGRO_glDrawTransformFeedback_t = procedure(mode: GLenum; id: GLuint); cdecl;

  { _ALLEGRO_glDrawTransformFeedbackStream_t  }
  _ALLEGRO_glDrawTransformFeedbackStream_t = procedure(mode: GLenum; id: GLuint; stream: GLuint); cdecl;

  { _ALLEGRO_glBeginQueryIndexed_t  }
  _ALLEGRO_glBeginQueryIndexed_t = procedure(target: GLenum; index: GLuint; id: GLuint); cdecl;

  { _ALLEGRO_glEndQueryIndexed_t  }
  _ALLEGRO_glEndQueryIndexed_t = procedure(target: GLenum; index: GLuint); cdecl;

  { _ALLEGRO_glGetQueryIndexediv_t  }
  _ALLEGRO_glGetQueryIndexediv_t = procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glBlendColorEXT_t  }
  _ALLEGRO_glBlendColorEXT_t = procedure(p1: GLclampf; p2: GLclampf; p3: GLclampf; p4: GLclampf); cdecl;

  { _ALLEGRO_glPolygonOffsetEXT_t  }
  _ALLEGRO_glPolygonOffsetEXT_t = procedure(p1: GLfloat; p2: GLfloat); cdecl;

  { _ALLEGRO_glTexImage3DEXT_t  }
  _ALLEGRO_glTexImage3DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glTexSubImage3DEXT_t  }
  _ALLEGRO_glTexSubImage3DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLsizei; p9: GLenum; p10: GLenum; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glGetTexFilterFuncSGIS_t  }
  _ALLEGRO_glGetTexFilterFuncSGIS_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glTexFilterFuncSGIS_t  }
  _ALLEGRO_glTexFilterFuncSGIS_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glTexSubImage1DEXT_t  }
  _ALLEGRO_glTexSubImage1DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLsizei; p5: GLenum; p6: GLenum; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glTexSubImage2DEXT_t  }
  _ALLEGRO_glTexSubImage2DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLsizei; p6: GLsizei; p7: GLenum; p8: GLenum; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCopyTexImage1DEXT_t  }
  _ALLEGRO_glCopyTexImage1DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLint; p5: GLint; p6: GLsizei; p7: GLint); cdecl;

  { _ALLEGRO_glCopyTexImage2DEXT_t  }
  _ALLEGRO_glCopyTexImage2DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLint); cdecl;

  { _ALLEGRO_glCopyTexSubImage1DEXT_t  }
  _ALLEGRO_glCopyTexSubImage1DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei); cdecl;

  { _ALLEGRO_glCopyTexSubImage2DEXT_t  }
  _ALLEGRO_glCopyTexSubImage2DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei); cdecl;

  { _ALLEGRO_glCopyTexSubImage3DEXT_t  }
  _ALLEGRO_glCopyTexSubImage3DEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLsizei; p9: GLsizei); cdecl;

  { _ALLEGRO_glGetHistogramEXT_t  }
  _ALLEGRO_glGetHistogramEXT_t = procedure(p1: GLenum; p2: GLboolean; p3: GLenum; p4: GLenum; p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetHistogramParameterfvEXT_t  }
  _ALLEGRO_glGetHistogramParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetHistogramParameterivEXT_t  }
  _ALLEGRO_glGetHistogramParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetMinmaxEXT_t  }
  _ALLEGRO_glGetMinmaxEXT_t = procedure(p1: GLenum; p2: GLboolean; p3: GLenum; p4: GLenum; p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetMinmaxParameterfvEXT_t  }
  _ALLEGRO_glGetMinmaxParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetMinmaxParameterivEXT_t  }
  _ALLEGRO_glGetMinmaxParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glHistogramEXT_t  }
  _ALLEGRO_glHistogramEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; p4: GLboolean); cdecl;

  { _ALLEGRO_glMinmaxEXT_t  }
  _ALLEGRO_glMinmaxEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLboolean); cdecl;

  { _ALLEGRO_glResetHistogramEXT_t  }
  _ALLEGRO_glResetHistogramEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glResetMinmaxEXT_t  }
  _ALLEGRO_glResetMinmaxEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glConvolutionFilter1DEXT_t  }
  _ALLEGRO_glConvolutionFilter1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glConvolutionFilter2DEXT_t  }
  _ALLEGRO_glConvolutionFilter2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei; p5: GLenum; p6: GLenum; const p7: PGLvoid); cdecl;

  { _ALLEGRO_glConvolutionParameterfEXT_t  }
  _ALLEGRO_glConvolutionParameterfEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glConvolutionParameterfvEXT_t  }
  _ALLEGRO_glConvolutionParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glConvolutionParameteriEXT_t  }
  _ALLEGRO_glConvolutionParameteriEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glConvolutionParameterivEXT_t  }
  _ALLEGRO_glConvolutionParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glCopyConvolutionFilter1DEXT_t  }
  _ALLEGRO_glCopyConvolutionFilter1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glCopyConvolutionFilter2DEXT_t  }
  _ALLEGRO_glCopyConvolutionFilter2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLsizei); cdecl;

  { _ALLEGRO_glGetConvolutionFilterEXT_t  }
  _ALLEGRO_glGetConvolutionFilterEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetConvolutionParameterfvEXT_t  }
  _ALLEGRO_glGetConvolutionParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetConvolutionParameterivEXT_t  }
  _ALLEGRO_glGetConvolutionParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetSeparableFilterEXT_t  }
  _ALLEGRO_glGetSeparableFilterEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid; p5: PGLvoid; p6: PGLvoid); cdecl;

  { _ALLEGRO_glSeparableFilter2DEXT_t  }
  _ALLEGRO_glSeparableFilter2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei; p5: GLenum; p6: GLenum; const p7: PGLvoid; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glColorTableSGI_t  }
  _ALLEGRO_glColorTableSGI_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glColorTableParameterfvSGI_t  }
  _ALLEGRO_glColorTableParameterfvSGI_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glColorTableParameterivSGI_t  }
  _ALLEGRO_glColorTableParameterivSGI_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glCopyColorTableSGI_t  }
  _ALLEGRO_glCopyColorTableSGI_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glGetColorTableSGI_t  }
  _ALLEGRO_glGetColorTableSGI_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetColorTableParameterfvSGI_t  }
  _ALLEGRO_glGetColorTableParameterfvSGI_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetColorTableParameterivSGI_t  }
  _ALLEGRO_glGetColorTableParameterivSGI_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glPixelTexGenSGIX_t  }
  _ALLEGRO_glPixelTexGenSGIX_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glPixelTexGenParameteriSGIS_t  }
  _ALLEGRO_glPixelTexGenParameteriSGIS_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glPixelTexGenParameterivSGIS_t  }
  _ALLEGRO_glPixelTexGenParameterivSGIS_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glPixelTexGenParameterfSGIS_t  }
  _ALLEGRO_glPixelTexGenParameterfSGIS_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glPixelTexGenParameterfvSGIS_t  }
  _ALLEGRO_glPixelTexGenParameterfvSGIS_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glGetPixelTexGenParameterivSGIS_t  }
  _ALLEGRO_glGetPixelTexGenParameterivSGIS_t = procedure(p1: GLenum; p2: PGLint); cdecl;

  { _ALLEGRO_glGetPixelTexGenParameterfvSGIS_t  }
  _ALLEGRO_glGetPixelTexGenParameterfvSGIS_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glTexImage4DSGIS_t  }
  _ALLEGRO_glTexImage4DSGIS_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLsizei; p7: GLsizei; p8: GLint; p9: GLenum; p10: GLenum; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glTexSubImage4DSGIS_t  }
  _ALLEGRO_glTexSubImage4DSGIS_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLsizei; p10: GLsizei; p11: GLenum; p12: GLenum; const p13: PGLvoid); cdecl;

  { _ALLEGRO_glAreTexturesResidentEXT_t  }
  _ALLEGRO_glAreTexturesResidentEXT_t = function(p1: GLsizei; const p2: PGLuint; p3: PGLboolean): GLboolean; cdecl;

  { _ALLEGRO_glBindTextureEXT_t  }
  _ALLEGRO_glBindTextureEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteTexturesEXT_t  }
  _ALLEGRO_glDeleteTexturesEXT_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenTexturesEXT_t  }
  _ALLEGRO_glGenTexturesEXT_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsTextureEXT_t  }
  _ALLEGRO_glIsTextureEXT_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glPrioritizeTexturesEXT_t  }
  _ALLEGRO_glPrioritizeTexturesEXT_t = procedure(p1: GLsizei; const p2: PGLuint; const p3: PGLclampf); cdecl;

  { _ALLEGRO_glDetailTexFuncSGIS_t  }
  _ALLEGRO_glDetailTexFuncSGIS_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetDetailTexFuncSGIS_t  }
  _ALLEGRO_glGetDetailTexFuncSGIS_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glSharpenTexFuncSGIS_t  }
  _ALLEGRO_glSharpenTexFuncSGIS_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetSharpenTexFuncSGIS_t  }
  _ALLEGRO_glGetSharpenTexFuncSGIS_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glSampleMaskSGIS_t  }
  _ALLEGRO_glSampleMaskSGIS_t = procedure(p1: GLclampf; p2: GLboolean); cdecl;

  { _ALLEGRO_glSamplePatternSGIS_t  }
  _ALLEGRO_glSamplePatternSGIS_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glArrayElementEXT_t  }
  _ALLEGRO_glArrayElementEXT_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glColorPointerEXT_t  }
  _ALLEGRO_glColorPointerEXT_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glDrawArraysEXT_t  }
  _ALLEGRO_glDrawArraysEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei); cdecl;

  { _ALLEGRO_glEdgeFlagPointerEXT_t  }
  _ALLEGRO_glEdgeFlagPointerEXT_t = procedure(p1: GLsizei; p2: GLsizei; const p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetPointervEXT_t  }
  _ALLEGRO_glGetPointervEXT_t = procedure(p1: GLenum; p2: PPGLvoid); cdecl;

  { _ALLEGRO_glIndexPointerEXT_t  }
  _ALLEGRO_glIndexPointerEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glNormalPointerEXT_t  }
  _ALLEGRO_glNormalPointerEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glTexCoordPointerEXT_t  }
  _ALLEGRO_glTexCoordPointerEXT_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glVertexPointerEXT_t  }
  _ALLEGRO_glVertexPointerEXT_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glBlendEquationEXT_t  }
  _ALLEGRO_glBlendEquationEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glSpriteParameterfSGIX_t  }
  _ALLEGRO_glSpriteParameterfSGIX_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glSpriteParameterfvSGIX_t  }
  _ALLEGRO_glSpriteParameterfvSGIX_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glSpriteParameteriSGIX_t  }
  _ALLEGRO_glSpriteParameteriSGIX_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glSpriteParameterivSGIX_t  }
  _ALLEGRO_glSpriteParameterivSGIX_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glPointParameterfEXT_t  }
  _ALLEGRO_glPointParameterfEXT_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glPointParameterfvEXT_t  }
  _ALLEGRO_glPointParameterfvEXT_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glPointParameterfSGIS_t  }
  _ALLEGRO_glPointParameterfSGIS_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glPointParameterfvSGIS_t  }
  _ALLEGRO_glPointParameterfvSGIS_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glGetInstrumentsSGIX_t  }
  _ALLEGRO_glGetInstrumentsSGIX_t = function(): GLint; cdecl;

  { _ALLEGRO_glInstrumentsBufferSGIX_t  }
  _ALLEGRO_glInstrumentsBufferSGIX_t = procedure(p1: GLsizei; p2: PGLint); cdecl;

  { _ALLEGRO_glPollInstrumentsSGIX_t  }
  _ALLEGRO_glPollInstrumentsSGIX_t = function(p1: PGLint): GLint; cdecl;

  { _ALLEGRO_glReadInstrumentsSGIX_t  }
  _ALLEGRO_glReadInstrumentsSGIX_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glStartInstrumentsSGIX_t  }
  _ALLEGRO_glStartInstrumentsSGIX_t = procedure(); cdecl;

  { _ALLEGRO_glStopInstrumentsSGIX_t  }
  _ALLEGRO_glStopInstrumentsSGIX_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glFrameZoomSGIX_t  }
  _ALLEGRO_glFrameZoomSGIX_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glTagSampleBufferSGIX_t  }
  _ALLEGRO_glTagSampleBufferSGIX_t = procedure(); cdecl;

  { _ALLEGRO_glDeformationMap3dSGIX_t  }
  _ALLEGRO_glDeformationMap3dSGIX_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLint; p5: GLint; p6: GLdouble; p7: GLdouble; p8: GLint; p9: GLint; p10: GLdouble; p11: GLdouble; p12: GLint; p13: GLint; const p14: PGLdouble); cdecl;

  { _ALLEGRO_glDeformationMap3fSGIX_t  }
  _ALLEGRO_glDeformationMap3fSGIX_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLint; p5: GLint; p6: GLfloat; p7: GLfloat; p8: GLint; p9: GLint; p10: GLfloat; p11: GLfloat; p12: GLint; p13: GLint; const p14: PGLfloat); cdecl;

  { _ALLEGRO_glDeformSGIX_t  }
  _ALLEGRO_glDeformSGIX_t = procedure(p1: GLbitfield); cdecl;

  { _ALLEGRO_glLoadIdentityDeformationMapSGIX_t  }
  _ALLEGRO_glLoadIdentityDeformationMapSGIX_t = procedure(p1: GLbitfield); cdecl;

  { _ALLEGRO_glReferencePlaneSGIX_t  }
  _ALLEGRO_glReferencePlaneSGIX_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glFlushRasterSGIX_t  }
  _ALLEGRO_glFlushRasterSGIX_t = procedure(); cdecl;

  { _ALLEGRO_glFogFuncSGIS_t  }
  _ALLEGRO_glFogFuncSGIS_t = procedure(p1: GLsizei; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glGetFogFuncSGIS_t  }
  _ALLEGRO_glGetFogFuncSGIS_t = procedure(p1: PGLfloat); cdecl;

  { _ALLEGRO_glImageTransformParameteriHP_t  }
  _ALLEGRO_glImageTransformParameteriHP_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glImageTransformParameterfHP_t  }
  _ALLEGRO_glImageTransformParameterfHP_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glImageTransformParameterivHP_t  }
  _ALLEGRO_glImageTransformParameterivHP_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glImageTransformParameterfvHP_t  }
  _ALLEGRO_glImageTransformParameterfvHP_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetImageTransformParameterivHP_t  }
  _ALLEGRO_glGetImageTransformParameterivHP_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetImageTransformParameterfvHP_t  }
  _ALLEGRO_glGetImageTransformParameterfvHP_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glCopyColorSubTableEXT_t  }
  _ALLEGRO_glCopyColorSubTableEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glHintPGI_t  }
  _ALLEGRO_glHintPGI_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glColorTableEXT_t  }
  _ALLEGRO_glColorTableEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLenum; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glGetColorTableEXT_t  }
  _ALLEGRO_glGetColorTableEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glGetColorTableParameterivEXT_t  }
  _ALLEGRO_glGetColorTableParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetColorTableParameterfvEXT_t  }
  _ALLEGRO_glGetColorTableParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetListParameterfvSGIX_t  }
  _ALLEGRO_glGetListParameterfvSGIX_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetListParameterivSGIX_t  }
  _ALLEGRO_glGetListParameterivSGIX_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glListParameterfSGIX_t  }
  _ALLEGRO_glListParameterfSGIX_t = procedure(p1: GLuint; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glListParameterfvSGIX_t  }
  _ALLEGRO_glListParameterfvSGIX_t = procedure(p1: GLuint; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glListParameteriSGIX_t  }
  _ALLEGRO_glListParameteriSGIX_t = procedure(p1: GLuint; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glListParameterivSGIX_t  }
  _ALLEGRO_glListParameterivSGIX_t = procedure(p1: GLuint; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glIndexMaterialEXT_t  }
  _ALLEGRO_glIndexMaterialEXT_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glIndexFuncEXT_t  }
  _ALLEGRO_glIndexFuncEXT_t = procedure(p1: GLenum; p2: GLclampf); cdecl;

  { _ALLEGRO_glLockArraysEXT_t  }
  _ALLEGRO_glLockArraysEXT_t = procedure(p1: GLint; p2: GLsizei); cdecl;

  { _ALLEGRO_glUnlockArraysEXT_t  }
  _ALLEGRO_glUnlockArraysEXT_t = procedure(); cdecl;

  { _ALLEGRO_glCullParameterdvEXT_t  }
  _ALLEGRO_glCullParameterdvEXT_t = procedure(p1: GLenum; p2: PGLdouble); cdecl;

  { _ALLEGRO_glCullParameterfvEXT_t  }
  _ALLEGRO_glCullParameterfvEXT_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glFragmentColorMaterialSGIX_t  }
  _ALLEGRO_glFragmentColorMaterialSGIX_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glFragmentLightfSGIX_t  }
  _ALLEGRO_glFragmentLightfSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glFragmentLightfvSGIX_t  }
  _ALLEGRO_glFragmentLightfvSGIX_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glFragmentLightiSGIX_t  }
  _ALLEGRO_glFragmentLightiSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glFragmentLightivSGIX_t  }
  _ALLEGRO_glFragmentLightivSGIX_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glFragmentLightModelfSGIX_t  }
  _ALLEGRO_glFragmentLightModelfSGIX_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glFragmentLightModelfvSGIX_t  }
  _ALLEGRO_glFragmentLightModelfvSGIX_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glFragmentLightModeliSGIX_t  }
  _ALLEGRO_glFragmentLightModeliSGIX_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glFragmentLightModelivSGIX_t  }
  _ALLEGRO_glFragmentLightModelivSGIX_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glFragmentMaterialfSGIX_t  }
  _ALLEGRO_glFragmentMaterialfSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glFragmentMaterialfvSGIX_t  }
  _ALLEGRO_glFragmentMaterialfvSGIX_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glFragmentMaterialiSGIX_t  }
  _ALLEGRO_glFragmentMaterialiSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glFragmentMaterialivSGIX_t  }
  _ALLEGRO_glFragmentMaterialivSGIX_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glGetFragmentLightfvSGIX_t  }
  _ALLEGRO_glGetFragmentLightfvSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetFragmentLightivSGIX_t  }
  _ALLEGRO_glGetFragmentLightivSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetFragmentMaterialfvSGIX_t  }
  _ALLEGRO_glGetFragmentMaterialfvSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetFragmentMaterialivSGIX_t  }
  _ALLEGRO_glGetFragmentMaterialivSGIX_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glLightEnviSGIX_t  }
  _ALLEGRO_glLightEnviSGIX_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glDrawRangeElementsEXT_t  }
  _ALLEGRO_glDrawRangeElementsEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLsizei; p5: GLenum; const p6: PGLvoid); cdecl;

  { _ALLEGRO_glApplyTextureEXT_t  }
  _ALLEGRO_glApplyTextureEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glTextureLightEXT_t  }
  _ALLEGRO_glTextureLightEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glTextureMaterialEXT_t  }
  _ALLEGRO_glTextureMaterialEXT_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glAsyncMarkerSGIX_t  }
  _ALLEGRO_glAsyncMarkerSGIX_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glFinishAsyncSGIX_t  }
  _ALLEGRO_glFinishAsyncSGIX_t = function(p1: PGLuint): GLint; cdecl;

  { _ALLEGRO_glPollAsyncSGIX_t  }
  _ALLEGRO_glPollAsyncSGIX_t = function(p1: PGLuint): GLint; cdecl;

  { _ALLEGRO_glGenAsyncMarkersSGIX_t  }
  _ALLEGRO_glGenAsyncMarkersSGIX_t = function(p1: GLsizei): GLuint; cdecl;

  { _ALLEGRO_glDeleteAsyncMarkersSGIX_t  }
  _ALLEGRO_glDeleteAsyncMarkersSGIX_t = procedure(p1: GLuint; p2: GLsizei); cdecl;

  { _ALLEGRO_glIsAsyncMarkerSGIX_t  }
  _ALLEGRO_glIsAsyncMarkerSGIX_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glVertexPointervINTEL_t  }
  _ALLEGRO_glVertexPointervINTEL_t = procedure(p1: GLint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glNormalPointervINTEL_t  }
  _ALLEGRO_glNormalPointervINTEL_t = procedure(p1: GLenum; p2: PPGLvoid); cdecl;

  { _ALLEGRO_glColorPointervINTEL_t  }
  _ALLEGRO_glColorPointervINTEL_t = procedure(p1: GLint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glTexCoordPointervINTEL_t  }
  _ALLEGRO_glTexCoordPointervINTEL_t = procedure(p1: GLint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glPixelTransformParameteriEXT_t  }
  _ALLEGRO_glPixelTransformParameteriEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glPixelTransformParameterfEXT_t  }
  _ALLEGRO_glPixelTransformParameterfEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLfloat); cdecl;

  { _ALLEGRO_glPixelTransformParameterivEXT_t  }
  _ALLEGRO_glPixelTransformParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glPixelTransformParameterfvEXT_t  }
  _ALLEGRO_glPixelTransformParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glSecondaryColor3bEXT_t  }
  _ALLEGRO_glSecondaryColor3bEXT_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glSecondaryColor3bvEXT_t  }
  _ALLEGRO_glSecondaryColor3bvEXT_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glSecondaryColor3dEXT_t  }
  _ALLEGRO_glSecondaryColor3dEXT_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glSecondaryColor3dvEXT_t  }
  _ALLEGRO_glSecondaryColor3dvEXT_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glSecondaryColor3fEXT_t  }
  _ALLEGRO_glSecondaryColor3fEXT_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glSecondaryColor3fvEXT_t  }
  _ALLEGRO_glSecondaryColor3fvEXT_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glSecondaryColor3iEXT_t  }
  _ALLEGRO_glSecondaryColor3iEXT_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glSecondaryColor3ivEXT_t  }
  _ALLEGRO_glSecondaryColor3ivEXT_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glSecondaryColor3sEXT_t  }
  _ALLEGRO_glSecondaryColor3sEXT_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glSecondaryColor3svEXT_t  }
  _ALLEGRO_glSecondaryColor3svEXT_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glSecondaryColor3ubEXT_t  }
  _ALLEGRO_glSecondaryColor3ubEXT_t = procedure(p1: GLubyte; p2: GLubyte; p3: GLubyte); cdecl;

  { _ALLEGRO_glSecondaryColor3ubvEXT_t  }
  _ALLEGRO_glSecondaryColor3ubvEXT_t = procedure(const p1: PGLubyte); cdecl;

  { _ALLEGRO_glSecondaryColor3uiEXT_t  }
  _ALLEGRO_glSecondaryColor3uiEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glSecondaryColor3uivEXT_t  }
  _ALLEGRO_glSecondaryColor3uivEXT_t = procedure(const p1: PGLuint); cdecl;

  { _ALLEGRO_glSecondaryColor3usEXT_t  }
  _ALLEGRO_glSecondaryColor3usEXT_t = procedure(p1: GLushort; p2: GLushort; p3: GLushort); cdecl;

  { _ALLEGRO_glSecondaryColor3usvEXT_t  }
  _ALLEGRO_glSecondaryColor3usvEXT_t = procedure(const p1: PGLushort); cdecl;

  { _ALLEGRO_glSecondaryColorPointerEXT_t  }
  _ALLEGRO_glSecondaryColorPointerEXT_t = procedure(p1: GLint; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glTextureNormalEXT_t  }
  _ALLEGRO_glTextureNormalEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMultiDrawArraysEXT_t  }
  _ALLEGRO_glMultiDrawArraysEXT_t = procedure(p1: GLenum; p2: PGLint; p3: PGLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawElementsEXT_t  }
  _ALLEGRO_glMultiDrawElementsEXT_t = procedure(p1: GLenum; const p2: PGLsizei; p3: GLenum; p4: PPGLvoid; p5: GLsizei); cdecl;

  { _ALLEGRO_glFogCoordfEXT_t  }
  _ALLEGRO_glFogCoordfEXT_t = procedure(p1: GLfloat); cdecl;

  { _ALLEGRO_glFogCoordfvEXT_t  }
  _ALLEGRO_glFogCoordfvEXT_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glFogCoorddEXT_t  }
  _ALLEGRO_glFogCoorddEXT_t = procedure(p1: GLdouble); cdecl;

  { _ALLEGRO_glFogCoorddvEXT_t  }
  _ALLEGRO_glFogCoorddvEXT_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glFogCoordPointerEXT_t  }
  _ALLEGRO_glFogCoordPointerEXT_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glTangent3bEXT_t  }
  _ALLEGRO_glTangent3bEXT_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glTangent3bvEXT_t  }
  _ALLEGRO_glTangent3bvEXT_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glTangent3dEXT_t  }
  _ALLEGRO_glTangent3dEXT_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glTangent3dvEXT_t  }
  _ALLEGRO_glTangent3dvEXT_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glTangent3fEXT_t  }
  _ALLEGRO_glTangent3fEXT_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glTangent3fvEXT_t  }
  _ALLEGRO_glTangent3fvEXT_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glTangent3iEXT_t  }
  _ALLEGRO_glTangent3iEXT_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glTangent3ivEXT_t  }
  _ALLEGRO_glTangent3ivEXT_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glTangent3sEXT_t  }
  _ALLEGRO_glTangent3sEXT_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glTangent3svEXT_t  }
  _ALLEGRO_glTangent3svEXT_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glBinormal3bEXT_t  }
  _ALLEGRO_glBinormal3bEXT_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glBinormal3bvEXT_t  }
  _ALLEGRO_glBinormal3bvEXT_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glBinormal3dEXT_t  }
  _ALLEGRO_glBinormal3dEXT_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glBinormal3dvEXT_t  }
  _ALLEGRO_glBinormal3dvEXT_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glBinormal3fEXT_t  }
  _ALLEGRO_glBinormal3fEXT_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glBinormal3fvEXT_t  }
  _ALLEGRO_glBinormal3fvEXT_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glBinormal3iEXT_t  }
  _ALLEGRO_glBinormal3iEXT_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glBinormal3ivEXT_t  }
  _ALLEGRO_glBinormal3ivEXT_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glBinormal3sEXT_t  }
  _ALLEGRO_glBinormal3sEXT_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glBinormal3svEXT_t  }
  _ALLEGRO_glBinormal3svEXT_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glTangentPointerEXT_t  }
  _ALLEGRO_glTangentPointerEXT_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glBinormalPointerEXT_t  }
  _ALLEGRO_glBinormalPointerEXT_t = procedure(p1: GLenum; p2: GLsizei; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glFinishTextureSUNX_t  }
  _ALLEGRO_glFinishTextureSUNX_t = procedure(); cdecl;

  { _ALLEGRO_glGlobalAlphaFactorbSUN_t  }
  _ALLEGRO_glGlobalAlphaFactorbSUN_t = procedure(p1: GLbyte); cdecl;

  { _ALLEGRO_glGlobalAlphaFactorsSUN_t  }
  _ALLEGRO_glGlobalAlphaFactorsSUN_t = procedure(p1: GLshort); cdecl;

  { _ALLEGRO_glGlobalAlphaFactoriSUN_t  }
  _ALLEGRO_glGlobalAlphaFactoriSUN_t = procedure(p1: GLint); cdecl;

  { _ALLEGRO_glGlobalAlphaFactorfSUN_t  }
  _ALLEGRO_glGlobalAlphaFactorfSUN_t = procedure(p1: GLfloat); cdecl;

  { _ALLEGRO_glGlobalAlphaFactordSUN_t  }
  _ALLEGRO_glGlobalAlphaFactordSUN_t = procedure(p1: GLdouble); cdecl;

  { _ALLEGRO_glGlobalAlphaFactorubSUN_t  }
  _ALLEGRO_glGlobalAlphaFactorubSUN_t = procedure(p1: GLubyte); cdecl;

  { _ALLEGRO_glGlobalAlphaFactorusSUN_t  }
  _ALLEGRO_glGlobalAlphaFactorusSUN_t = procedure(p1: GLushort); cdecl;

  { _ALLEGRO_glGlobalAlphaFactoruiSUN_t  }
  _ALLEGRO_glGlobalAlphaFactoruiSUN_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glReplacementCodeuiSUN_t  }
  _ALLEGRO_glReplacementCodeuiSUN_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glReplacementCodeusSUN_t  }
  _ALLEGRO_glReplacementCodeusSUN_t = procedure(p1: GLushort); cdecl;

  { _ALLEGRO_glReplacementCodeubSUN_t  }
  _ALLEGRO_glReplacementCodeubSUN_t = procedure(p1: GLubyte); cdecl;

  { _ALLEGRO_glReplacementCodeuivSUN_t  }
  _ALLEGRO_glReplacementCodeuivSUN_t = procedure(const p1: PGLuint); cdecl;

  { _ALLEGRO_glReplacementCodeusvSUN_t  }
  _ALLEGRO_glReplacementCodeusvSUN_t = procedure(const p1: PGLushort); cdecl;

  { _ALLEGRO_glReplacementCodeubvSUN_t  }
  _ALLEGRO_glReplacementCodeubvSUN_t = procedure(const p1: PGLubyte); cdecl;

  { _ALLEGRO_glReplacementCodePointerSUN_t  }
  _ALLEGRO_glReplacementCodePointerSUN_t = procedure(p1: GLenum; p2: GLsizei; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glColor4ubVertex2fSUN_t  }
  _ALLEGRO_glColor4ubVertex2fSUN_t = procedure(p1: GLubyte; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glColor4ubVertex2fvSUN_t  }
  _ALLEGRO_glColor4ubVertex2fvSUN_t = procedure(const p1: PGLubyte; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glColor4ubVertex3fSUN_t  }
  _ALLEGRO_glColor4ubVertex3fSUN_t = procedure(p1: GLubyte; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLfloat; p6: GLfloat; p7: GLfloat); cdecl;

  { _ALLEGRO_glColor4ubVertex3fvSUN_t  }
  _ALLEGRO_glColor4ubVertex3fvSUN_t = procedure(const p1: PGLubyte; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glColor3fVertex3fSUN_t  }
  _ALLEGRO_glColor3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glColor3fVertex3fvSUN_t  }
  _ALLEGRO_glColor3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glNormal3fVertex3fSUN_t  }
  _ALLEGRO_glNormal3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glNormal3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glColor4fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glColor4fNormal3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat; p10: GLfloat); cdecl;

  { _ALLEGRO_glColor4fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glColor4fNormal3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fVertex3fSUN_t  }
  _ALLEGRO_glTexCoord2fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fVertex3fvSUN_t  }
  _ALLEGRO_glTexCoord2fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord4fVertex4fSUN_t  }
  _ALLEGRO_glTexCoord4fVertex4fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord4fVertex4fvSUN_t  }
  _ALLEGRO_glTexCoord4fVertex4fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t  }
  _ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLubyte; p4: GLubyte; p5: GLubyte; p6: GLubyte; p7: GLfloat; p8: GLfloat; p9: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t  }
  _ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLubyte; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t  }
  _ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t  }
  _ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat; p10: GLfloat; p11: GLfloat; p12: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat; const p3: PGLfloat; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t  }
  _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat; p10: GLfloat; p11: GLfloat; p12: GLfloat; p13: GLfloat; p14: GLfloat; p15: GLfloat); cdecl;

  { _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t  }
  _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t = procedure(const p1: PGLfloat; const p2: PGLfloat; const p3: PGLfloat; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t = procedure(p1: GLuint; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLubyte; p6: GLfloat; p7: GLfloat; p8: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLubyte; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat; p10: GLfloat; p11: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat; p8: GLfloat; p9: GLfloat; p10: GLfloat; p11: GLfloat; p12: GLfloat; p13: GLfloat); cdecl;

  { _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t  }
  _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t = procedure(const p1: PGLuint; const p2: PGLfloat; const p3: PGLfloat; const p4: PGLfloat; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glBlendFuncSeparateEXT_t  }
  _ALLEGRO_glBlendFuncSeparateEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glBlendFuncSeparateINGR_t  }
  _ALLEGRO_glBlendFuncSeparateINGR_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glVertexWeightfEXT_t  }
  _ALLEGRO_glVertexWeightfEXT_t = procedure(p1: GLfloat); cdecl;

  { _ALLEGRO_glVertexWeightfvEXT_t  }
  _ALLEGRO_glVertexWeightfvEXT_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glVertexWeightPointerEXT_t  }
  _ALLEGRO_glVertexWeightPointerEXT_t = procedure(p1: GLsizei; p2: GLenum; p3: GLsizei; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glFlushVertexArrayRangeNV_t  }
  _ALLEGRO_glFlushVertexArrayRangeNV_t = procedure(); cdecl;

  { _ALLEGRO_glVertexArrayRangeNV_t  }
  _ALLEGRO_glVertexArrayRangeNV_t = procedure(p1: GLsizei; const p2: PGLvoid); cdecl;

  { _ALLEGRO_glCombinerParameterfvNV_t  }
  _ALLEGRO_glCombinerParameterfvNV_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glCombinerParameterfNV_t  }
  _ALLEGRO_glCombinerParameterfNV_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glCombinerParameterivNV_t  }
  _ALLEGRO_glCombinerParameterivNV_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glCombinerParameteriNV_t  }
  _ALLEGRO_glCombinerParameteriNV_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glCombinerInputNV_t  }
  _ALLEGRO_glCombinerInputNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum; p5: GLenum; p6: GLenum); cdecl;

  { _ALLEGRO_glCombinerOutputNV_t  }
  _ALLEGRO_glCombinerOutputNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum; p5: GLenum; p6: GLenum; p7: GLenum; p8: GLboolean; p9: GLboolean; p10: GLboolean); cdecl;

  { _ALLEGRO_glFinalCombinerInputNV_t  }
  _ALLEGRO_glFinalCombinerInputNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glGetCombinerInputParameterfvNV_t  }
  _ALLEGRO_glGetCombinerInputParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum; p5: PGLfloat); cdecl;

  { _ALLEGRO_glGetCombinerInputParameterivNV_t  }
  _ALLEGRO_glGetCombinerInputParameterivNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLenum; p5: PGLint); cdecl;

  { _ALLEGRO_glGetCombinerOutputParameterfvNV_t  }
  _ALLEGRO_glGetCombinerOutputParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetCombinerOutputParameterivNV_t  }
  _ALLEGRO_glGetCombinerOutputParameterivNV_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetFinalCombinerInputParameterfvNV_t  }
  _ALLEGRO_glGetFinalCombinerInputParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetFinalCombinerInputParameterivNV_t  }
  _ALLEGRO_glGetFinalCombinerInputParameterivNV_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glResizeBuffersMESA_t  }
  _ALLEGRO_glResizeBuffersMESA_t = procedure(); cdecl;

  { _ALLEGRO_glWindowPos2dMESA_t  }
  _ALLEGRO_glWindowPos2dMESA_t = procedure(p1: GLdouble; p2: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos2dvMESA_t  }
  _ALLEGRO_glWindowPos2dvMESA_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos2fMESA_t  }
  _ALLEGRO_glWindowPos2fMESA_t = procedure(p1: GLfloat; p2: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos2fvMESA_t  }
  _ALLEGRO_glWindowPos2fvMESA_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos2iMESA_t  }
  _ALLEGRO_glWindowPos2iMESA_t = procedure(p1: GLint; p2: GLint); cdecl;

  { _ALLEGRO_glWindowPos2ivMESA_t  }
  _ALLEGRO_glWindowPos2ivMESA_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos2sMESA_t  }
  _ALLEGRO_glWindowPos2sMESA_t = procedure(p1: GLshort; p2: GLshort); cdecl;

  { _ALLEGRO_glWindowPos2svMESA_t  }
  _ALLEGRO_glWindowPos2svMESA_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glWindowPos3dMESA_t  }
  _ALLEGRO_glWindowPos3dMESA_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos3dvMESA_t  }
  _ALLEGRO_glWindowPos3dvMESA_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos3fMESA_t  }
  _ALLEGRO_glWindowPos3fMESA_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos3fvMESA_t  }
  _ALLEGRO_glWindowPos3fvMESA_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos3iMESA_t  }
  _ALLEGRO_glWindowPos3iMESA_t = procedure(p1: GLint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glWindowPos3ivMESA_t  }
  _ALLEGRO_glWindowPos3ivMESA_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos3sMESA_t  }
  _ALLEGRO_glWindowPos3sMESA_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glWindowPos3svMESA_t  }
  _ALLEGRO_glWindowPos3svMESA_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glWindowPos4dMESA_t  }
  _ALLEGRO_glWindowPos4dMESA_t = procedure(p1: GLdouble; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glWindowPos4dvMESA_t  }
  _ALLEGRO_glWindowPos4dvMESA_t = procedure(const p1: PGLdouble); cdecl;

  { _ALLEGRO_glWindowPos4fMESA_t  }
  _ALLEGRO_glWindowPos4fMESA_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glWindowPos4fvMESA_t  }
  _ALLEGRO_glWindowPos4fvMESA_t = procedure(const p1: PGLfloat); cdecl;

  { _ALLEGRO_glWindowPos4iMESA_t  }
  _ALLEGRO_glWindowPos4iMESA_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glWindowPos4ivMESA_t  }
  _ALLEGRO_glWindowPos4ivMESA_t = procedure(const p1: PGLint); cdecl;

  { _ALLEGRO_glWindowPos4sMESA_t  }
  _ALLEGRO_glWindowPos4sMESA_t = procedure(p1: GLshort; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glWindowPos4svMESA_t  }
  _ALLEGRO_glWindowPos4svMESA_t = procedure(const p1: PGLshort); cdecl;

  { _ALLEGRO_glMultiModeDrawArraysIBM_t  }
  _ALLEGRO_glMultiModeDrawArraysIBM_t = procedure(p1: GLenum; const p2: PGLint; const p3: PGLsizei; p4: GLsizei; p5: GLint); cdecl;

  { _ALLEGRO_glMultiModeDrawElementsIBM_t  }
  _ALLEGRO_glMultiModeDrawElementsIBM_t = procedure(const p1: PGLenum; const p2: PGLsizei; p3: GLenum; p4: PPGLvoid; p5: GLsizei; p6: GLint); cdecl;

  { _ALLEGRO_glTbufferMask3DFX_t  }
  _ALLEGRO_glTbufferMask3DFX_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glSampleMaskEXT_t  }
  _ALLEGRO_glSampleMaskEXT_t = procedure(p1: GLclampf; p2: GLboolean); cdecl;

  { _ALLEGRO_glSamplePatternEXT_t  }
  _ALLEGRO_glSamplePatternEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glTextureColorMaskSGIS_t  }
  _ALLEGRO_glTextureColorMaskSGIS_t = procedure(p1: GLboolean; p2: GLboolean; p3: GLboolean; p4: GLboolean); cdecl;

  { _ALLEGRO_glIglooInterfaceSGIX_t  }
  _ALLEGRO_glIglooInterfaceSGIX_t = procedure(p1: GLenum; const p2: PGLvoid); cdecl;

  { _ALLEGRO_glDeleteFencesNV_t  }
  _ALLEGRO_glDeleteFencesNV_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenFencesNV_t  }
  _ALLEGRO_glGenFencesNV_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsFenceNV_t  }
  _ALLEGRO_glIsFenceNV_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glTestFenceNV_t  }
  _ALLEGRO_glTestFenceNV_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glGetFenceivNV_t  }
  _ALLEGRO_glGetFenceivNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glFinishFenceNV_t  }
  _ALLEGRO_glFinishFenceNV_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glSetFenceNV_t  }
  _ALLEGRO_glSetFenceNV_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glMapControlPointsNV_t  }
  _ALLEGRO_glMapControlPointsNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLint; p7: GLint; p8: GLboolean; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glMapParameterivNV_t  }
  _ALLEGRO_glMapParameterivNV_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLint); cdecl;

  { _ALLEGRO_glMapParameterfvNV_t  }
  _ALLEGRO_glMapParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetMapControlPointsNV_t  }
  _ALLEGRO_glGetMapControlPointsNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: GLsizei; p5: GLsizei; p6: GLboolean; p7: PGLvoid); cdecl;

  { _ALLEGRO_glGetMapParameterivNV_t  }
  _ALLEGRO_glGetMapParameterivNV_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetMapParameterfvNV_t  }
  _ALLEGRO_glGetMapParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetMapAttribParameterivNV_t  }
  _ALLEGRO_glGetMapAttribParameterivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetMapAttribParameterfvNV_t  }
  _ALLEGRO_glGetMapAttribParameterfvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glEvalMapsNV_t  }
  _ALLEGRO_glEvalMapsNV_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glCombinerStageParameterfvNV_t  }
  _ALLEGRO_glCombinerStageParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetCombinerStageParameterfvNV_t  }
  _ALLEGRO_glGetCombinerStageParameterfvNV_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glAreProgramsResidentNV_t  }
  _ALLEGRO_glAreProgramsResidentNV_t = function(p1: GLsizei; const p2: PGLuint; p3: PGLboolean): GLboolean; cdecl;

  { _ALLEGRO_glBindProgramNV_t  }
  _ALLEGRO_glBindProgramNV_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteProgramsNV_t  }
  _ALLEGRO_glDeleteProgramsNV_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glExecuteProgramNV_t  }
  _ALLEGRO_glExecuteProgramNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glGenProgramsNV_t  }
  _ALLEGRO_glGenProgramsNV_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glGetProgramParameterdvNV_t  }
  _ALLEGRO_glGetProgramParameterdvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: PGLdouble); cdecl;

  { _ALLEGRO_glGetProgramParameterfvNV_t  }
  _ALLEGRO_glGetProgramParameterfvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramivNV_t  }
  _ALLEGRO_glGetProgramivNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetProgramStringNV_t  }
  _ALLEGRO_glGetProgramStringNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLubyte); cdecl;

  { _ALLEGRO_glGetTrackMatrixivNV_t  }
  _ALLEGRO_glGetTrackMatrixivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribdvNV_t  }
  _ALLEGRO_glGetVertexAttribdvNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetVertexAttribfvNV_t  }
  _ALLEGRO_glGetVertexAttribfvNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVertexAttribivNV_t  }
  _ALLEGRO_glGetVertexAttribivNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribPointervNV_t  }
  _ALLEGRO_glGetVertexAttribPointervNV_t = procedure(p1: GLuint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glIsProgramNV_t  }
  _ALLEGRO_glIsProgramNV_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glLoadProgramNV_t  }
  _ALLEGRO_glLoadProgramNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLubyte); cdecl;

  { _ALLEGRO_glProgramParameter4dNV_t  }
  _ALLEGRO_glProgramParameter4dNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLdouble; p4: GLdouble; p5: GLdouble; p6: GLdouble); cdecl;

  { _ALLEGRO_glProgramParameter4dvNV_t  }
  _ALLEGRO_glProgramParameter4dvNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glProgramParameter4fNV_t  }
  _ALLEGRO_glProgramParameter4fNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glProgramParameter4fvNV_t  }
  _ALLEGRO_glProgramParameter4fvNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glProgramParameters4dvNV_t  }
  _ALLEGRO_glProgramParameters4dvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; const p4: PGLdouble); cdecl;

  { _ALLEGRO_glProgramParameters4fvNV_t  }
  _ALLEGRO_glProgramParameters4fvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glRequestResidentProgramsNV_t  }
  _ALLEGRO_glRequestResidentProgramsNV_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glTrackMatrixNV_t  }
  _ALLEGRO_glTrackMatrixNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLenum; p4: GLenum); cdecl;

  { _ALLEGRO_glVertexAttribPointerNV_t  }
  _ALLEGRO_glVertexAttribPointerNV_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glVertexAttrib1dNV_t  }
  _ALLEGRO_glVertexAttrib1dNV_t = procedure(p1: GLuint; p2: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib1dvNV_t  }
  _ALLEGRO_glVertexAttrib1dvNV_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib1fNV_t  }
  _ALLEGRO_glVertexAttrib1fNV_t = procedure(p1: GLuint; p2: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1fvNV_t  }
  _ALLEGRO_glVertexAttrib1fvNV_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib1sNV_t  }
  _ALLEGRO_glVertexAttrib1sNV_t = procedure(p1: GLuint; p2: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib1svNV_t  }
  _ALLEGRO_glVertexAttrib1svNV_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2dNV_t  }
  _ALLEGRO_glVertexAttrib2dNV_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2dvNV_t  }
  _ALLEGRO_glVertexAttrib2dvNV_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib2fNV_t  }
  _ALLEGRO_glVertexAttrib2fNV_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2fvNV_t  }
  _ALLEGRO_glVertexAttrib2fvNV_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib2sNV_t  }
  _ALLEGRO_glVertexAttrib2sNV_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib2svNV_t  }
  _ALLEGRO_glVertexAttrib2svNV_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3dNV_t  }
  _ALLEGRO_glVertexAttrib3dNV_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3dvNV_t  }
  _ALLEGRO_glVertexAttrib3dvNV_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib3fNV_t  }
  _ALLEGRO_glVertexAttrib3fNV_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3fvNV_t  }
  _ALLEGRO_glVertexAttrib3fvNV_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib3sNV_t  }
  _ALLEGRO_glVertexAttrib3sNV_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib3svNV_t  }
  _ALLEGRO_glVertexAttrib3svNV_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4dNV_t  }
  _ALLEGRO_glVertexAttrib4dNV_t = procedure(p1: GLuint; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4dvNV_t  }
  _ALLEGRO_glVertexAttrib4dvNV_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttrib4fNV_t  }
  _ALLEGRO_glVertexAttrib4fNV_t = procedure(p1: GLuint; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4fvNV_t  }
  _ALLEGRO_glVertexAttrib4fvNV_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttrib4sNV_t  }
  _ALLEGRO_glVertexAttrib4sNV_t = procedure(p1: GLuint; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4svNV_t  }
  _ALLEGRO_glVertexAttrib4svNV_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttrib4ubNV_t  }
  _ALLEGRO_glVertexAttrib4ubNV_t = procedure(p1: GLuint; p2: GLubyte; p3: GLubyte; p4: GLubyte; p5: GLubyte); cdecl;

  { _ALLEGRO_glVertexAttrib4ubvNV_t  }
  _ALLEGRO_glVertexAttrib4ubvNV_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttribs1dvNV_t  }
  _ALLEGRO_glVertexAttribs1dvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttribs1fvNV_t  }
  _ALLEGRO_glVertexAttribs1fvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttribs1svNV_t  }
  _ALLEGRO_glVertexAttribs1svNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribs2dvNV_t  }
  _ALLEGRO_glVertexAttribs2dvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttribs2fvNV_t  }
  _ALLEGRO_glVertexAttribs2fvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttribs2svNV_t  }
  _ALLEGRO_glVertexAttribs2svNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribs3dvNV_t  }
  _ALLEGRO_glVertexAttribs3dvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttribs3fvNV_t  }
  _ALLEGRO_glVertexAttribs3fvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttribs3svNV_t  }
  _ALLEGRO_glVertexAttribs3svNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribs4dvNV_t  }
  _ALLEGRO_glVertexAttribs4dvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLdouble); cdecl;

  { _ALLEGRO_glVertexAttribs4fvNV_t  }
  _ALLEGRO_glVertexAttribs4fvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLfloat); cdecl;

  { _ALLEGRO_glVertexAttribs4svNV_t  }
  _ALLEGRO_glVertexAttribs4svNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribs4ubvNV_t  }
  _ALLEGRO_glVertexAttribs4ubvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte); cdecl;

  { _ALLEGRO_glTexBumpParameterivATI_t  }
  _ALLEGRO_glTexBumpParameterivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glTexBumpParameterfvATI_t  }
  _ALLEGRO_glTexBumpParameterfvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glGetTexBumpParameterivATI_t  }
  _ALLEGRO_glGetTexBumpParameterivATI_t = procedure(p1: GLenum; p2: PGLint); cdecl;

  { _ALLEGRO_glGetTexBumpParameterfvATI_t  }
  _ALLEGRO_glGetTexBumpParameterfvATI_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glGenFragmentShadersATI_t  }
  _ALLEGRO_glGenFragmentShadersATI_t = function(p1: GLuint): GLuint; cdecl;

  { _ALLEGRO_glBindFragmentShaderATI_t  }
  _ALLEGRO_glBindFragmentShaderATI_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDeleteFragmentShaderATI_t  }
  _ALLEGRO_glDeleteFragmentShaderATI_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glBeginFragmentShaderATI_t  }
  _ALLEGRO_glBeginFragmentShaderATI_t = procedure(); cdecl;

  { _ALLEGRO_glEndFragmentShaderATI_t  }
  _ALLEGRO_glEndFragmentShaderATI_t = procedure(); cdecl;

  { _ALLEGRO_glPassTexCoordATI_t  }
  _ALLEGRO_glPassTexCoordATI_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum); cdecl;

  { _ALLEGRO_glSampleMapATI_t  }
  _ALLEGRO_glSampleMapATI_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum); cdecl;

  { _ALLEGRO_glColorFragmentOp1ATI_t  }
  _ALLEGRO_glColorFragmentOp1ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint); cdecl;

  { _ALLEGRO_glColorFragmentOp2ATI_t  }
  _ALLEGRO_glColorFragmentOp2ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint; p8: GLuint; p9: GLuint; p10: GLuint); cdecl;

  { _ALLEGRO_glColorFragmentOp3ATI_t  }
  _ALLEGRO_glColorFragmentOp3ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint; p8: GLuint; p9: GLuint; p10: GLuint; p11: GLuint; p12: GLuint; p13: GLuint); cdecl;

  { _ALLEGRO_glAlphaFragmentOp1ATI_t  }
  _ALLEGRO_glAlphaFragmentOp1ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint); cdecl;

  { _ALLEGRO_glAlphaFragmentOp2ATI_t  }
  _ALLEGRO_glAlphaFragmentOp2ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint; p8: GLuint; p9: GLuint); cdecl;

  { _ALLEGRO_glAlphaFragmentOp3ATI_t  }
  _ALLEGRO_glAlphaFragmentOp3ATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint; p8: GLuint; p9: GLuint; p10: GLuint; p11: GLuint; p12: GLuint); cdecl;

  { _ALLEGRO_glSetFragmentShaderConstantATI_t  }
  _ALLEGRO_glSetFragmentShaderConstantATI_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glPNTrianglesiATI_t  }
  _ALLEGRO_glPNTrianglesiATI_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glPNTrianglesfATI_t  }
  _ALLEGRO_glPNTrianglesfATI_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glNewObjectBufferATI_t  }
  _ALLEGRO_glNewObjectBufferATI_t = function(p1: GLsizei; const p2: PGLvoid; p3: GLenum): GLuint; cdecl;

  { _ALLEGRO_glIsObjectBufferATI_t  }
  _ALLEGRO_glIsObjectBufferATI_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glUpdateObjectBufferATI_t  }
  _ALLEGRO_glUpdateObjectBufferATI_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; const p4: PGLvoid; p5: GLenum); cdecl;

  { _ALLEGRO_glGetObjectBufferfvATI_t  }
  _ALLEGRO_glGetObjectBufferfvATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetObjectBufferivATI_t  }
  _ALLEGRO_glGetObjectBufferivATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glFreeObjectBufferATI_t  }
  _ALLEGRO_glFreeObjectBufferATI_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glArrayObjectATI_t  }
  _ALLEGRO_glArrayObjectATI_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; p5: GLuint; p6: GLuint); cdecl;

  { _ALLEGRO_glGetArrayObjectfvATI_t  }
  _ALLEGRO_glGetArrayObjectfvATI_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetArrayObjectivATI_t  }
  _ALLEGRO_glGetArrayObjectivATI_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glVariantArrayObjectATI_t  }
  _ALLEGRO_glVariantArrayObjectATI_t = procedure(p1: GLuint; p2: GLenum; p3: GLsizei; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glGetVariantArrayObjectfvATI_t  }
  _ALLEGRO_glGetVariantArrayObjectfvATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVariantArrayObjectivATI_t  }
  _ALLEGRO_glGetVariantArrayObjectivATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glBeginVertexShaderEXT_t  }
  _ALLEGRO_glBeginVertexShaderEXT_t = procedure(); cdecl;

  { _ALLEGRO_glEndVertexShaderEXT_t  }
  _ALLEGRO_glEndVertexShaderEXT_t = procedure(); cdecl;

  { _ALLEGRO_glBindVertexShaderEXT_t  }
  _ALLEGRO_glBindVertexShaderEXT_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glGenVertexShadersEXT_t  }
  _ALLEGRO_glGenVertexShadersEXT_t = function(p1: GLuint): GLuint; cdecl;

  { _ALLEGRO_glDeleteVertexShaderEXT_t  }
  _ALLEGRO_glDeleteVertexShaderEXT_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glShaderOp1EXT_t  }
  _ALLEGRO_glShaderOp1EXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glShaderOp2EXT_t  }
  _ALLEGRO_glShaderOp2EXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glShaderOp3EXT_t  }
  _ALLEGRO_glShaderOp3EXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glSwizzleEXT_t  }
  _ALLEGRO_glSwizzleEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum; p4: GLenum; p5: GLenum; p6: GLenum); cdecl;

  { _ALLEGRO_glWriteMaskEXT_t  }
  _ALLEGRO_glWriteMaskEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum; p4: GLenum; p5: GLenum; p6: GLenum); cdecl;

  { _ALLEGRO_glInsertComponentEXT_t  }
  _ALLEGRO_glInsertComponentEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glExtractComponentEXT_t  }
  _ALLEGRO_glExtractComponentEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glGenSymbolsEXT_t  }
  _ALLEGRO_glGenSymbolsEXT_t = function(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint): GLuint; cdecl;

  { _ALLEGRO_glSetInvariantEXT_t  }
  _ALLEGRO_glSetInvariantEXT_t = procedure(p1: GLuint; p2: GLenum; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glSetLocalConstantEXT_t  }
  _ALLEGRO_glSetLocalConstantEXT_t = procedure(p1: GLuint; p2: GLenum; const p3: PGLvoid); cdecl;

  { _ALLEGRO_glVariantbvEXT_t  }
  _ALLEGRO_glVariantbvEXT_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVariantsvEXT_t  }
  _ALLEGRO_glVariantsvEXT_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVariantivEXT_t  }
  _ALLEGRO_glVariantivEXT_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVariantfvEXT_t  }
  _ALLEGRO_glVariantfvEXT_t = procedure(p1: GLuint; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVariantdvEXT_t  }
  _ALLEGRO_glVariantdvEXT_t = procedure(p1: GLuint; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVariantubvEXT_t  }
  _ALLEGRO_glVariantubvEXT_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVariantusvEXT_t  }
  _ALLEGRO_glVariantusvEXT_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVariantuivEXT_t  }
  _ALLEGRO_glVariantuivEXT_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVariantPointerEXT_t  }
  _ALLEGRO_glVariantPointerEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glEnableVariantClientStateEXT_t  }
  _ALLEGRO_glEnableVariantClientStateEXT_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDisableVariantClientStateEXT_t  }
  _ALLEGRO_glDisableVariantClientStateEXT_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glBindLightParameterEXT_t  }
  _ALLEGRO_glBindLightParameterEXT_t = function(p1: GLenum; p2: GLenum): GLuint; cdecl;

  { _ALLEGRO_glBindMaterialParameterEXT_t  }
  _ALLEGRO_glBindMaterialParameterEXT_t = function(p1: GLenum; p2: GLenum): GLuint; cdecl;

  { _ALLEGRO_glBindTexGenParameterEXT_t  }
  _ALLEGRO_glBindTexGenParameterEXT_t = function(p1: GLenum; p2: GLenum; p3: GLenum): GLuint; cdecl;

  { _ALLEGRO_glBindTextureUnitParameterEXT_t  }
  _ALLEGRO_glBindTextureUnitParameterEXT_t = function(p1: GLenum; p2: GLenum): GLuint; cdecl;

  { _ALLEGRO_glBindParameterEXT_t  }
  _ALLEGRO_glBindParameterEXT_t = function(p1: GLenum): GLuint; cdecl;

  { _ALLEGRO_glIsVariantEnabledEXT_t  }
  _ALLEGRO_glIsVariantEnabledEXT_t = function(p1: GLuint; p2: GLenum): GLboolean; cdecl;

  { _ALLEGRO_glGetVariantBooleanvEXT_t  }
  _ALLEGRO_glGetVariantBooleanvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetVariantIntegervEXT_t  }
  _ALLEGRO_glGetVariantIntegervEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVariantFloatvEXT_t  }
  _ALLEGRO_glGetVariantFloatvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVariantPointervEXT_t  }
  _ALLEGRO_glGetVariantPointervEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glGetInvariantBooleanvEXT_t  }
  _ALLEGRO_glGetInvariantBooleanvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetInvariantIntegervEXT_t  }
  _ALLEGRO_glGetInvariantIntegervEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetInvariantFloatvEXT_t  }
  _ALLEGRO_glGetInvariantFloatvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetLocalConstantBooleanvEXT_t  }
  _ALLEGRO_glGetLocalConstantBooleanvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetLocalConstantIntegervEXT_t  }
  _ALLEGRO_glGetLocalConstantIntegervEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetLocalConstantFloatvEXT_t  }
  _ALLEGRO_glGetLocalConstantFloatvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glVertexStream1sATI_t  }
  _ALLEGRO_glVertexStream1sATI_t = procedure(p1: GLenum; p2: GLshort); cdecl;

  { _ALLEGRO_glVertexStream1svATI_t  }
  _ALLEGRO_glVertexStream1svATI_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexStream1iATI_t  }
  _ALLEGRO_glVertexStream1iATI_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glVertexStream1ivATI_t  }
  _ALLEGRO_glVertexStream1ivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexStream1fATI_t  }
  _ALLEGRO_glVertexStream1fATI_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glVertexStream1fvATI_t  }
  _ALLEGRO_glVertexStream1fvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexStream1dATI_t  }
  _ALLEGRO_glVertexStream1dATI_t = procedure(p1: GLenum; p2: GLdouble); cdecl;

  { _ALLEGRO_glVertexStream1dvATI_t  }
  _ALLEGRO_glVertexStream1dvATI_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexStream2sATI_t  }
  _ALLEGRO_glVertexStream2sATI_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort); cdecl;

  { _ALLEGRO_glVertexStream2svATI_t  }
  _ALLEGRO_glVertexStream2svATI_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexStream2iATI_t  }
  _ALLEGRO_glVertexStream2iATI_t = procedure(p1: GLenum; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glVertexStream2ivATI_t  }
  _ALLEGRO_glVertexStream2ivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexStream2fATI_t  }
  _ALLEGRO_glVertexStream2fATI_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat); cdecl;

  { _ALLEGRO_glVertexStream2fvATI_t  }
  _ALLEGRO_glVertexStream2fvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexStream2dATI_t  }
  _ALLEGRO_glVertexStream2dATI_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble); cdecl;

  { _ALLEGRO_glVertexStream2dvATI_t  }
  _ALLEGRO_glVertexStream2dvATI_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexStream3sATI_t  }
  _ALLEGRO_glVertexStream3sATI_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glVertexStream3svATI_t  }
  _ALLEGRO_glVertexStream3svATI_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexStream3iATI_t  }
  _ALLEGRO_glVertexStream3iATI_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glVertexStream3ivATI_t  }
  _ALLEGRO_glVertexStream3ivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexStream3fATI_t  }
  _ALLEGRO_glVertexStream3fATI_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glVertexStream3fvATI_t  }
  _ALLEGRO_glVertexStream3fvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexStream3dATI_t  }
  _ALLEGRO_glVertexStream3dATI_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glVertexStream3dvATI_t  }
  _ALLEGRO_glVertexStream3dvATI_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glVertexStream4sATI_t  }
  _ALLEGRO_glVertexStream4sATI_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort; p5: GLshort); cdecl;

  { _ALLEGRO_glVertexStream4svATI_t  }
  _ALLEGRO_glVertexStream4svATI_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexStream4iATI_t  }
  _ALLEGRO_glVertexStream4iATI_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glVertexStream4ivATI_t  }
  _ALLEGRO_glVertexStream4ivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexStream4fATI_t  }
  _ALLEGRO_glVertexStream4fATI_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glVertexStream4fvATI_t  }
  _ALLEGRO_glVertexStream4fvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glVertexStream4dATI_t  }
  _ALLEGRO_glVertexStream4dATI_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glVertexStream4dvATI_t  }
  _ALLEGRO_glVertexStream4dvATI_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glNormalStream3bATI_t  }
  _ALLEGRO_glNormalStream3bATI_t = procedure(p1: GLenum; p2: GLbyte; p3: GLbyte; p4: GLbyte); cdecl;

  { _ALLEGRO_glNormalStream3bvATI_t  }
  _ALLEGRO_glNormalStream3bvATI_t = procedure(p1: GLenum; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glNormalStream3sATI_t  }
  _ALLEGRO_glNormalStream3sATI_t = procedure(p1: GLenum; p2: GLshort; p3: GLshort; p4: GLshort); cdecl;

  { _ALLEGRO_glNormalStream3svATI_t  }
  _ALLEGRO_glNormalStream3svATI_t = procedure(p1: GLenum; const p2: PGLshort); cdecl;

  { _ALLEGRO_glNormalStream3iATI_t  }
  _ALLEGRO_glNormalStream3iATI_t = procedure(p1: GLenum; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glNormalStream3ivATI_t  }
  _ALLEGRO_glNormalStream3ivATI_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glNormalStream3fATI_t  }
  _ALLEGRO_glNormalStream3fATI_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glNormalStream3fvATI_t  }
  _ALLEGRO_glNormalStream3fvATI_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glNormalStream3dATI_t  }
  _ALLEGRO_glNormalStream3dATI_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glNormalStream3dvATI_t  }
  _ALLEGRO_glNormalStream3dvATI_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glClientActiveVertexStreamATI_t  }
  _ALLEGRO_glClientActiveVertexStreamATI_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glVertexBlendEnviATI_t  }
  _ALLEGRO_glVertexBlendEnviATI_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glVertexBlendEnvfATI_t  }
  _ALLEGRO_glVertexBlendEnvfATI_t = procedure(p1: GLenum; p2: GLfloat); cdecl;

  { _ALLEGRO_glElementPointerATI_t  }
  _ALLEGRO_glElementPointerATI_t = procedure(p1: GLenum; const p2: PGLvoid); cdecl;

  { _ALLEGRO_glDrawElementArrayATI_t  }
  _ALLEGRO_glDrawElementArrayATI_t = procedure(p1: GLenum; p2: GLsizei); cdecl;

  { _ALLEGRO_glDrawRangeElementArrayATI_t  }
  _ALLEGRO_glDrawRangeElementArrayATI_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLsizei); cdecl;

  { _ALLEGRO_glDrawMeshArraysSUN_t  }
  _ALLEGRO_glDrawMeshArraysSUN_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glGenOcclusionQueriesNV_t  }
  _ALLEGRO_glGenOcclusionQueriesNV_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glDeleteOcclusionQueriesNV_t  }
  _ALLEGRO_glDeleteOcclusionQueriesNV_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glIsOcclusionQueryNV_t  }
  _ALLEGRO_glIsOcclusionQueryNV_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBeginOcclusionQueryNV_t  }
  _ALLEGRO_glBeginOcclusionQueryNV_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glEndOcclusionQueryNV_t  }
  _ALLEGRO_glEndOcclusionQueryNV_t = procedure(); cdecl;

  { _ALLEGRO_glGetOcclusionQueryivNV_t  }
  _ALLEGRO_glGetOcclusionQueryivNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetOcclusionQueryuivNV_t  }
  _ALLEGRO_glGetOcclusionQueryuivNV_t = procedure(p1: GLuint; p2: GLenum; p3: PGLuint); cdecl;

  { _ALLEGRO_glPointParameteriNV_t  }
  _ALLEGRO_glPointParameteriNV_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glPointParameterivNV_t  }
  _ALLEGRO_glPointParameterivNV_t = procedure(p1: GLenum; const p2: PGLint); cdecl;

  { _ALLEGRO_glActiveStencilFaceEXT_t  }
  _ALLEGRO_glActiveStencilFaceEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glElementPointerAPPLE_t  }
  _ALLEGRO_glElementPointerAPPLE_t = procedure(p1: GLenum; const p2: PGLvoid); cdecl;

  { _ALLEGRO_glDrawElementArrayAPPLE_t  }
  _ALLEGRO_glDrawElementArrayAPPLE_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei); cdecl;

  { _ALLEGRO_glDrawRangeElementArrayAPPLE_t  }
  _ALLEGRO_glDrawRangeElementArrayAPPLE_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLint; p5: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawElementArrayAPPLE_t  }
  _ALLEGRO_glMultiDrawElementArrayAPPLE_t = procedure(p1: GLenum; const p2: PGLint; const p3: PGLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t  }
  _ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; const p4: PGLint; const p5: PGLsizei; p6: GLsizei); cdecl;

  { _ALLEGRO_glGenFencesAPPLE_t  }
  _ALLEGRO_glGenFencesAPPLE_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glDeleteFencesAPPLE_t  }
  _ALLEGRO_glDeleteFencesAPPLE_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glSetFenceAPPLE_t  }
  _ALLEGRO_glSetFenceAPPLE_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glIsFenceAPPLE_t  }
  _ALLEGRO_glIsFenceAPPLE_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glTestFenceAPPLE_t  }
  _ALLEGRO_glTestFenceAPPLE_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glFinishFenceAPPLE_t  }
  _ALLEGRO_glFinishFenceAPPLE_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glTestObjectAPPLE_t  }
  _ALLEGRO_glTestObjectAPPLE_t = function(p1: GLenum; p2: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glFinishObjectAPPLE_t  }
  _ALLEGRO_glFinishObjectAPPLE_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glBindVertexArrayAPPLE_t  }
  _ALLEGRO_glBindVertexArrayAPPLE_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glDeleteVertexArraysAPPLE_t  }
  _ALLEGRO_glDeleteVertexArraysAPPLE_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenVertexArraysAPPLE_t  }
  _ALLEGRO_glGenVertexArraysAPPLE_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glIsVertexArrayAPPLE_t  }
  _ALLEGRO_glIsVertexArrayAPPLE_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glVertexArrayRangeAPPLE_t  }
  _ALLEGRO_glVertexArrayRangeAPPLE_t = procedure(p1: GLsizei; p2: PGLvoid); cdecl;

  { _ALLEGRO_glFlushVertexArrayRangeAPPLE_t  }
  _ALLEGRO_glFlushVertexArrayRangeAPPLE_t = procedure(p1: GLsizei; p2: PGLvoid); cdecl;

  { _ALLEGRO_glVertexArrayParameteriAPPLE_t  }
  _ALLEGRO_glVertexArrayParameteriAPPLE_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glDrawBuffersATI_t  }
  _ALLEGRO_glDrawBuffersATI_t = procedure(p1: GLsizei; const p2: PGLenum); cdecl;

  { _ALLEGRO_glProgramNamedParameter4fNV_t  }
  _ALLEGRO_glProgramNamedParameter4fNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat); cdecl;

  { _ALLEGRO_glProgramNamedParameter4dNV_t  }
  _ALLEGRO_glProgramNamedParameter4dNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; p4: GLdouble; p5: GLdouble; p6: GLdouble; p7: GLdouble); cdecl;

  { _ALLEGRO_glProgramNamedParameter4fvNV_t  }
  _ALLEGRO_glProgramNamedParameter4fvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramNamedParameter4dvNV_t  }
  _ALLEGRO_glProgramNamedParameter4dvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; const p4: PGLdouble); cdecl;

  { _ALLEGRO_glGetProgramNamedParameterfvNV_t  }
  _ALLEGRO_glGetProgramNamedParameterfvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetProgramNamedParameterdvNV_t  }
  _ALLEGRO_glGetProgramNamedParameterdvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLubyte; p4: PGLdouble); cdecl;

  { _ALLEGRO_glVertex2hNV_t  }
  _ALLEGRO_glVertex2hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV); cdecl;

  { _ALLEGRO_glVertex2hvNV_t  }
  _ALLEGRO_glVertex2hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertex3hNV_t  }
  _ALLEGRO_glVertex3hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glVertex3hvNV_t  }
  _ALLEGRO_glVertex3hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertex4hNV_t  }
  _ALLEGRO_glVertex4hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV); cdecl;

  { _ALLEGRO_glVertex4hvNV_t  }
  _ALLEGRO_glVertex4hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glNormal3hNV_t  }
  _ALLEGRO_glNormal3hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glNormal3hvNV_t  }
  _ALLEGRO_glNormal3hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glColor3hNV_t  }
  _ALLEGRO_glColor3hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glColor3hvNV_t  }
  _ALLEGRO_glColor3hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glColor4hNV_t  }
  _ALLEGRO_glColor4hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV); cdecl;

  { _ALLEGRO_glColor4hvNV_t  }
  _ALLEGRO_glColor4hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord1hNV_t  }
  _ALLEGRO_glTexCoord1hNV_t = procedure(p1: GLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord1hvNV_t  }
  _ALLEGRO_glTexCoord1hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord2hNV_t  }
  _ALLEGRO_glTexCoord2hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord2hvNV_t  }
  _ALLEGRO_glTexCoord2hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord3hNV_t  }
  _ALLEGRO_glTexCoord3hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord3hvNV_t  }
  _ALLEGRO_glTexCoord3hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord4hNV_t  }
  _ALLEGRO_glTexCoord4hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV); cdecl;

  { _ALLEGRO_glTexCoord4hvNV_t  }
  _ALLEGRO_glTexCoord4hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord1hNV_t  }
  _ALLEGRO_glMultiTexCoord1hNV_t = procedure(p1: GLenum; p2: GLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord1hvNV_t  }
  _ALLEGRO_glMultiTexCoord1hvNV_t = procedure(p1: GLenum; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord2hNV_t  }
  _ALLEGRO_glMultiTexCoord2hNV_t = procedure(p1: GLenum; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord2hvNV_t  }
  _ALLEGRO_glMultiTexCoord2hvNV_t = procedure(p1: GLenum; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord3hNV_t  }
  _ALLEGRO_glMultiTexCoord3hNV_t = procedure(p1: GLenum; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord3hvNV_t  }
  _ALLEGRO_glMultiTexCoord3hvNV_t = procedure(p1: GLenum; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord4hNV_t  }
  _ALLEGRO_glMultiTexCoord4hNV_t = procedure(p1: GLenum; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV; p5: GLhalfNV); cdecl;

  { _ALLEGRO_glMultiTexCoord4hvNV_t  }
  _ALLEGRO_glMultiTexCoord4hvNV_t = procedure(p1: GLenum; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glFogCoordhNV_t  }
  _ALLEGRO_glFogCoordhNV_t = procedure(p1: GLhalfNV); cdecl;

  { _ALLEGRO_glFogCoordhvNV_t  }
  _ALLEGRO_glFogCoordhvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glSecondaryColor3hNV_t  }
  _ALLEGRO_glSecondaryColor3hNV_t = procedure(p1: GLhalfNV; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glSecondaryColor3hvNV_t  }
  _ALLEGRO_glSecondaryColor3hvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexWeighthNV_t  }
  _ALLEGRO_glVertexWeighthNV_t = procedure(p1: GLhalfNV); cdecl;

  { _ALLEGRO_glVertexWeighthvNV_t  }
  _ALLEGRO_glVertexWeighthvNV_t = procedure(const p1: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib1hNV_t  }
  _ALLEGRO_glVertexAttrib1hNV_t = procedure(p1: GLuint; p2: GLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib1hvNV_t  }
  _ALLEGRO_glVertexAttrib1hvNV_t = procedure(p1: GLuint; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib2hNV_t  }
  _ALLEGRO_glVertexAttrib2hNV_t = procedure(p1: GLuint; p2: GLhalfNV; p3: GLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib2hvNV_t  }
  _ALLEGRO_glVertexAttrib2hvNV_t = procedure(p1: GLuint; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib3hNV_t  }
  _ALLEGRO_glVertexAttrib3hNV_t = procedure(p1: GLuint; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib3hvNV_t  }
  _ALLEGRO_glVertexAttrib3hvNV_t = procedure(p1: GLuint; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib4hNV_t  }
  _ALLEGRO_glVertexAttrib4hNV_t = procedure(p1: GLuint; p2: GLhalfNV; p3: GLhalfNV; p4: GLhalfNV; p5: GLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttrib4hvNV_t  }
  _ALLEGRO_glVertexAttrib4hvNV_t = procedure(p1: GLuint; const p2: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttribs1hvNV_t  }
  _ALLEGRO_glVertexAttribs1hvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttribs2hvNV_t  }
  _ALLEGRO_glVertexAttribs2hvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttribs3hvNV_t  }
  _ALLEGRO_glVertexAttribs3hvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLhalfNV); cdecl;

  { _ALLEGRO_glVertexAttribs4hvNV_t  }
  _ALLEGRO_glVertexAttribs4hvNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLhalfNV); cdecl;

  { _ALLEGRO_glPixelDataRangeNV_t  }
  _ALLEGRO_glPixelDataRangeNV_t = procedure(p1: GLenum; p2: GLsizei; p3: PGLvoid); cdecl;

  { _ALLEGRO_glFlushPixelDataRangeNV_t  }
  _ALLEGRO_glFlushPixelDataRangeNV_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glPrimitiveRestartNV_t  }
  _ALLEGRO_glPrimitiveRestartNV_t = procedure(); cdecl;

  { _ALLEGRO_glPrimitiveRestartIndexNV_t  }
  _ALLEGRO_glPrimitiveRestartIndexNV_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glMapObjectBufferATI_t  }
  _ALLEGRO_glMapObjectBufferATI_t = function(p1: GLuint): PGLvoid; cdecl;

  { _ALLEGRO_glUnmapObjectBufferATI_t  }
  _ALLEGRO_glUnmapObjectBufferATI_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribArrayObjectATI_t  }
  _ALLEGRO_glVertexAttribArrayObjectATI_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLboolean; p5: GLsizei; p6: GLuint; p7: GLuint); cdecl;

  { _ALLEGRO_glGetVertexAttribArrayObjectfvATI_t  }
  _ALLEGRO_glGetVertexAttribArrayObjectfvATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetVertexAttribArrayObjectivATI_t  }
  _ALLEGRO_glGetVertexAttribArrayObjectivATI_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glVertex2bOES_t  }
  _ALLEGRO_glVertex2bOES_t = procedure(p1: GLbyte; p2: GLbyte); cdecl;

  { _ALLEGRO_glVertex3bOES_t  }
  _ALLEGRO_glVertex3bOES_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glVertex4bOES_t  }
  _ALLEGRO_glVertex4bOES_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte; p4: GLbyte); cdecl;

  { _ALLEGRO_glVertex2bvOES_t  }
  _ALLEGRO_glVertex2bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glVertex3bvOES_t  }
  _ALLEGRO_glVertex3bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glVertex4bvOES_t  }
  _ALLEGRO_glVertex4bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glTexCoord1bOES_t  }
  _ALLEGRO_glTexCoord1bOES_t = procedure(p1: GLbyte); cdecl;

  { _ALLEGRO_glTexCoord2bOES_t  }
  _ALLEGRO_glTexCoord2bOES_t = procedure(p1: GLbyte; p2: GLbyte); cdecl;

  { _ALLEGRO_glTexCoord3bOES_t  }
  _ALLEGRO_glTexCoord3bOES_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glTexCoord4bOES_t  }
  _ALLEGRO_glTexCoord4bOES_t = procedure(p1: GLbyte; p2: GLbyte; p3: GLbyte; p4: GLbyte); cdecl;

  { _ALLEGRO_glTexCoord1bvOES_t  }
  _ALLEGRO_glTexCoord1bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glTexCoord2bvOES_t  }
  _ALLEGRO_glTexCoord2bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glTexCoord3bvOES_t  }
  _ALLEGRO_glTexCoord3bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glTexCoord4bvOES_t  }
  _ALLEGRO_glTexCoord4bvOES_t = procedure(const p1: PGLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord1bOES_t  }
  _ALLEGRO_glMultiTexCoord1bOES_t = procedure(p1: GLenum; p2: GLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord2bOES_t  }
  _ALLEGRO_glMultiTexCoord2bOES_t = procedure(p1: GLenum; p2: GLbyte; p3: GLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord3bOES_t  }
  _ALLEGRO_glMultiTexCoord3bOES_t = procedure(p1: GLenum; p2: GLbyte; p3: GLbyte; p4: GLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord4bOES_t  }
  _ALLEGRO_glMultiTexCoord4bOES_t = procedure(p1: GLenum; p2: GLbyte; p3: GLbyte; p4: GLbyte; p5: GLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord1bvOES_t  }
  _ALLEGRO_glMultiTexCoord1bvOES_t = procedure(texture: GLenum; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord2bvOES_t  }
  _ALLEGRO_glMultiTexCoord2bvOES_t = procedure(texture: GLenum; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord3bvOES_t  }
  _ALLEGRO_glMultiTexCoord3bvOES_t = procedure(texture: GLenum; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glMultiTexCoord4bvOES_t  }
  _ALLEGRO_glMultiTexCoord4bvOES_t = procedure(texture: GLenum; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertex2xOES_t  }
  _ALLEGRO_glVertex2xOES_t = procedure(p1: GLfixed; p2: GLfixed); cdecl;

  { _ALLEGRO_glVertex3xOES_t  }
  _ALLEGRO_glVertex3xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glVertex4xOES_t  }
  _ALLEGRO_glVertex4xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glVertex2xvOES_t  }
  _ALLEGRO_glVertex2xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glVertex3xvOES_t  }
  _ALLEGRO_glVertex3xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glVertex4xvOES_t  }
  _ALLEGRO_glVertex4xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glNormal3xOES_t  }
  _ALLEGRO_glNormal3xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glNormal3xvOES_t  }
  _ALLEGRO_glNormal3xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glTexCoord1xOES_t  }
  _ALLEGRO_glTexCoord1xOES_t = procedure(p1: GLfixed); cdecl;

  { _ALLEGRO_glTexCoord2xOES_t  }
  _ALLEGRO_glTexCoord2xOES_t = procedure(p1: GLfixed; p2: GLfixed); cdecl;

  { _ALLEGRO_glTexCoord3xOES_t  }
  _ALLEGRO_glTexCoord3xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glTexCoord4xOES_t  }
  _ALLEGRO_glTexCoord4xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glTexCoord1xvOES_t  }
  _ALLEGRO_glTexCoord1xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glTexCoord2xvOES_t  }
  _ALLEGRO_glTexCoord2xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glTexCoord3xvOES_t  }
  _ALLEGRO_glTexCoord3xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glTexCoord4xvOES_t  }
  _ALLEGRO_glTexCoord4xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord1xOES_t  }
  _ALLEGRO_glMultiTexCoord1xOES_t = procedure(p1: GLenum; p2: GLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord2xOES_t  }
  _ALLEGRO_glMultiTexCoord2xOES_t = procedure(p1: GLenum; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord3xOES_t  }
  _ALLEGRO_glMultiTexCoord3xOES_t = procedure(p1: GLenum; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord4xOES_t  }
  _ALLEGRO_glMultiTexCoord4xOES_t = procedure(p1: GLenum; p2: GLfixed; p3: GLfixed; p4: GLfixed; p5: GLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord1xvOES_t  }
  _ALLEGRO_glMultiTexCoord1xvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord2xvOES_t  }
  _ALLEGRO_glMultiTexCoord2xvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord3xvOES_t  }
  _ALLEGRO_glMultiTexCoord3xvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glMultiTexCoord4xvOES_t  }
  _ALLEGRO_glMultiTexCoord4xvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glColor3xOES_t  }
  _ALLEGRO_glColor3xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glColor4xOES_t  }
  _ALLEGRO_glColor4xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glColor3xvOES_t  }
  _ALLEGRO_glColor3xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glColor4xvOES_t  }
  _ALLEGRO_glColor4xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glIndexxOES_t  }
  _ALLEGRO_glIndexxOES_t = procedure(p1: GLfixed); cdecl;

  { _ALLEGRO_glIndexxvOES_t  }
  _ALLEGRO_glIndexxvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glRectxOES_t  }
  _ALLEGRO_glRectxOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glRectxvOES_t  }
  _ALLEGRO_glRectxvOES_t = procedure(p1: PGLfixed; p2: PGLfixed); cdecl;

  { _ALLEGRO_glDepthRangexOES_t  }
  _ALLEGRO_glDepthRangexOES_t = procedure(p1: GLclampx; p2: GLclampx); cdecl;

  { _ALLEGRO_glLoadMatrixxOES_t  }
  _ALLEGRO_glLoadMatrixxOES_t = procedure(p1: PGLfixed); cdecl;

  { _ALLEGRO_glMultMatrixxOES_t  }
  _ALLEGRO_glMultMatrixxOES_t = procedure(p1: PGLfixed); cdecl;

  { _ALLEGRO_glLoadTransposeMatrixxOES_t  }
  _ALLEGRO_glLoadTransposeMatrixxOES_t = procedure(p1: PGLfixed); cdecl;

  { _ALLEGRO_glMultTransposeMatrixxOES_t  }
  _ALLEGRO_glMultTransposeMatrixxOES_t = procedure(p1: PGLfixed); cdecl;

  { _ALLEGRO_glRotatexOES_t  }
  _ALLEGRO_glRotatexOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glScalexOES_t  }
  _ALLEGRO_glScalexOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glTranslatexOES_t  }
  _ALLEGRO_glTranslatexOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glFrustumxOES_t  }
  _ALLEGRO_glFrustumxOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed; p5: GLfixed; p6: GLfixed); cdecl;

  { _ALLEGRO_glOrthoxOES_t  }
  _ALLEGRO_glOrthoxOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed; p5: GLfixed; p6: GLfixed); cdecl;

  { _ALLEGRO_glTexGenxOES_t  }
  _ALLEGRO_glTexGenxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glTexGenxvOES_t  }
  _ALLEGRO_glTexGenxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetTexGenxvOES_t  }
  _ALLEGRO_glGetTexGenxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glClipPlanexOES_t  }
  _ALLEGRO_glClipPlanexOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glGetClipPlanexOES_t  }
  _ALLEGRO_glGetClipPlanexOES_t = procedure(p1: GLenum; p2: PGLfixed); cdecl;

  { _ALLEGRO_glRasterPos2xOES_t  }
  _ALLEGRO_glRasterPos2xOES_t = procedure(p1: GLfixed; p2: GLfixed); cdecl;

  { _ALLEGRO_glRasterPos3xOES_t  }
  _ALLEGRO_glRasterPos3xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glRasterPos4xOES_t  }
  _ALLEGRO_glRasterPos4xOES_t = procedure(p1: GLfixed; p2: GLfixed; p3: GLfixed; p4: GLfixed); cdecl;

  { _ALLEGRO_glRasterPos2xvOES_t  }
  _ALLEGRO_glRasterPos2xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glRasterPos3xvOES_t  }
  _ALLEGRO_glRasterPos3xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glRasterPos4xvOES_t  }
  _ALLEGRO_glRasterPos4xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glMaterialxOES_t  }
  _ALLEGRO_glMaterialxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glMaterialxvOES_t  }
  _ALLEGRO_glMaterialxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetMaterialxOES_t  }
  _ALLEGRO_glGetMaterialxOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glLightxOES_t  }
  _ALLEGRO_glLightxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glLightxvOES_t  }
  _ALLEGRO_glLightxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetLightxOES_t  }
  _ALLEGRO_glGetLightxOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glLightModelxOES_t  }
  _ALLEGRO_glLightModelxOES_t = procedure(p1: GLenum; p2: GLfixed); cdecl;

  { _ALLEGRO_glLightModelxvOES_t  }
  _ALLEGRO_glLightModelxvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glPointSizexOES_t  }
  _ALLEGRO_glPointSizexOES_t = procedure(size: GLfixed); cdecl;

  { _ALLEGRO_glLineWidthxOES_t  }
  _ALLEGRO_glLineWidthxOES_t = procedure(width: GLfixed); cdecl;

  { _ALLEGRO_glPolygonOffsetxOES_t  }
  _ALLEGRO_glPolygonOffsetxOES_t = procedure(factor: GLfixed; units: GLfixed); cdecl;

  { _ALLEGRO_glPixelStorex_t  }
  _ALLEGRO_glPixelStorex_t = procedure(pname: GLenum; param: GLfixed); cdecl;

  { _ALLEGRO_glPixelTransferxOES_t  }
  _ALLEGRO_glPixelTransferxOES_t = procedure(pname: GLenum; param: GLfixed); cdecl;

  { _ALLEGRO_glPixelMapx_t  }
  _ALLEGRO_glPixelMapx_t = procedure(p1: GLenum; p2: GLint; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetPixelMapxv_t  }
  _ALLEGRO_glGetPixelMapxv_t = procedure(p1: GLenum; p2: GLint; p3: PGLfixed); cdecl;

  { _ALLEGRO_glConvolutionParameterxOES_t  }
  _ALLEGRO_glConvolutionParameterxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glConvolutionParameterxvOES_t  }
  _ALLEGRO_glConvolutionParameterxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetConvolutionParameterxvOES_t  }
  _ALLEGRO_glGetConvolutionParameterxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetHistogramParameterxvOES_t  }
  _ALLEGRO_glGetHistogramParameterxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glPixelZoomxOES_t  }
  _ALLEGRO_glPixelZoomxOES_t = procedure(p1: GLfixed; p2: GLfixed); cdecl;

  { _ALLEGRO_glBitmapxOES_t  }
  _ALLEGRO_glBitmapxOES_t = procedure(p1: GLsizei; p2: GLsizei; p3: GLfixed; p4: GLfixed; p5: GLfixed; p6: GLfixed; const p7: PGLubyte); cdecl;

  { _ALLEGRO_glTexParameterxOES_t  }
  _ALLEGRO_glTexParameterxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glTexParameterxvOES_t  }
  _ALLEGRO_glTexParameterxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetTexParameterxvOES_t  }
  _ALLEGRO_glGetTexParameterxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetTexLevelParameterxvOES_t  }
  _ALLEGRO_glGetTexLevelParameterxvOES_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: PGLfixed); cdecl;

  { _ALLEGRO_glPrioritizeTexturesxOES_t  }
  _ALLEGRO_glPrioritizeTexturesxOES_t = procedure(p1: GLsizei; p2: PGLuint; p3: PGLclampx); cdecl;

  { _ALLEGRO_glTexEnvxOES_t  }
  _ALLEGRO_glTexEnvxOES_t = procedure(p1: GLenum; p2: GLenum; p3: GLfixed); cdecl;

  { _ALLEGRO_glTexEnvxvOES_t  }
  _ALLEGRO_glTexEnvxvOES_t = procedure(p1: GLenum; p2: GLenum; const p3: PGLfixed); cdecl;

  { _ALLEGRO_glGetTexEnvxvOES_t  }
  _ALLEGRO_glGetTexEnvxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glFogxOES_t  }
  _ALLEGRO_glFogxOES_t = procedure(p1: GLenum; p2: GLfixed); cdecl;

  { _ALLEGRO_glFogxvOES_t  }
  _ALLEGRO_glFogxvOES_t = procedure(p1: GLenum; const p2: PGLfixed); cdecl;

  { _ALLEGRO_glSampleCoverageOES_t  }
  _ALLEGRO_glSampleCoverageOES_t = procedure(p1: GLclampx; p2: GLboolean); cdecl;

  { _ALLEGRO_glAlphaFuncxOES_t  }
  _ALLEGRO_glAlphaFuncxOES_t = procedure(p1: GLenum; p2: GLclampx); cdecl;

  { _ALLEGRO_glBlendColorxOES_t  }
  _ALLEGRO_glBlendColorxOES_t = procedure(p1: GLclampx; p2: GLclampx; p3: GLclampx; p4: GLclampx); cdecl;

  { _ALLEGRO_glClearColorxOES_t  }
  _ALLEGRO_glClearColorxOES_t = procedure(p1: GLclampx; p2: GLclampx; p3: GLclampx; p4: GLclampx); cdecl;

  { _ALLEGRO_glClearDepthxOES_t  }
  _ALLEGRO_glClearDepthxOES_t = procedure(p1: GLclampx); cdecl;

  { _ALLEGRO_glClearAccumxOES_t  }
  _ALLEGRO_glClearAccumxOES_t = procedure(p1: GLclampx; p2: GLclampx; p3: GLclampx; p4: GLclampx); cdecl;

  { _ALLEGRO_glAccumxOES_t  }
  _ALLEGRO_glAccumxOES_t = procedure(p1: GLenum; p2: GLfixed); cdecl;

  { _ALLEGRO_glMap1xOES_t  }
  _ALLEGRO_glMap1xOES_t = procedure(p1: GLenum; p2: GLfixed; p3: GLfixed; p4: GLint; p5: GLint; const p6: PGLfixed); cdecl;

  { _ALLEGRO_glMap2xOES_t  }
  _ALLEGRO_glMap2xOES_t = procedure(p1: GLenum; p2: GLfixed; p3: GLfixed; p4: GLint; p5: GLint; p6: GLfixed; p7: GLfixed; p8: GLint; p9: GLint; const p10: PGLfixed); cdecl;

  { _ALLEGRO_glMapGrid1xOES_t  }
  _ALLEGRO_glMapGrid1xOES_t = procedure(p1: GLint; p2: GLfixed; p3: GLfixed); cdecl;

  { _ALLEGRO_glMapGrid2xOES_t  }
  _ALLEGRO_glMapGrid2xOES_t = procedure(p1: GLint; p2: GLfixed; p3: GLfixed; p4: GLfixed; p5: GLfixed); cdecl;

  { _ALLEGRO_glGetMapxvOES_t  }
  _ALLEGRO_glGetMapxvOES_t = procedure(p1: GLenum; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glEvalCoord1xOES_t  }
  _ALLEGRO_glEvalCoord1xOES_t = procedure(p1: GLfixed); cdecl;

  { _ALLEGRO_glEvalCoord2xOES_t  }
  _ALLEGRO_glEvalCoord2xOES_t = procedure(p1: GLfixed; p2: GLfixed); cdecl;

  { _ALLEGRO_glEvalCoord1xvOES_t  }
  _ALLEGRO_glEvalCoord1xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glEvalCoord2xvOES_t  }
  _ALLEGRO_glEvalCoord2xvOES_t = procedure(const p1: PGLfixed); cdecl;

  { _ALLEGRO_glFeedbackBufferxOES_t  }
  _ALLEGRO_glFeedbackBufferxOES_t = procedure(p1: GLsizei; p2: GLenum; p3: PGLfixed); cdecl;

  { _ALLEGRO_glPassThroughxOES_t  }
  _ALLEGRO_glPassThroughxOES_t = procedure(p1: GLfixed); cdecl;

  { _ALLEGRO_glGetFixedvOES_t  }
  _ALLEGRO_glGetFixedvOES_t = procedure(p1: GLenum; p2: PGLfixed); cdecl;

  { _ALLEGRO_glDepthRangefOES_t  }
  _ALLEGRO_glDepthRangefOES_t = procedure(p1: GLclampf; p2: GLclampf); cdecl;

  { _ALLEGRO_glFrustumfOES_t  }
  _ALLEGRO_glFrustumfOES_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glOrthofOES_t  }
  _ALLEGRO_glOrthofOES_t = procedure(p1: GLfloat; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glClipPlanefOES_t  }
  _ALLEGRO_glClipPlanefOES_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glGetClipPlanefOES_t  }
  _ALLEGRO_glGetClipPlanefOES_t = procedure(p1: GLenum; p2: PGLfloat); cdecl;

  { _ALLEGRO_glClearDepthfOES_t  }
  _ALLEGRO_glClearDepthfOES_t = procedure(p1: GLclampd); cdecl;

  { _ALLEGRO_glQueryMatrixxOES_t  }
  _ALLEGRO_glQueryMatrixxOES_t = function(p1: PGLfixed; p2: PGLint): GLbitfield; cdecl;

  { _ALLEGRO_glDepthBoundsEXT_t  }
  _ALLEGRO_glDepthBoundsEXT_t = procedure(p1: GLclampd; p2: GLclampd); cdecl;

  { _ALLEGRO_glBlendEquationSeparateEXT_t  }
  _ALLEGRO_glBlendEquationSeparateEXT_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glIsRenderbufferEXT_t  }
  _ALLEGRO_glIsRenderbufferEXT_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindRenderbufferEXT_t  }
  _ALLEGRO_glBindRenderbufferEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteRenderbuffersEXT_t  }
  _ALLEGRO_glDeleteRenderbuffersEXT_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenRenderbuffersEXT_t  }
  _ALLEGRO_glGenRenderbuffersEXT_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glRenderbufferStorageEXT_t  }
  _ALLEGRO_glRenderbufferStorageEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glGetRenderbufferParameterivEXT_t  }
  _ALLEGRO_glGetRenderbufferParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glIsFramebufferEXT_t  }
  _ALLEGRO_glIsFramebufferEXT_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glBindFramebufferEXT_t  }
  _ALLEGRO_glBindFramebufferEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteFramebuffersEXT_t  }
  _ALLEGRO_glDeleteFramebuffersEXT_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenFramebuffersEXT_t  }
  _ALLEGRO_glGenFramebuffersEXT_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glCheckFramebufferStatusEXT_t  }
  _ALLEGRO_glCheckFramebufferStatusEXT_t = function(p1: GLenum): GLenum; cdecl;

  { _ALLEGRO_glFramebufferTexture1DEXT_t  }
  _ALLEGRO_glFramebufferTexture1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glFramebufferTexture2DEXT_t  }
  _ALLEGRO_glFramebufferTexture2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glFramebufferTexture3DEXT_t  }
  _ALLEGRO_glFramebufferTexture3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glFramebufferRenderbufferEXT_t  }
  _ALLEGRO_glFramebufferRenderbufferEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint); cdecl;

  { _ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t  }
  _ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGenerateMipmapEXT_t  }
  _ALLEGRO_glGenerateMipmapEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glStringMarkerGREMEDY_t  }
  _ALLEGRO_glStringMarkerGREMEDY_t = procedure(p1: GLsizei; const p2: PGLvoid); cdecl;

  { _ALLEGRO_glStencilClearTagEXT_t  }
  _ALLEGRO_glStencilClearTagEXT_t = procedure(p1: GLsizei; p2: GLuint); cdecl;

  { _ALLEGRO_glBlitFramebufferEXT_t  }
  _ALLEGRO_glBlitFramebufferEXT_t = procedure(p1: GLint; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLint; p9: GLbitfield; p10: GLenum); cdecl;

  { _ALLEGRO_glRenderbufferStorageMultisampleEXT_t  }
  _ALLEGRO_glRenderbufferStorageMultisampleEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; p4: GLsizei; p5: GLsizei); cdecl;

  { _ALLEGRO_glGetQueryObjecti64vEXT_t  }
  _ALLEGRO_glGetQueryObjecti64vEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint64EXT); cdecl;

  { _ALLEGRO_glGetQueryObjectui64vEXT_t  }
  _ALLEGRO_glGetQueryObjectui64vEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLuint64EXT); cdecl;

  { _ALLEGRO_glProgramEnvParameters4fvEXT_t  }
  _ALLEGRO_glProgramEnvParameters4fvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramLocalParameters4fvEXT_t  }
  _ALLEGRO_glProgramLocalParameters4fvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glBufferParameteriAPPLE_t  }
  _ALLEGRO_glBufferParameteriAPPLE_t = procedure(p1: GLenum; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glFlushMappedBufferRangeAPPLE_t  }
  _ALLEGRO_glFlushMappedBufferRangeAPPLE_t = procedure(p1: GLenum; p2: GLintptr; p3: GLsizeiptr); cdecl;

  { _ALLEGRO_glUniformBufferEXT_t  }
  _ALLEGRO_glUniformBufferEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLuint); cdecl;

  { _ALLEGRO_glGetUniformBufferSizeEXT_t  }
  _ALLEGRO_glGetUniformBufferSizeEXT_t = function(p1: GLuint; p2: GLint): GLint; cdecl;

  { _ALLEGRO_glGetUniformOffsetEXT_t  }
  _ALLEGRO_glGetUniformOffsetEXT_t = function(_program: GLuint; p2: GLint): GLintptr; cdecl;

  { _ALLEGRO_glColorMaskIndexedEXT_t  }
  _ALLEGRO_glColorMaskIndexedEXT_t = procedure(p1: GLuint; p2: GLboolean; p3: GLboolean; p4: GLboolean; p5: GLboolean); cdecl;

  { _ALLEGRO_glGetBooleanIndexedvEXT_t  }
  _ALLEGRO_glGetBooleanIndexedvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: PGLboolean); cdecl;

  { _ALLEGRO_glGetIntegerIndexedvEXT_t  }
  _ALLEGRO_glGetIntegerIndexedvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glEnableIndexedEXT_t  }
  _ALLEGRO_glEnableIndexedEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDisableIndexedEXT_t  }
  _ALLEGRO_glDisableIndexedEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glIsEnabledIndexedEXT_t  }
  _ALLEGRO_glIsEnabledIndexedEXT_t = function(p1: GLenum; p2: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glDrawArraysInstancedEXT_t  }
  _ALLEGRO_glDrawArraysInstancedEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glDrawElementsInstancedEXT_t  }
  _ALLEGRO_glDrawElementsInstancedEXT_t = procedure(p1: GLenum; p2: GLsizei; p3: GLenum; const p4: PGLvoid; p5: GLsizei); cdecl;

  { _ALLEGRO_glProgramParameteriEXT_t  }
  _ALLEGRO_glProgramParameteriEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint); cdecl;

  { _ALLEGRO_glFramebufferTextureEXT_t  }
  _ALLEGRO_glFramebufferTextureEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint); cdecl;

  { _ALLEGRO_glFramebufferTextureFaceEXT_t  }
  _ALLEGRO_glFramebufferTextureFaceEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint; p5: GLenum); cdecl;

  { _ALLEGRO_glVertexAttribI1iEXT_t  }
  _ALLEGRO_glVertexAttribI1iEXT_t = procedure(p1: GLuint; p2: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI2iEXT_t  }
  _ALLEGRO_glVertexAttribI2iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI3iEXT_t  }
  _ALLEGRO_glVertexAttribI3iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI4iEXT_t  }
  _ALLEGRO_glVertexAttribI4iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glVertexAttribI1uiEXT_t  }
  _ALLEGRO_glVertexAttribI1uiEXT_t = procedure(p1: GLuint; p2: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI2uiEXT_t  }
  _ALLEGRO_glVertexAttribI2uiEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI3uiEXT_t  }
  _ALLEGRO_glVertexAttribI3uiEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4uiEXT_t  }
  _ALLEGRO_glVertexAttribI4uiEXT_t = procedure(p1: GLuint; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glVertexAttribI1ivEXT_t  }
  _ALLEGRO_glVertexAttribI1ivEXT_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI2ivEXT_t  }
  _ALLEGRO_glVertexAttribI2ivEXT_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI3ivEXT_t  }
  _ALLEGRO_glVertexAttribI3ivEXT_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI4ivEXT_t  }
  _ALLEGRO_glVertexAttribI4ivEXT_t = procedure(p1: GLuint; const p2: PGLint); cdecl;

  { _ALLEGRO_glVertexAttribI1uivEXT_t  }
  _ALLEGRO_glVertexAttribI1uivEXT_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI2uivEXT_t  }
  _ALLEGRO_glVertexAttribI2uivEXT_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI3uivEXT_t  }
  _ALLEGRO_glVertexAttribI3uivEXT_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4uivEXT_t  }
  _ALLEGRO_glVertexAttribI4uivEXT_t = procedure(p1: GLuint; const p2: PGLuint); cdecl;

  { _ALLEGRO_glVertexAttribI4bvEXT_t  }
  _ALLEGRO_glVertexAttribI4bvEXT_t = procedure(p1: GLuint; const p2: PGLbyte); cdecl;

  { _ALLEGRO_glVertexAttribI4svEXT_t  }
  _ALLEGRO_glVertexAttribI4svEXT_t = procedure(p1: GLuint; const p2: PGLshort); cdecl;

  { _ALLEGRO_glVertexAttribI4ubvEXT_t  }
  _ALLEGRO_glVertexAttribI4ubvEXT_t = procedure(p1: GLuint; const p2: PGLubyte); cdecl;

  { _ALLEGRO_glVertexAttribI4usvEXT_t  }
  _ALLEGRO_glVertexAttribI4usvEXT_t = procedure(p1: GLuint; const p2: PGLushort); cdecl;

  { _ALLEGRO_glVertexAttribIPointerEXT_t  }
  _ALLEGRO_glVertexAttribIPointerEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLenum; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glGetVertexAttribIivEXT_t  }
  _ALLEGRO_glGetVertexAttribIivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetVertexAttribIuivEXT_t  }
  _ALLEGRO_glGetVertexAttribIuivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glUniform1uiEXT_t  }
  _ALLEGRO_glUniform1uiEXT_t = procedure(p1: GLint; p2: GLuint); cdecl;

  { _ALLEGRO_glUniform2uiEXT_t  }
  _ALLEGRO_glUniform2uiEXT_t = procedure(p1: GLint; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glUniform3uiEXT_t  }
  _ALLEGRO_glUniform3uiEXT_t = procedure(p1: GLint; p2: GLuint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glUniform4uiEXT_t  }
  _ALLEGRO_glUniform4uiEXT_t = procedure(p1: GLint; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glUniform1uivEXT_t  }
  _ALLEGRO_glUniform1uivEXT_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform2uivEXT_t  }
  _ALLEGRO_glUniform2uivEXT_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform3uivEXT_t  }
  _ALLEGRO_glUniform3uivEXT_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glUniform4uivEXT_t  }
  _ALLEGRO_glUniform4uivEXT_t = procedure(p1: GLint; p2: GLsizei; const p3: PGLuint); cdecl;

  { _ALLEGRO_glGetUniformuivEXT_t  }
  _ALLEGRO_glGetUniformuivEXT_t = procedure(p1: GLuint; location: GLint; p3: PGLint); cdecl;

  { _ALLEGRO_glBindFragDataLocationEXT_t  }
  _ALLEGRO_glBindFragDataLocationEXT_t = procedure(p1: GLuint; p2: GLuint; const p3: PGLchar); cdecl;

  { _ALLEGRO_glGetFragDataLocationEXT_t  }
  _ALLEGRO_glGetFragDataLocationEXT_t = function(p1: GLuint; const p2: PGLchar): GLint; cdecl;

  { _ALLEGRO_glFramebufferTextureLayerEXT_t  }
  _ALLEGRO_glFramebufferTextureLayerEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glTexBufferEXT_t  }
  _ALLEGRO_glTexBufferEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glDepthRangedNV_t  }
  _ALLEGRO_glDepthRangedNV_t = procedure(p1: GLdouble; p2: GLdouble); cdecl;

  { _ALLEGRO_glClearDepthdNV_t  }
  _ALLEGRO_glClearDepthdNV_t = procedure(p1: GLdouble); cdecl;

  { _ALLEGRO_glDepthBoundsdNV_t  }
  _ALLEGRO_glDepthBoundsdNV_t = procedure(p1: GLdouble; p2: GLdouble); cdecl;

  { _ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t  }
  _ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t = procedure(p1: GLenum; p2: GLsizei; p3: GLsizei; p4: GLenum; p5: GLsizei; p6: GLsizei); cdecl;

  { _ALLEGRO_glProgramVertexLimitNV_t  }
  _ALLEGRO_glProgramVertexLimitNV_t = procedure(p1: GLenum; p2: GLint); cdecl;

  { _ALLEGRO_glProgramLocalParameterI4iNV_t  }
  _ALLEGRO_glProgramLocalParameterI4iNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLint; p4: GLint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glProgramLocalParameterI4ivNV_t  }
  _ALLEGRO_glProgramLocalParameterI4ivNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLint); cdecl;

  { _ALLEGRO_glProgramLocalParametersI4ivNV_t  }
  _ALLEGRO_glProgramLocalParametersI4ivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramLocalParameterI4uiNV_t  }
  _ALLEGRO_glProgramLocalParameterI4uiNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint); cdecl;

  { _ALLEGRO_glProgramLocalParameterI4uivNV_t  }
  _ALLEGRO_glProgramLocalParameterI4uivNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLuint); cdecl;

  { _ALLEGRO_glProgramLocalParametersI4uivNV_t  }
  _ALLEGRO_glProgramLocalParametersI4uivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glProgramEnvParameterI4iNV_t  }
  _ALLEGRO_glProgramEnvParameterI4iNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLint; p4: GLint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glProgramEnvParameterI4ivNV_t  }
  _ALLEGRO_glProgramEnvParameterI4ivNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLint); cdecl;

  { _ALLEGRO_glProgramEnvParametersI4ivNV_t  }
  _ALLEGRO_glProgramEnvParametersI4ivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramEnvParameterI4uiNV_t  }
  _ALLEGRO_glProgramEnvParameterI4uiNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint); cdecl;

  { _ALLEGRO_glProgramEnvParameterI4uivNV_t  }
  _ALLEGRO_glProgramEnvParameterI4uivNV_t = procedure(p1: GLenum; p2: GLuint; const p3: PGLuint); cdecl;

  { _ALLEGRO_glProgramEnvParametersI4uivNV_t  }
  _ALLEGRO_glProgramEnvParametersI4uivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glGetProgramLocalParameterIivNV_t  }
  _ALLEGRO_glGetProgramLocalParameterIivNV_t = procedure(p1: GLenum; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glGetProgramLocalParameterIuivNV_t  }
  _ALLEGRO_glGetProgramLocalParameterIuivNV_t = procedure(p1: GLenum; p2: GLuint; p3: PGLuint); cdecl;

  { _ALLEGRO_glGetProgramEnvParameterIivNV_t  }
  _ALLEGRO_glGetProgramEnvParameterIivNV_t = procedure(p1: GLenum; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glGetProgramEnvParameterIuivNV_t  }
  _ALLEGRO_glGetProgramEnvParameterIuivNV_t = procedure(p1: GLenum; p2: GLuint; p3: PGLuint); cdecl;

  { _ALLEGRO_glProgramBufferParametersfvNV_t  }
  _ALLEGRO_glProgramBufferParametersfvNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLsizei; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramBufferParametersIivNV_t  }
  _ALLEGRO_glProgramBufferParametersIivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLsizei; const p5: PGLint); cdecl;

  { _ALLEGRO_glProgramBufferParametersIuivNV_t  }
  _ALLEGRO_glProgramBufferParametersIuivNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLuint; const p5: PGLuint); cdecl;

  { _ALLEGRO_glBindBufferRangeNV_t  }
  _ALLEGRO_glBindBufferRangeNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLintptr; p5: GLsizeiptr); cdecl;

  { _ALLEGRO_glBindBufferOffsetNV_t  }
  _ALLEGRO_glBindBufferOffsetNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLintptr); cdecl;

  { _ALLEGRO_glBindBufferBaseNV_t  }
  _ALLEGRO_glBindBufferBaseNV_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glTransformFeedbackAttribsNV_t  }
  _ALLEGRO_glTransformFeedbackAttribsNV_t = procedure(p1: GLsizei; const p2: PGLint; p3: GLenum); cdecl;

  { _ALLEGRO_glTransformFeedbackVaryingsNV_t  }
  _ALLEGRO_glTransformFeedbackVaryingsNV_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLint; p4: GLenum); cdecl;

  { _ALLEGRO_glBeginTransformFeedbackNV_t  }
  _ALLEGRO_glBeginTransformFeedbackNV_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glEndTransformFeedbackNV_t  }
  _ALLEGRO_glEndTransformFeedbackNV_t = procedure(); cdecl;

  { _ALLEGRO_glGetVaryingLocationNV_t  }
  _ALLEGRO_glGetVaryingLocationNV_t = function(p1: GLuint; const p2: PGLchar): GLint; cdecl;

  { _ALLEGRO_glGetActiveVaryingNV_t  }
  _ALLEGRO_glGetActiveVaryingNV_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLsizei; p6: PGLenum; p7: PGLchar); cdecl;

  { _ALLEGRO_glActiveVaryingNV_t  }
  _ALLEGRO_glActiveVaryingNV_t = procedure(p1: GLuint; const p2: PGLchar); cdecl;

  { _ALLEGRO_glGetTransformFeedbackVaryingNV_t  }
  _ALLEGRO_glGetTransformFeedbackVaryingNV_t = procedure(p1: GLuint; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glFrameTerminatorGREMEDY_t  }
  _ALLEGRO_glFrameTerminatorGREMEDY_t = procedure(); cdecl;

  { _ALLEGRO_glBeginConditionalRenderNV_t  }
  _ALLEGRO_glBeginConditionalRenderNV_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glEndConditionalRenderNV_t  }
  _ALLEGRO_glEndConditionalRenderNV_t = procedure(); cdecl;

  { _ALLEGRO_glBeginTransformFeedbackEXT_t  }
  _ALLEGRO_glBeginTransformFeedbackEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glEndTransformFeedbackEXT_t  }
  _ALLEGRO_glEndTransformFeedbackEXT_t = procedure(); cdecl;

  { _ALLEGRO_glBindBufferRangeEXT_t  }
  _ALLEGRO_glBindBufferRangeEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLintptr; p5: GLsizeiptr); cdecl;

  { _ALLEGRO_glBindBufferOffsetEXT_t  }
  _ALLEGRO_glBindBufferOffsetEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint; p4: GLintptr); cdecl;

  { _ALLEGRO_glBindBufferBaseEXT_t  }
  _ALLEGRO_glBindBufferBaseEXT_t = procedure(p1: GLenum; p2: GLuint; p3: GLuint); cdecl;

  { _ALLEGRO_glTransformFeedbackVaryingsEXT_t  }
  _ALLEGRO_glTransformFeedbackVaryingsEXT_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLint; p4: GLenum); cdecl;

  { _ALLEGRO_glGetTransformFeedbackVaryingEXT_t  }
  _ALLEGRO_glGetTransformFeedbackVaryingEXT_t = procedure(p1: GLuint; p2: GLuint; p3: PGLint); cdecl;

  { _ALLEGRO_glClientAttribDefaultEXT_t  }
  _ALLEGRO_glClientAttribDefaultEXT_t = procedure(p1: GLbitfield); cdecl;

  { _ALLEGRO_glPushClientAttribDefaultEXT_t  }
  _ALLEGRO_glPushClientAttribDefaultEXT_t = procedure(p1: GLbitfield); cdecl;

  { _ALLEGRO_glMatrixLoadfEXT_t  }
  _ALLEGRO_glMatrixLoadfEXT_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMatrixLoaddEXT_t  }
  _ALLEGRO_glMatrixLoaddEXT_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMatrixMultfEXT_t  }
  _ALLEGRO_glMatrixMultfEXT_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMatrixMultdEXT_t  }
  _ALLEGRO_glMatrixMultdEXT_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMatrixLoadIdentityEXT_t  }
  _ALLEGRO_glMatrixLoadIdentityEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMatrixRotatefEXT_t  }
  _ALLEGRO_glMatrixRotatefEXT_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glMatrixRotatedEXT_t  }
  _ALLEGRO_glMatrixRotatedEXT_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble); cdecl;

  { _ALLEGRO_glMatrixScalefEXT_t  }
  _ALLEGRO_glMatrixScalefEXT_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glMatrixScaledEXT_t  }
  _ALLEGRO_glMatrixScaledEXT_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glMatrixTranslatefEXT_t  }
  _ALLEGRO_glMatrixTranslatefEXT_t = procedure(p1: GLenum; p2: GLfloat; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glMatrixTranslatedEXT_t  }
  _ALLEGRO_glMatrixTranslatedEXT_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble); cdecl;

  { _ALLEGRO_glMatrixFrustumEXT_t  }
  _ALLEGRO_glMatrixFrustumEXT_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble; p6: GLdouble; p7: GLdouble); cdecl;

  { _ALLEGRO_glMatrixOrthoEXT_t  }
  _ALLEGRO_glMatrixOrthoEXT_t = procedure(p1: GLenum; p2: GLdouble; p3: GLdouble; p4: GLdouble; p5: GLdouble; p6: GLdouble; p7: GLdouble); cdecl;

  { _ALLEGRO_glMatrixPopEXT_t  }
  _ALLEGRO_glMatrixPopEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMatrixPushEXT_t  }
  _ALLEGRO_glMatrixPushEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glMatrixLoadTransposefEXT_t  }
  _ALLEGRO_glMatrixLoadTransposefEXT_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMatrixLoadTransposedEXT_t  }
  _ALLEGRO_glMatrixLoadTransposedEXT_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glMatrixMultTransposefEXT_t  }
  _ALLEGRO_glMatrixMultTransposefEXT_t = procedure(p1: GLenum; const p2: PGLfloat); cdecl;

  { _ALLEGRO_glMatrixMultTransposedEXT_t  }
  _ALLEGRO_glMatrixMultTransposedEXT_t = procedure(p1: GLenum; const p2: PGLdouble); cdecl;

  { _ALLEGRO_glTextureParameterfEXT_t  }
  _ALLEGRO_glTextureParameterfEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLfloat); cdecl;

  { _ALLEGRO_glTextureParameterfvEXT_t  }
  _ALLEGRO_glTextureParameterfvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glTextureParameteriEXT_t  }
  _ALLEGRO_glTextureParameteriEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLint); cdecl;

  { _ALLEGRO_glTextureParameterivEXT_t  }
  _ALLEGRO_glTextureParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glTextureImage1DEXT_t  }
  _ALLEGRO_glTextureImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLint; p7: GLenum; p8: GLenum; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glTextureImage2DEXT_t  }
  _ALLEGRO_glTextureImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glTextureSubImage1DEXT_t  }
  _ALLEGRO_glTextureSubImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLenum; p7: GLenum; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glTextureSubImage2DEXT_t  }
  _ALLEGRO_glTextureSubImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCopyTextureImage1DEXT_t  }
  _ALLEGRO_glCopyTextureImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLint; p6: GLint; p7: GLsizei; p8: GLint); cdecl;

  { _ALLEGRO_glCopyTextureImage2DEXT_t  }
  _ALLEGRO_glCopyTextureImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLint); cdecl;

  { _ALLEGRO_glCopyTextureSubImage1DEXT_t  }
  _ALLEGRO_glCopyTextureSubImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei); cdecl;

  { _ALLEGRO_glCopyTextureSubImage2DEXT_t  }
  _ALLEGRO_glCopyTextureSubImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLsizei; p9: GLsizei); cdecl;

  { _ALLEGRO_glGetTextureImageEXT_t  }
  _ALLEGRO_glGetTextureImageEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLenum; p6: PGLvoid); cdecl;

  { _ALLEGRO_glGetTextureParameterfvEXT_t  }
  _ALLEGRO_glGetTextureParameterfvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetTextureParameterivEXT_t  }
  _ALLEGRO_glGetTextureParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetTextureLevelParameterfvEXT_t  }
  _ALLEGRO_glGetTextureLevelParameterfvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: PGLfloat); cdecl;

  { _ALLEGRO_glGetTextureLevelParameterivEXT_t  }
  _ALLEGRO_glGetTextureLevelParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: PGLint); cdecl;

  { _ALLEGRO_glTextureImage3DEXT_t  }
  _ALLEGRO_glTextureImage3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLsizei; p8: GLint; p9: GLenum; p10: GLenum; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glTextureSubImage3DEXT_t  }
  _ALLEGRO_glTextureSubImage3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLsizei; p10: GLenum; p11: GLenum; const p12: PGLvoid); cdecl;

  { _ALLEGRO_glCopyTextureSubImage3DEXT_t  }
  _ALLEGRO_glCopyTextureSubImage3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLint; p9: GLsizei; p10: GLsizei); cdecl;

  { _ALLEGRO_glMultiTexParameterfEXT_t  }
  _ALLEGRO_glMultiTexParameterfEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexParameterfvEXT_t  }
  _ALLEGRO_glMultiTexParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexParameteriEXT_t  }
  _ALLEGRO_glMultiTexParameteriEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLint); cdecl;

  { _ALLEGRO_glMultiTexParameterivEXT_t  }
  _ALLEGRO_glMultiTexParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glMultiTexImage1DEXT_t  }
  _ALLEGRO_glMultiTexImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLint; p7: GLenum; p8: GLenum; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glMultiTexImage2DEXT_t  }
  _ALLEGRO_glMultiTexImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glMultiTexSubImage1DEXT_t  }
  _ALLEGRO_glMultiTexSubImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLenum; p7: GLenum; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glMultiTexSubImage2DEXT_t  }
  _ALLEGRO_glMultiTexSubImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLenum; p9: GLenum; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCopyMultiTexImage1DEXT_t  }
  _ALLEGRO_glCopyMultiTexImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLint; p6: GLint; p7: GLsizei; p8: GLint); cdecl;

  { _ALLEGRO_glCopyMultiTexImage2DEXT_t  }
  _ALLEGRO_glCopyMultiTexImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLint); cdecl;

  { _ALLEGRO_glCopyMultiTexSubImage1DEXT_t  }
  _ALLEGRO_glCopyMultiTexSubImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei); cdecl;

  { _ALLEGRO_glCopyMultiTexSubImage2DEXT_t  }
  _ALLEGRO_glCopyMultiTexSubImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLsizei; p9: GLsizei); cdecl;

  { _ALLEGRO_glGetMultiTexImageEXT_t  }
  _ALLEGRO_glGetMultiTexImageEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLenum; p6: PGLvoid); cdecl;

  { _ALLEGRO_glGetMultiTexParameterfvEXT_t  }
  _ALLEGRO_glGetMultiTexParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetMultiTexParameterivEXT_t  }
  _ALLEGRO_glGetMultiTexParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetMultiTexLevelParameterfvEXT_t  }
  _ALLEGRO_glGetMultiTexLevelParameterfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: PGLfloat); cdecl;

  { _ALLEGRO_glGetMultiTexLevelParameterivEXT_t  }
  _ALLEGRO_glGetMultiTexLevelParameterivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: PGLint); cdecl;

  { _ALLEGRO_glMultiTexImage3DEXT_t  }
  _ALLEGRO_glMultiTexImage3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLsizei; p8: GLint; p9: GLenum; p10: GLenum; const p11: PGLvoid); cdecl;

  { _ALLEGRO_glMultiTexSubImage3DEXT_t  }
  _ALLEGRO_glMultiTexSubImage3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLsizei; p10: GLenum; p11: GLenum; const p12: PGLvoid); cdecl;

  { _ALLEGRO_glCopyMultiTexSubImage3DEXT_t  }
  _ALLEGRO_glCopyMultiTexSubImage3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLint; p9: GLsizei; p10: GLsizei); cdecl;

  { _ALLEGRO_glBindMultiTextureEXT_t  }
  _ALLEGRO_glBindMultiTextureEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glEnableClientStateIndexedEXT_t  }
  _ALLEGRO_glEnableClientStateIndexedEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDisableClientStateIndexedEXT_t  }
  _ALLEGRO_glDisableClientStateIndexedEXT_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glMultiTexCoordPointerEXT_t  }
  _ALLEGRO_glMultiTexCoordPointerEXT_t = procedure(p1: GLenum; p2: GLint; p3: GLenum; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glMultiTexEnvfEXT_t  }
  _ALLEGRO_glMultiTexEnvfEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexEnvfvEXT_t  }
  _ALLEGRO_glMultiTexEnvfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexEnviEXT_t  }
  _ALLEGRO_glMultiTexEnviEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLint); cdecl;

  { _ALLEGRO_glMultiTexEnvivEXT_t  }
  _ALLEGRO_glMultiTexEnvivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glMultiTexGendEXT_t  }
  _ALLEGRO_glMultiTexGendEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLdouble); cdecl;

  { _ALLEGRO_glMultiTexGendvEXT_t  }
  _ALLEGRO_glMultiTexGendvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLdouble); cdecl;

  { _ALLEGRO_glMultiTexGenfEXT_t  }
  _ALLEGRO_glMultiTexGenfEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLfloat); cdecl;

  { _ALLEGRO_glMultiTexGenfvEXT_t  }
  _ALLEGRO_glMultiTexGenfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glMultiTexGeniEXT_t  }
  _ALLEGRO_glMultiTexGeniEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLint); cdecl;

  { _ALLEGRO_glMultiTexGenivEXT_t  }
  _ALLEGRO_glMultiTexGenivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glGetMultiTexEnvfvEXT_t  }
  _ALLEGRO_glGetMultiTexEnvfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetMultiTexEnvivEXT_t  }
  _ALLEGRO_glGetMultiTexEnvivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetMultiTexGendvEXT_t  }
  _ALLEGRO_glGetMultiTexGendvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLdouble); cdecl;

  { _ALLEGRO_glGetMultiTexGenfvEXT_t  }
  _ALLEGRO_glGetMultiTexGenfvEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetMultiTexGenivEXT_t  }
  _ALLEGRO_glGetMultiTexGenivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetFloatIndexedvEXT_t  }
  _ALLEGRO_glGetFloatIndexedvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glGetDoubleIndexedvEXT_t  }
  _ALLEGRO_glGetDoubleIndexedvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: PGLdouble); cdecl;

  { _ALLEGRO_glGetPointerIndexedvEXT_t  }
  _ALLEGRO_glGetPointerIndexedvEXT_t = procedure(p1: GLenum; p2: GLuint; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureImage3DEXT_t  }
  _ALLEGRO_glCompressedTextureImage3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLsizei; p8: GLint; p9: GLsizei; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureImage2DEXT_t  }
  _ALLEGRO_glCompressedTextureImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureImage1DEXT_t  }
  _ALLEGRO_glCompressedTextureImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLint; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureSubImage3DEXT_t  }
  _ALLEGRO_glCompressedTextureSubImage3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLsizei; p10: GLenum; p11: GLsizei; const p12: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureSubImage2DEXT_t  }
  _ALLEGRO_glCompressedTextureSubImage2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLenum; p9: GLsizei; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedTextureSubImage1DEXT_t  }
  _ALLEGRO_glCompressedTextureSubImage1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLenum; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glGetCompressedTextureImageEXT_t  }
  _ALLEGRO_glGetCompressedTextureImageEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLint; p4: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexImage3DEXT_t  }
  _ALLEGRO_glCompressedMultiTexImage3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLsizei; p8: GLint; p9: GLsizei; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexImage2DEXT_t  }
  _ALLEGRO_glCompressedMultiTexImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLsizei; p7: GLint; p8: GLsizei; const p9: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexImage1DEXT_t  }
  _ALLEGRO_glCompressedMultiTexImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLenum; p5: GLsizei; p6: GLint; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexSubImage3DEXT_t  }
  _ALLEGRO_glCompressedMultiTexSubImage3DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLsizei; p8: GLsizei; p9: GLsizei; p10: GLenum; p11: GLsizei; const p12: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexSubImage2DEXT_t  }
  _ALLEGRO_glCompressedMultiTexSubImage2DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLint; p6: GLsizei; p7: GLsizei; p8: GLenum; p9: GLsizei; const p10: PGLvoid); cdecl;

  { _ALLEGRO_glCompressedMultiTexSubImage1DEXT_t  }
  _ALLEGRO_glCompressedMultiTexSubImage1DEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: GLint; p5: GLsizei; p6: GLenum; p7: GLsizei; const p8: PGLvoid); cdecl;

  { _ALLEGRO_glGetCompressedMultiTexImageEXT_t  }
  _ALLEGRO_glGetCompressedMultiTexImageEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLint; p4: PGLvoid); cdecl;

  { _ALLEGRO_glNamedProgramStringEXT_t  }
  _ALLEGRO_glNamedProgramStringEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLsizei; const p5: PGLvoid); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameter4dEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameter4dEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLdouble; p5: GLdouble; p6: GLdouble; p7: GLdouble); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameter4dvEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameter4dvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; const p4: PGLdouble); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameter4fEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameter4fEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLfloat; p5: GLfloat; p6: GLfloat; p7: GLfloat); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameter4fvEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameter4fvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t  }
  _ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: PGLdouble); cdecl;

  { _ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t  }
  _ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: PGLfloat); cdecl;

  { _ALLEGRO_glGetNamedProgramivEXT_t  }
  _ALLEGRO_glGetNamedProgramivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetNamedProgramStringEXT_t  }
  _ALLEGRO_glGetNamedProgramStringEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLvoid); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameters4fvEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameters4fvEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLsizei; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameterI4iEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameterI4iEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLint; p5: GLint; p6: GLint; p7: GLint); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; const p4: PGLint); cdecl;

  { _ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t  }
  _ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLsizei; const p5: PGLint); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint; p7: GLuint); cdecl;

  { _ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t  }
  _ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; const p4: PGLuint); cdecl;

  { _ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t  }
  _ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLsizei; const p5: PGLuint); cdecl;

  { _ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t  }
  _ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: PGLint); cdecl;

  { _ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t  }
  _ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: PGLuint); cdecl;

  { _ALLEGRO_glTextureParameterIivEXT_t  }
  _ALLEGRO_glTextureParameterIivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glTextureParameterIuivEXT_t  }
  _ALLEGRO_glTextureParameterIuivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; const p4: PGLuint); cdecl;

  { _ALLEGRO_glGetTextureParameterIivEXT_t  }
  _ALLEGRO_glGetTextureParameterIivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetTextureParameterIuivEXT_t  }
  _ALLEGRO_glGetTextureParameterIuivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLuint); cdecl;

  { _ALLEGRO_glMultiTexParameterIivEXT_t  }
  _ALLEGRO_glMultiTexParameterIivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLint); cdecl;

  { _ALLEGRO_glMultiTexParameterIuivEXT_t  }
  _ALLEGRO_glMultiTexParameterIuivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; const p4: PGLuint); cdecl;

  { _ALLEGRO_glGetMultiTexParameterIivEXT_t  }
  _ALLEGRO_glGetMultiTexParameterIivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGetMultiTexParameterIuivEXT_t  }
  _ALLEGRO_glGetMultiTexParameterIuivEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: PGLuint); cdecl;

  { _ALLEGRO_glProgramUniform1fEXT_t  }
  _ALLEGRO_glProgramUniform1fEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLfloat); cdecl;

  { _ALLEGRO_glProgramUniform2fEXT_t  }
  _ALLEGRO_glProgramUniform2fEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLfloat; p4: GLfloat); cdecl;

  { _ALLEGRO_glProgramUniform3fEXT_t  }
  _ALLEGRO_glProgramUniform3fEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLfloat; p4: GLfloat; p5: GLfloat); cdecl;

  { _ALLEGRO_glProgramUniform4fEXT_t  }
  _ALLEGRO_glProgramUniform4fEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLfloat; p4: GLfloat; p5: GLfloat; p6: GLfloat); cdecl;

  { _ALLEGRO_glProgramUniform1iEXT_t  }
  _ALLEGRO_glProgramUniform1iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint); cdecl;

  { _ALLEGRO_glProgramUniform2iEXT_t  }
  _ALLEGRO_glProgramUniform2iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint); cdecl;

  { _ALLEGRO_glProgramUniform3iEXT_t  }
  _ALLEGRO_glProgramUniform3iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glProgramUniform4iEXT_t  }
  _ALLEGRO_glProgramUniform4iEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glProgramUniform1fvEXT_t  }
  _ALLEGRO_glProgramUniform1fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniform2fvEXT_t  }
  _ALLEGRO_glProgramUniform2fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniform3fvEXT_t  }
  _ALLEGRO_glProgramUniform3fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniform4fvEXT_t  }
  _ALLEGRO_glProgramUniform4fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniform1ivEXT_t  }
  _ALLEGRO_glProgramUniform1ivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramUniform2ivEXT_t  }
  _ALLEGRO_glProgramUniform2ivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramUniform3ivEXT_t  }
  _ALLEGRO_glProgramUniform3ivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramUniform4ivEXT_t  }
  _ALLEGRO_glProgramUniform4ivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLint); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2x3fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2x3fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3x2fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3x2fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix2x4fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix2x4fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4x2fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4x2fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix3x4fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix3x4fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniformMatrix4x3fvEXT_t  }
  _ALLEGRO_glProgramUniformMatrix4x3fvEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; p4: GLboolean; const p5: PGLfloat); cdecl;

  { _ALLEGRO_glProgramUniform1uiEXT_t  }
  _ALLEGRO_glProgramUniform1uiEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLuint); cdecl;

  { _ALLEGRO_glProgramUniform2uiEXT_t  }
  _ALLEGRO_glProgramUniform2uiEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLuint; p4: GLuint); cdecl;

  { _ALLEGRO_glProgramUniform3uiEXT_t  }
  _ALLEGRO_glProgramUniform3uiEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLuint; p4: GLuint; p5: GLuint); cdecl;

  { _ALLEGRO_glProgramUniform4uiEXT_t  }
  _ALLEGRO_glProgramUniform4uiEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLuint; p4: GLuint; p5: GLuint; p6: GLuint); cdecl;

  { _ALLEGRO_glProgramUniform1uivEXT_t  }
  _ALLEGRO_glProgramUniform1uivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glProgramUniform2uivEXT_t  }
  _ALLEGRO_glProgramUniform2uivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glProgramUniform3uivEXT_t  }
  _ALLEGRO_glProgramUniform3uivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glProgramUniform4uivEXT_t  }
  _ALLEGRO_glProgramUniform4uivEXT_t = procedure(p1: GLuint; p2: GLint; p3: GLsizei; const p4: PGLuint); cdecl;

  { _ALLEGRO_glNamedBufferDataEXT_t  }
  _ALLEGRO_glNamedBufferDataEXT_t = procedure(p1: GLuint; p2: GLsizeiptr; const p3: PGLvoid; p4: GLenum); cdecl;

  { _ALLEGRO_glNamedBufferSubDataEXT_t  }
  _ALLEGRO_glNamedBufferSubDataEXT_t = procedure(p1: GLuint; p2: GLintptr; p3: GLsizeiptr; const p4: PGLvoid); cdecl;

  { _ALLEGRO_glMapNamedBufferEXT_t  }
  _ALLEGRO_glMapNamedBufferEXT_t = function(p1: GLuint; p2: GLenum): PGLvoid; cdecl;

  { _ALLEGRO_glUnmapNamedBufferEXT_t  }
  _ALLEGRO_glUnmapNamedBufferEXT_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glGetNamedBufferParameterivEXT_t  }
  _ALLEGRO_glGetNamedBufferParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glGetNamedBufferPointervEXT_t  }
  _ALLEGRO_glGetNamedBufferPointervEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PPGLvoid); cdecl;

  { _ALLEGRO_glGetNamedBufferSubDataEXT_t  }
  _ALLEGRO_glGetNamedBufferSubDataEXT_t = procedure(p1: GLuint; p2: GLintptr; p3: GLsizeiptr; p4: PGLvoid); cdecl;

  { _ALLEGRO_glTextureBufferEXT_t  }
  _ALLEGRO_glTextureBufferEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLuint); cdecl;

  { _ALLEGRO_glMultiTexBufferEXT_t  }
  _ALLEGRO_glMultiTexBufferEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLenum; p4: GLuint); cdecl;

  { _ALLEGRO_glNamedRenderbufferStorageEXT_t  }
  _ALLEGRO_glNamedRenderbufferStorageEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLsizei; p4: GLsizei); cdecl;

  { _ALLEGRO_glGetNamedRenderbufferParameterivEXT_t  }
  _ALLEGRO_glGetNamedRenderbufferParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glCheckNamedFramebufferStatusEXT_t  }
  _ALLEGRO_glCheckNamedFramebufferStatusEXT_t = function(p1: GLuint; p2: GLenum): GLenum; cdecl;

  { _ALLEGRO_glNamedFramebufferTexture1DEXT_t  }
  _ALLEGRO_glNamedFramebufferTexture1DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glNamedFramebufferTexture2DEXT_t  }
  _ALLEGRO_glNamedFramebufferTexture2DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint); cdecl;

  { _ALLEGRO_glNamedFramebufferTexture3DEXT_t  }
  _ALLEGRO_glNamedFramebufferTexture3DEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLuint; p5: GLint; p6: GLint); cdecl;

  { _ALLEGRO_glNamedFramebufferRenderbufferEXT_t  }
  _ALLEGRO_glNamedFramebufferRenderbufferEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: GLuint); cdecl;

  { _ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t  }
  _ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLenum; p4: PGLint); cdecl;

  { _ALLEGRO_glGenerateTextureMipmapEXT_t  }
  _ALLEGRO_glGenerateTextureMipmapEXT_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glGenerateMultiTexMipmapEXT_t  }
  _ALLEGRO_glGenerateMultiTexMipmapEXT_t = procedure(p1: GLenum; p2: GLenum); cdecl;

  { _ALLEGRO_glFramebufferDrawBufferEXT_t  }
  _ALLEGRO_glFramebufferDrawBufferEXT_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glFramebufferDrawBuffersEXT_t  }
  _ALLEGRO_glFramebufferDrawBuffersEXT_t = procedure(p1: GLuint; p2: GLsizei; const p3: PGLenum); cdecl;

  { _ALLEGRO_glFramebufferReadBufferEXT_t  }
  _ALLEGRO_glFramebufferReadBufferEXT_t = procedure(p1: GLuint; p2: GLenum); cdecl;

  { _ALLEGRO_glGetFramebufferParameterivEXT_t  }
  _ALLEGRO_glGetFramebufferParameterivEXT_t = procedure(p1: GLuint; p2: GLenum; p3: PGLint); cdecl;

  { _ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t  }
  _ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t = procedure(p1: GLuint; p2: GLsizei; p3: GLenum; p4: GLsizei; p5: GLsizei); cdecl;

  { _ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t  }
  _ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t = procedure(p1: GLuint; p2: GLsizei; p3: GLsizei; p4: GLenum; p5: GLsizei; p6: GLsizei); cdecl;

  { _ALLEGRO_glNamedFramebufferTextureEXT_t  }
  _ALLEGRO_glNamedFramebufferTextureEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLint); cdecl;

  { _ALLEGRO_glNamedFramebufferTextureLayerEXT_t  }
  _ALLEGRO_glNamedFramebufferTextureLayerEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLint; p5: GLint); cdecl;

  { _ALLEGRO_glNamedFramebufferTextureFaceEXT_t  }
  _ALLEGRO_glNamedFramebufferTextureFaceEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint; p4: GLint; p5: GLenum); cdecl;

  { _ALLEGRO_glTextureRenderbufferEXT_t  }
  _ALLEGRO_glTextureRenderbufferEXT_t = procedure(p1: GLuint; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glMultiTexRenderbufferEXT_t  }
  _ALLEGRO_glMultiTexRenderbufferEXT_t = procedure(p1: GLenum; p2: GLenum; p3: GLuint); cdecl;

  { _ALLEGRO_glGetMultisamplefvNV_t  }
  _ALLEGRO_glGetMultisamplefvNV_t = procedure(p1: GLenum; p2: GLuint; p3: PGLfloat); cdecl;

  { _ALLEGRO_glSampleMaskIndexedNV_t  }
  _ALLEGRO_glSampleMaskIndexedNV_t = procedure(p1: GLuint; p2: GLbitfield); cdecl;

  { _ALLEGRO_glTexRenderbufferNV_t  }
  _ALLEGRO_glTexRenderbufferNV_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glBindTransformFeedbackNV_t  }
  _ALLEGRO_glBindTransformFeedbackNV_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glDeleteTransformFeedbacksNV_t  }
  _ALLEGRO_glDeleteTransformFeedbacksNV_t = procedure(p1: GLsizei; const p2: PGLuint); cdecl;

  { _ALLEGRO_glGenTransformFeedbacksNV_t  }
  _ALLEGRO_glGenTransformFeedbacksNV_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glIsTransformFeedbackNV_t  }
  _ALLEGRO_glIsTransformFeedbackNV_t = function(p1: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glPauseTransformFeedbackNV_t  }
  _ALLEGRO_glPauseTransformFeedbackNV_t = procedure(); cdecl;

  { _ALLEGRO_glResumeTransformFeedbackNV_t  }
  _ALLEGRO_glResumeTransformFeedbackNV_t = procedure(); cdecl;

  { _ALLEGRO_glDrawTransformFeedbackNV_t  }
  _ALLEGRO_glDrawTransformFeedbackNV_t = procedure(p1: GLenum; p2: GLuint); cdecl;

  { _ALLEGRO_glGetPerfMonitorGroupsAMD_t  }
  _ALLEGRO_glGetPerfMonitorGroupsAMD_t = procedure(p1: PGLint; p2: GLsizei; p3: PGLuint); cdecl;

  { _ALLEGRO_glGetPerfMonitorCountersAMD_t  }
  _ALLEGRO_glGetPerfMonitorCountersAMD_t = procedure(p1: GLuint; p2: PGLint; p3: PGLint; p4: GLsizei; p5: PGLuint); cdecl;

  { _ALLEGRO_glGetPerfMonitorGroupStringAMD_t  }
  _ALLEGRO_glGetPerfMonitorGroupStringAMD_t = procedure(p1: GLuint; p2: GLsizei; p3: PGLsizei; p4: PGLchar); cdecl;

  { _ALLEGRO_glGetPerfMonitorCounterStringAMD_t  }
  _ALLEGRO_glGetPerfMonitorCounterStringAMD_t = procedure(p1: GLuint; p2: GLuint; p3: GLsizei; p4: PGLsizei; p5: PGLchar); cdecl;

  { _ALLEGRO_glGetPerfMonitorCounterInfoAMD_t  }
  _ALLEGRO_glGetPerfMonitorCounterInfoAMD_t = procedure(p1: GLuint; p2: GLuint; p3: GLenum; p4: Pointer); cdecl;

  { _ALLEGRO_glGenPerfMonitorsAMD_t  }
  _ALLEGRO_glGenPerfMonitorsAMD_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glDeletePerfMonitorsAMD_t  }
  _ALLEGRO_glDeletePerfMonitorsAMD_t = procedure(p1: GLsizei; p2: PGLuint); cdecl;

  { _ALLEGRO_glSelectPerfMonitorCountersAMD_t  }
  _ALLEGRO_glSelectPerfMonitorCountersAMD_t = procedure(p1: GLuint; p2: GLboolean; p3: GLuint; p4: GLint; p5: PGLuint); cdecl;

  { _ALLEGRO_glBeginPerfMonitorAMD_t  }
  _ALLEGRO_glBeginPerfMonitorAMD_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glEndPerfMonitorAMD_t  }
  _ALLEGRO_glEndPerfMonitorAMD_t = procedure(p1: GLuint); cdecl;

  { _ALLEGRO_glGetPerfMonitorCounterDataAMD_t  }
  _ALLEGRO_glGetPerfMonitorCounterDataAMD_t = procedure(p1: GLuint; p2: GLenum; p3: GLsizei; p4: PGLuint; p5: PGLint); cdecl;

  { _ALLEGRO_glTessellationFactorAMD_t  }
  _ALLEGRO_glTessellationFactorAMD_t = procedure(p1: GLfloat); cdecl;

  { _ALLEGRO_glTessellationModeAMD_t  }
  _ALLEGRO_glTessellationModeAMD_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glProvokingVertexEXT_t  }
  _ALLEGRO_glProvokingVertexEXT_t = procedure(p1: GLenum); cdecl;

  { _ALLEGRO_glBlendFuncIndexedAMD_t  }
  _ALLEGRO_glBlendFuncIndexedAMD_t = procedure(buf: GLuint; src: GLenum; dst: GLenum); cdecl;

  { _ALLEGRO_glBlendFuncSeparateIndexedAMD_t  }
  _ALLEGRO_glBlendFuncSeparateIndexedAMD_t = procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); cdecl;

  { _ALLEGRO_glBlendEquationIndexedAMD_t  }
  _ALLEGRO_glBlendEquationIndexedAMD_t = procedure(buf: GLuint; mode: GLenum); cdecl;

  { _ALLEGRO_glBlendEquationSeparateIndexedAMD_t  }
  _ALLEGRO_glBlendEquationSeparateIndexedAMD_t = procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); cdecl;

  { _ALLEGRO_glTextureRangeAPPLE_t  }
  _ALLEGRO_glTextureRangeAPPLE_t = procedure(target: GLenum; length: GLsizei; const pointer: PGLvoid); cdecl;

  { _ALLEGRO_glGetTexParameterPointervAPPLE_t  }
  _ALLEGRO_glGetTexParameterPointervAPPLE_t = procedure(target: GLenum; pname: GLenum; params: PPGLvoid); cdecl;

  { _ALLEGRO_glEnableVertexAttribAPPLE_t  }
  _ALLEGRO_glEnableVertexAttribAPPLE_t = procedure(index: GLuint; pname: GLenum); cdecl;

  { _ALLEGRO_glDisableVertexAttribAPPLE_t  }
  _ALLEGRO_glDisableVertexAttribAPPLE_t = procedure(index: GLuint; pname: GLenum); cdecl;

  { _ALLEGRO_glIsVertexAttribEnabledAPPLE_t  }
  _ALLEGRO_glIsVertexAttribEnabledAPPLE_t = function(index: GLuint; pname: GLenum): GLboolean; cdecl;

  { _ALLEGRO_glMapVertexAttrib1dAPPLE_t  }
  _ALLEGRO_glMapVertexAttrib1dAPPLE_t = procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; stride: GLint; order: GLint; const points: PGLdouble); cdecl;

  { _ALLEGRO_glMapVertexAttrib1fAPPLE_t  }
  _ALLEGRO_glMapVertexAttrib1fAPPLE_t = procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; stride: GLint; order: GLint; const points: PGLfloat); cdecl;

  { _ALLEGRO_glMapVertexAttrib2dAPPLE_t  }
  _ALLEGRO_glMapVertexAttrib2dAPPLE_t = procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; ustride: GLint; uorder: GLint; v1: GLdouble; v2: GLdouble; vstride: GLint; vorder: GLint; const points: PGLdouble); cdecl;

  { _ALLEGRO_glMapVertexAttrib2fAPPLE_t  }
  _ALLEGRO_glMapVertexAttrib2fAPPLE_t = procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; ustride: GLint; uorder: GLint; v1: GLfloat; v2: GLfloat; vstride: GLint; vorder: GLint; const points: PGLfloat); cdecl;

  { _ALLEGRO_glObjectPurgeableAPPLE_t  }
  _ALLEGRO_glObjectPurgeableAPPLE_t = function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; cdecl;

  { _ALLEGRO_glObjectUnpurgeableAPPLE_t  }
  _ALLEGRO_glObjectUnpurgeableAPPLE_t = function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; cdecl;

  { _ALLEGRO_glGetObjectParameterivAPPLE_t  }
  _ALLEGRO_glGetObjectParameterivAPPLE_t = procedure(objectType: GLenum; name: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glBeginVideoCaptureNV_t  }
  _ALLEGRO_glBeginVideoCaptureNV_t = procedure(video_capture_slot: GLuint); cdecl;

  { _ALLEGRO_glBindVideoCaptureStreamBufferNV_t  }
  _ALLEGRO_glBindVideoCaptureStreamBufferNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; frame_region: GLenum; offset: GLintptrARB); cdecl;

  { _ALLEGRO_glBindVideoCaptureStreamTextureNV_t  }
  _ALLEGRO_glBindVideoCaptureStreamTextureNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; frame_region: GLenum; target: GLenum; texture: GLuint); cdecl;

  { _ALLEGRO_glEndVideoCaptureNV_t  }
  _ALLEGRO_glEndVideoCaptureNV_t = procedure(video_capture_slot: GLuint); cdecl;

  { _ALLEGRO_glGetVideoCaptureivNV_t  }
  _ALLEGRO_glGetVideoCaptureivNV_t = procedure(video_capture_slot: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetVideoCaptureStreamivNV_t  }
  _ALLEGRO_glGetVideoCaptureStreamivNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLint); cdecl;

  { _ALLEGRO_glGetVideoCaptureStreamfvNV_t  }
  _ALLEGRO_glGetVideoCaptureStreamfvNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLfloat); cdecl;

  { _ALLEGRO_glGetVideoCaptureStreamdvNV_t  }
  _ALLEGRO_glGetVideoCaptureStreamdvNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLdouble); cdecl;

  { _ALLEGRO_glVideoCaptureNV_t  }
  _ALLEGRO_glVideoCaptureNV_t = function(video_capture_slot: GLuint; sequence_num: PGLuint; capture_time: PGLuint64EXT): GLenum; cdecl;

  { _ALLEGRO_glVideoCaptureStreamParameterivNV_t  }
  _ALLEGRO_glVideoCaptureStreamParameterivNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLint); cdecl;

  { _ALLEGRO_glVideoCaptureStreamParameterfvNV_t  }
  _ALLEGRO_glVideoCaptureStreamParameterfvNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLfloat); cdecl;

  { _ALLEGRO_glVideoCaptureStreamParameterdvNV_t  }
  _ALLEGRO_glVideoCaptureStreamParameterdvNV_t = procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLdouble); cdecl;

  { _ALLEGRO_glUseShaderProgramEXT_t  }
  _ALLEGRO_glUseShaderProgramEXT_t = procedure(_type: GLenum; _program: GLuint); cdecl;

  { _ALLEGRO_glActiveProgramEXT_t  }
  _ALLEGRO_glActiveProgramEXT_t = procedure(_program: GLuint); cdecl;

  { _ALLEGRO_glCreateShaderProgramEXT_t  }
  _ALLEGRO_glCreateShaderProgramEXT_t = function(_type: GLenum; const _string: PGLchar): GLuint; cdecl;

  { _ALLEGRO_glMakeBufferResidentNV_t  }
  _ALLEGRO_glMakeBufferResidentNV_t = procedure(target: GLenum; access: GLenum); cdecl;

  { _ALLEGRO_glMakeBufferNonResidentNV_t  }
  _ALLEGRO_glMakeBufferNonResidentNV_t = procedure(target: GLenum); cdecl;

  { _ALLEGRO_glIsBufferResidentNV_t  }
  _ALLEGRO_glIsBufferResidentNV_t = function(target: GLenum): GLboolean; cdecl;

  { _ALLEGRO_glMakeNamedBufferResidentNV_t  }
  _ALLEGRO_glMakeNamedBufferResidentNV_t = procedure(buffer: GLuint; access: GLenum); cdecl;

  { _ALLEGRO_glMakeNamedBufferNonResidentNV_t  }
  _ALLEGRO_glMakeNamedBufferNonResidentNV_t = procedure(buffer: GLuint); cdecl;

  { _ALLEGRO_glIsNamedBufferResidentNV_t  }
  _ALLEGRO_glIsNamedBufferResidentNV_t = function(buffer: GLuint): GLboolean; cdecl;

  { _ALLEGRO_glGetBufferParameterui64vNV_t  }
  _ALLEGRO_glGetBufferParameterui64vNV_t = procedure(target: GLenum; pname: GLenum; params: PGLuint64EXT); cdecl;

  { _ALLEGRO_glGetNamedBufferParameterui64vNV_t  }
  _ALLEGRO_glGetNamedBufferParameterui64vNV_t = procedure(buffer: GLuint; pname: GLenum; params: PGLuint64EXT); cdecl;

  { _ALLEGRO_glGetIntegerui64vNV_t  }
  _ALLEGRO_glGetIntegerui64vNV_t = procedure(value: GLenum; result: PGLuint64EXT); cdecl;

  { _ALLEGRO_glUniformui64NV_t  }
  _ALLEGRO_glUniformui64NV_t = procedure(location: GLint; value: GLuint64EXT); cdecl;

  { _ALLEGRO_glUniformui64vNV_t  }
  _ALLEGRO_glUniformui64vNV_t = procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); cdecl;

  { _ALLEGRO_glGetUniformui64vNV_t  }
  _ALLEGRO_glGetUniformui64vNV_t = procedure(_program: GLuint; location: GLint; params: PGLuint64EXT); cdecl;

  { _ALLEGRO_glProgramUniformui64NV_t  }
  _ALLEGRO_glProgramUniformui64NV_t = procedure(_program: GLuint; location: GLint; value: GLuint64EXT); cdecl;

  { _ALLEGRO_glProgramUniformui64vNV_t  }
  _ALLEGRO_glProgramUniformui64vNV_t = procedure(_program: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); cdecl;

  { _ALLEGRO_glBufferAddressRangeNV_t  }
  _ALLEGRO_glBufferAddressRangeNV_t = procedure(pname: GLenum; index: GLuint; address: GLuint64EXT; length: GLsizeiptr); cdecl;

  { _ALLEGRO_glVertexFormatNV_t  }
  _ALLEGRO_glVertexFormatNV_t = procedure(size: GLint; _type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glNormalFormatNV_t  }
  _ALLEGRO_glNormalFormatNV_t = procedure(_type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glColorFormatNV_t  }
  _ALLEGRO_glColorFormatNV_t = procedure(size: GLint; _type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glIndexFormatNV_t  }
  _ALLEGRO_glIndexFormatNV_t = procedure(_type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glTexCoordFormatNV_t  }
  _ALLEGRO_glTexCoordFormatNV_t = procedure(size: GLint; _type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glEdgeFlagFormatNV_t  }
  _ALLEGRO_glEdgeFlagFormatNV_t = procedure(stride: GLsizei); cdecl;

  { _ALLEGRO_glSecondaryColorFormatNV_t  }
  _ALLEGRO_glSecondaryColorFormatNV_t = procedure(size: GLint; _type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glFogCoordFormatNV_t  }
  _ALLEGRO_glFogCoordFormatNV_t = procedure(_type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glVertexAttribFormatNV_t  }
  _ALLEGRO_glVertexAttribFormatNV_t = procedure(index: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; stride: GLsizei); cdecl;

  { _ALLEGRO_glVertexAttribIFormatNV_t  }
  _ALLEGRO_glVertexAttribIFormatNV_t = procedure(index: GLuint; size: GLint; _type: GLenum; stride: GLsizei); cdecl;

  { _ALLEGRO_glGetIntegerui64i_vNV_t  }
  _ALLEGRO_glGetIntegerui64i_vNV_t = procedure(value: GLenum; index: GLuint; result: PGLuint64EXT); cdecl;

  { _ALLEGRO_glTextureBarrierNV_t  }
  _ALLEGRO_glTextureBarrierNV_t = procedure(); cdecl;

  { _ALLEGRO_wglCreateBufferRegionARB_t  }
  _ALLEGRO_wglCreateBufferRegionARB_t = function(p1: HDC; p2: Integer; p3: UINT): THandle; cdecl;

  { _ALLEGRO_wglDeleteBufferRegionARB_t  }
  _ALLEGRO_wglDeleteBufferRegionARB_t = procedure(p1: THandle); cdecl;

  { _ALLEGRO_wglSaveBufferRegionARB_t  }
  _ALLEGRO_wglSaveBufferRegionARB_t = function(p1: THandle; p2: Integer; p3: Integer; p4: Integer; p5: Integer): BOOL; cdecl;

  { _ALLEGRO_wglRestoreBufferRegionARB_t  }
  _ALLEGRO_wglRestoreBufferRegionARB_t = function(p1: THandle; p2: Integer; p3: Integer; p4: Integer; p5: Integer; p6: Integer; p7: Integer): BOOL; cdecl;

  { _ALLEGRO_wglGetExtensionsStringARB_t  }
  _ALLEGRO_wglGetExtensionsStringARB_t = function(p1: HDC): PUTF8Char; cdecl;

  { _ALLEGRO_wglGetPixelFormatAttribivARB_t  }
  _ALLEGRO_wglGetPixelFormatAttribivARB_t = function(p1: HDC; p2: Integer; p3: Integer; p4: UINT; const p5: PInteger; p6: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetPixelFormatAttribfvARB_t  }
  _ALLEGRO_wglGetPixelFormatAttribfvARB_t = function(p1: HDC; p2: Integer; p3: Integer; p4: UINT; const p5: PInteger; p6: PFLOAT): BOOL; cdecl;

  { _ALLEGRO_wglChoosePixelFormatARB_t  }
  _ALLEGRO_wglChoosePixelFormatARB_t = function(p1: HDC; const p2: PInteger; const p3: PFLOAT; p4: UINT; p5: PInteger; p6: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglMakeContextCurrentARB_t  }
  _ALLEGRO_wglMakeContextCurrentARB_t = function(p1: HDC; p2: HDC; p3: HGLRC): BOOL; cdecl;

  { _ALLEGRO_wglGetCurrentReadDCARB_t  }
  _ALLEGRO_wglGetCurrentReadDCARB_t = function(): HDC; cdecl;

  { _ALLEGRO_wglCreatePbufferARB_t  }
  _ALLEGRO_wglCreatePbufferARB_t = function(p1: HDC; p2: Integer; p3: Integer; p4: Integer; const p5: PInteger): HPBUFFERARB; cdecl;

  { _ALLEGRO_wglGetPbufferDCARB_t  }
  _ALLEGRO_wglGetPbufferDCARB_t = function(p1: HPBUFFERARB): HDC; cdecl;

  { _ALLEGRO_wglReleasePbufferDCARB_t  }
  _ALLEGRO_wglReleasePbufferDCARB_t = function(p1: HPBUFFERARB; p2: HDC): Integer; cdecl;

  { _ALLEGRO_wglDestroyPbufferARB_t  }
  _ALLEGRO_wglDestroyPbufferARB_t = function(p1: HPBUFFERARB): BOOL; cdecl;

  { _ALLEGRO_wglQueryPbufferARB_t  }
  _ALLEGRO_wglQueryPbufferARB_t = function(p1: HPBUFFERARB; p2: Integer; p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglBindTexImageARB_t  }
  _ALLEGRO_wglBindTexImageARB_t = function(p1: HPBUFFERARB; p2: Integer): BOOL; cdecl;

  { _ALLEGRO_wglReleaseTexImageARB_t  }
  _ALLEGRO_wglReleaseTexImageARB_t = function(p1: HPBUFFERARB; p2: Integer): BOOL; cdecl;

  { _ALLEGRO_wglSetPbufferAttribARB_t  }
  _ALLEGRO_wglSetPbufferAttribARB_t = function(p1: HPBUFFERARB; const p2: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglCreateContextAttribsARB_t  }
  _ALLEGRO_wglCreateContextAttribsARB_t = function(p1: HDC; p2: HGLRC; const p3: PInteger): HGLRC; cdecl;

  { _ALLEGRO_wglCreateDisplayColorTableEXT_t  }
  _ALLEGRO_wglCreateDisplayColorTableEXT_t = function(p1: GLushort): GLboolean; cdecl;

  { _ALLEGRO_wglLoadDisplayColorTableEXT_t  }
  _ALLEGRO_wglLoadDisplayColorTableEXT_t = function(const p1: PGLushort; p2: GLuint): GLboolean; cdecl;

  { _ALLEGRO_wglBindDisplayColorTableEXT_t  }
  _ALLEGRO_wglBindDisplayColorTableEXT_t = function(p1: GLushort): GLboolean; cdecl;

  { _ALLEGRO_wglDestroyDisplayColorTableEXT_t  }
  _ALLEGRO_wglDestroyDisplayColorTableEXT_t = procedure(p1: GLushort); cdecl;

  { _ALLEGRO_wglGetExtensionsStringEXT_t  }
  _ALLEGRO_wglGetExtensionsStringEXT_t = function(): PUTF8Char; cdecl;

  { _ALLEGRO_wglMakeContextCurrentEXT_t  }
  _ALLEGRO_wglMakeContextCurrentEXT_t = function(p1: HDC; p2: HDC; p3: HGLRC): BOOL; cdecl;

  { _ALLEGRO_wglGetCurrentReadDCEXT_t  }
  _ALLEGRO_wglGetCurrentReadDCEXT_t = function(): HDC; cdecl;

  { _ALLEGRO_wglCreatePbufferEXT_t  }
  _ALLEGRO_wglCreatePbufferEXT_t = function(p1: HDC; p2: Integer; p3: Integer; p4: Integer; const p5: PInteger): HPBUFFEREXT; cdecl;

  { _ALLEGRO_wglGetPbufferDCEXT_t  }
  _ALLEGRO_wglGetPbufferDCEXT_t = function(p1: HPBUFFEREXT): HDC; cdecl;

  { _ALLEGRO_wglReleasePbufferDCEXT_t  }
  _ALLEGRO_wglReleasePbufferDCEXT_t = function(p1: HPBUFFEREXT; p2: HDC): Integer; cdecl;

  { _ALLEGRO_wglDestroyPbufferEXT_t  }
  _ALLEGRO_wglDestroyPbufferEXT_t = function(p1: HPBUFFEREXT): BOOL; cdecl;

  { _ALLEGRO_wglQueryPbufferEXT_t  }
  _ALLEGRO_wglQueryPbufferEXT_t = function(p1: HPBUFFEREXT; p2: Integer; p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetPixelFormatAttribivEXT_t  }
  _ALLEGRO_wglGetPixelFormatAttribivEXT_t = function(p1: HDC; p2: Integer; p3: Integer; p4: UINT; p5: PInteger; p6: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetPixelFormatAttribfvEXT_t  }
  _ALLEGRO_wglGetPixelFormatAttribfvEXT_t = function(p1: HDC; p2: Integer; p3: Integer; p4: UINT; p5: PInteger; p6: PFLOAT): BOOL; cdecl;

  { _ALLEGRO_wglChoosePixelFormatEXT_t  }
  _ALLEGRO_wglChoosePixelFormatEXT_t = function(p1: HDC; const p2: PInteger; const p3: PFLOAT; p4: UINT; p5: PInteger; p6: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglSwapIntervalEXT_t  }
  _ALLEGRO_wglSwapIntervalEXT_t = function(p1: Integer): BOOL; cdecl;

  { _ALLEGRO_wglGetSwapIntervalEXT_t  }
  _ALLEGRO_wglGetSwapIntervalEXT_t = function(): Integer; cdecl;

  { _ALLEGRO_wglAllocateMemoryNV_t  }
  _ALLEGRO_wglAllocateMemoryNV_t = function(p1: GLsizei; p2: GLfloat; p3: GLfloat; p4: GLfloat): Pointer; cdecl;

  { _ALLEGRO_wglFreeMemoryNV_t  }
  _ALLEGRO_wglFreeMemoryNV_t = procedure(p1: Pointer); cdecl;

  { _ALLEGRO_wglGetSyncValuesOML_t  }
  _ALLEGRO_wglGetSyncValuesOML_t = function(p1: HDC; p2: PINT64; p3: PINT64; p4: PINT64): BOOL; cdecl;

  { _ALLEGRO_wglGetMscRateOML_t  }
  _ALLEGRO_wglGetMscRateOML_t = function(p1: HDC; p2: PINT32; p3: PINT32): BOOL; cdecl;

  { _ALLEGRO_wglSwapBuffersMscOML_t  }
  _ALLEGRO_wglSwapBuffersMscOML_t = function(p1: HDC; p2: INT64; p3: INT64; p4: INT64): INT64; cdecl;

  { _ALLEGRO_wglSwapLayerBuffersMscOML_t  }
  _ALLEGRO_wglSwapLayerBuffersMscOML_t = function(p1: HDC; p2: Integer; p3: INT64; p4: INT64; p5: INT64): INT64; cdecl;

  { _ALLEGRO_wglWaitForMscOML_t  }
  _ALLEGRO_wglWaitForMscOML_t = function(p1: HDC; p2: INT64; p3: INT64; p4: INT64; p5: PINT64; p6: PINT64; p7: PINT64): BOOL; cdecl;

  { _ALLEGRO_wglWaitForSbcOML_t  }
  _ALLEGRO_wglWaitForSbcOML_t = function(p1: HDC; p2: INT64; p3: PINT64; p4: PINT64; p5: PINT64): BOOL; cdecl;

  { _ALLEGRO_wglGetDigitalVideoParametersI3D_t  }
  _ALLEGRO_wglGetDigitalVideoParametersI3D_t = function(p1: HDC; p2: Integer; p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglSetDigitalVideoParametersI3D_t  }
  _ALLEGRO_wglSetDigitalVideoParametersI3D_t = function(p1: HDC; p2: Integer; const p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetGammaTableParametersI3D_t  }
  _ALLEGRO_wglGetGammaTableParametersI3D_t = function(p1: HDC; p2: Integer; p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglSetGammaTableParametersI3D_t  }
  _ALLEGRO_wglSetGammaTableParametersI3D_t = function(p1: HDC; p2: Integer; const p3: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetGammaTableI3D_t  }
  _ALLEGRO_wglGetGammaTableI3D_t = function(p1: HDC; p2: Integer; p3: PUSHORT; p4: PUSHORT; p5: PUSHORT): BOOL; cdecl;

  { _ALLEGRO_wglSetGammaTableI3D_t  }
  _ALLEGRO_wglSetGammaTableI3D_t = function(p1: HDC; p2: Integer; const p3: PUSHORT; const p4: PUSHORT; const p5: PUSHORT): BOOL; cdecl;

  { _ALLEGRO_wglEnableGenlockI3D_t  }
  _ALLEGRO_wglEnableGenlockI3D_t = function(p1: HDC): BOOL; cdecl;

  { _ALLEGRO_wglDisableGenlockI3D_t  }
  _ALLEGRO_wglDisableGenlockI3D_t = function(p1: HDC): BOOL; cdecl;

  { _ALLEGRO_wglIsEnabledGenlockI3D_t  }
  _ALLEGRO_wglIsEnabledGenlockI3D_t = function(p1: HDC; p2: PBOOL): BOOL; cdecl;

  { _ALLEGRO_wglGenlockSourceI3D_t  }
  _ALLEGRO_wglGenlockSourceI3D_t = function(p1: HDC; p2: UINT): BOOL; cdecl;

  { _ALLEGRO_wglGetGenlockSourceI3D_t  }
  _ALLEGRO_wglGetGenlockSourceI3D_t = function(p1: HDC; p2: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglGenlockSourceEdgeI3D_t  }
  _ALLEGRO_wglGenlockSourceEdgeI3D_t = function(p1: HDC; p2: UINT): BOOL; cdecl;

  { _ALLEGRO_wglGetGenlockSourceEdgeI3D_t  }
  _ALLEGRO_wglGetGenlockSourceEdgeI3D_t = function(p1: HDC; p2: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglGenlockSampleRateI3D_t  }
  _ALLEGRO_wglGenlockSampleRateI3D_t = function(p1: HDC; p2: UINT): BOOL; cdecl;

  { _ALLEGRO_wglGetGenlockSampleRateI3D_t  }
  _ALLEGRO_wglGetGenlockSampleRateI3D_t = function(p1: HDC; p2: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglGenlockSourceDelayI3D_t  }
  _ALLEGRO_wglGenlockSourceDelayI3D_t = function(p1: HDC; p2: UINT): BOOL; cdecl;

  { _ALLEGRO_wglGetGenlockSourceDelayI3D_t  }
  _ALLEGRO_wglGetGenlockSourceDelayI3D_t = function(p1: HDC; p2: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglQueryGenlockMaxSourceDelayI3D_t  }
  _ALLEGRO_wglQueryGenlockMaxSourceDelayI3D_t = function(p1: HDC; p2: PUINT; p3: PUINT): BOOL; cdecl;

  { _ALLEGRO_wglCreateImageBufferI3D_t  }
  _ALLEGRO_wglCreateImageBufferI3D_t = function(p1: HDC; p2: DWORD; p3: UINT): LPVOID; cdecl;

  { _ALLEGRO_wglDestroyImageBufferI3D_t  }
  _ALLEGRO_wglDestroyImageBufferI3D_t = function(p1: HDC; p2: LPVOID): BOOL; cdecl;

  { _ALLEGRO_wglAssociateImageBufferEventsI3D_t  }
  _ALLEGRO_wglAssociateImageBufferEventsI3D_t = function(p1: HDC; const p2: PTHandle; const p3: PLPVOID; const p4: PDWORD; p5: UINT): BOOL; cdecl;

  { _ALLEGRO_wglReleaseImageBufferEventsI3D_t  }
  _ALLEGRO_wglReleaseImageBufferEventsI3D_t = function(p1: HDC; const p2: PLPVOID; p3: UINT): BOOL; cdecl;

  { _ALLEGRO_wglEnableFrameLockI3D_t  }
  _ALLEGRO_wglEnableFrameLockI3D_t = function(): BOOL; cdecl;

  { _ALLEGRO_wglDisableFrameLockI3D_t  }
  _ALLEGRO_wglDisableFrameLockI3D_t = function(): BOOL; cdecl;

  { _ALLEGRO_wglIsEnabledFrameLockI3D_t  }
  _ALLEGRO_wglIsEnabledFrameLockI3D_t = function(p1: PBOOL): BOOL; cdecl;

  { _ALLEGRO_wglQueryFrameLockMasterI3D_t  }
  _ALLEGRO_wglQueryFrameLockMasterI3D_t = function(p1: PBOOL): BOOL; cdecl;

  { _ALLEGRO_wglGetFrameUsageI3D_t  }
  _ALLEGRO_wglGetFrameUsageI3D_t = function(p1: PSingle): BOOL; cdecl;

  { _ALLEGRO_wglBeginFrameTrackingI3D_t  }
  _ALLEGRO_wglBeginFrameTrackingI3D_t = function(): BOOL; cdecl;

  { _ALLEGRO_wglEndFrameTrackingI3D_t  }
  _ALLEGRO_wglEndFrameTrackingI3D_t = function(): BOOL; cdecl;

  { _ALLEGRO_wglQueryFrameTrackingI3D_t  }
  _ALLEGRO_wglQueryFrameTrackingI3D_t = function(p1: PDWORD; p2: PDWORD; p3: PSingle): BOOL; cdecl;

  { _ALLEGRO_wglAddSwapHintRectWIN_t  }
  _ALLEGRO_wglAddSwapHintRectWIN_t = procedure(p1: Integer; p2: Integer; p3: Integer; p4: Integer); cdecl;

  { _ALLEGRO_wglEnumerateVideoDevicesNV_t  }
  _ALLEGRO_wglEnumerateVideoDevicesNV_t = function(p1: HDC; p2: PHVIDEOOUTPUTDEVICENV): Integer; cdecl;

  { _ALLEGRO_wglBindVideoDeviceNV_t  }
  _ALLEGRO_wglBindVideoDeviceNV_t = function(p1: HDC; p2: Cardinal; p3: HVIDEOOUTPUTDEVICENV; const p4: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglQueryCurrentContextNV_t  }
  _ALLEGRO_wglQueryCurrentContextNV_t = function(p1: Integer; p2: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglGetVideoDeviceNV_t  }
  _ALLEGRO_wglGetVideoDeviceNV_t = function(p1: HDC; p2: Integer; p3: PHPVIDEODEV): BOOL; cdecl;

  { _ALLEGRO_wglReleaseVideoDeviceNV_t  }
  _ALLEGRO_wglReleaseVideoDeviceNV_t = function(p1: HPVIDEODEV): BOOL; cdecl;

  { _ALLEGRO_wglBindVideoImageNV_t  }
  _ALLEGRO_wglBindVideoImageNV_t = function(p1: HPVIDEODEV; p2: HPBUFFERARB; p3: Integer): BOOL; cdecl;

  { _ALLEGRO_wglReleaseVideoImageNV_t  }
  _ALLEGRO_wglReleaseVideoImageNV_t = function(p1: HPBUFFERARB; p2: Integer): BOOL; cdecl;

  { _ALLEGRO_wglSendPbufferToVideoNV_t  }
  _ALLEGRO_wglSendPbufferToVideoNV_t = function(p1: HPBUFFERARB; p2: Integer; p3: PCardinal; p4: BOOL): BOOL; cdecl;

  { _ALLEGRO_wglGetVideoInfoNV_t  }
  _ALLEGRO_wglGetVideoInfoNV_t = function(p1: HPVIDEODEV; p2: PCardinal; p3: PCardinal): BOOL; cdecl;

  { _ALLEGRO_wglJoinSwapGroupNV_t  }
  _ALLEGRO_wglJoinSwapGroupNV_t = function(hDC: HDC; group: GLuint): BOOL; cdecl;

  { _ALLEGRO_wglBindSwapBarrierNV_t  }
  _ALLEGRO_wglBindSwapBarrierNV_t = function(group: GLuint; barrier: GLuint): BOOL; cdecl;

  { _ALLEGRO_wglQuerySwapGroupNV_t  }
  _ALLEGRO_wglQuerySwapGroupNV_t = function(hDC: HDC; group: PGLuint; barrier: PGLuint): BOOL; cdecl;

  { _ALLEGRO_wglQueryMaxSwapGroupsNV_t  }
  _ALLEGRO_wglQueryMaxSwapGroupsNV_t = function(hDC: HDC; maxGroups: PGLuint; maxBarriers: PGLuint): BOOL; cdecl;

  { _ALLEGRO_wglQueryFrameCountNV_t  }
  _ALLEGRO_wglQueryFrameCountNV_t = function(hDC: HDC; count: PGLuint): BOOL; cdecl;

  { _ALLEGRO_wglResetFrameCountNV_t  }
  _ALLEGRO_wglResetFrameCountNV_t = function(hDC: HDC): BOOL; cdecl;

  { _ALLEGRO_wglEnumGpusNV_t  }
  _ALLEGRO_wglEnumGpusNV_t = function(p1: UINT; p2: PHGPUNV): BOOL; cdecl;

  { _ALLEGRO_wglEnumGpuDevicesNV_t  }
  _ALLEGRO_wglEnumGpuDevicesNV_t = function(p1: HGPUNV; p2: UINT; p3: PGPU_DEVICE): BOOL; cdecl;

  { _ALLEGRO_wglCreateAffinityDCNV_t  }
  _ALLEGRO_wglCreateAffinityDCNV_t = function(const p1: PHGPUNV): HDC; cdecl;

  { _ALLEGRO_wglEnumGpusFromAffinityDCNV_t  }
  _ALLEGRO_wglEnumGpusFromAffinityDCNV_t = function(p1: HDC; p2: UINT; p3: PHGPUNV): BOOL; cdecl;

  { _ALLEGRO_wglDeleteDCNV_t  }
  _ALLEGRO_wglDeleteDCNV_t = function(p1: HDC): BOOL; cdecl;

  { _ALLEGRO_wglGetGPUIDsAMD_t  }
  _ALLEGRO_wglGetGPUIDsAMD_t = function(p1: UINT; p2: PUINT): UINT; cdecl;

  { _ALLEGRO_wglGetGPUInfoAMD_t  }
  _ALLEGRO_wglGetGPUInfoAMD_t = function(p1: UINT; p2: Integer; p3: GLenum; p4: UINT; p5: Pointer): INT; cdecl;

  { _ALLEGRO_wglGetContextGPUIDAMD_t  }
  _ALLEGRO_wglGetContextGPUIDAMD_t = function(p1: HGLRC): UINT; cdecl;

  { _ALLEGRO_wglCreateAssociatedContextAMD_t  }
  _ALLEGRO_wglCreateAssociatedContextAMD_t = function(p1: UINT): HGLRC; cdecl;

  { _ALLEGRO_wglCreateAssociatedContextAttribsAMD_t  }
  _ALLEGRO_wglCreateAssociatedContextAttribsAMD_t = function(p1: UINT; p2: HGLRC; const p3: PInteger): HGLRC; cdecl;

  { _ALLEGRO_wglDeleteAssociatedContextAMD_t  }
  _ALLEGRO_wglDeleteAssociatedContextAMD_t = function(p1: HGLRC): BOOL; cdecl;

  { _ALLEGRO_wglMakeAssociatedContextCurrentAMD_t  }
  _ALLEGRO_wglMakeAssociatedContextCurrentAMD_t = function(p1: HGLRC): BOOL; cdecl;

  { _ALLEGRO_wglGetCurrentAssociatedContextAMD_t  }
  _ALLEGRO_wglGetCurrentAssociatedContextAMD_t = function(): HGLRC; cdecl;

  { _ALLEGRO_wglBlitContextFramebufferAMD_t  }
  _ALLEGRO_wglBlitContextFramebufferAMD_t = procedure(p1: HGLRC; p2: GLint; p3: GLint; p4: GLint; p5: GLint; p6: GLint; p7: GLint; p8: GLint; p9: GLint; p10: GLbitfield; p11: GLenum); cdecl;

  { _ALLEGRO_wglBindVideoCaptureDeviceNV_t  }
  _ALLEGRO_wglBindVideoCaptureDeviceNV_t = function(uVideoSlot: UINT; hDevice: HVIDEOINPUTDEVICENV): BOOL; cdecl;

  { _ALLEGRO_wglEnumerateVideoCaptureDevicesNV_t  }
  _ALLEGRO_wglEnumerateVideoCaptureDevicesNV_t = function(hDc: HDC; phDeviceList: PHVIDEOINPUTDEVICENV): UINT; cdecl;

  { _ALLEGRO_wglLockVideoCaptureDeviceNV_t  }
  _ALLEGRO_wglLockVideoCaptureDeviceNV_t = function(hDc: HDC; hDevice: HVIDEOINPUTDEVICENV): BOOL; cdecl;

  { _ALLEGRO_wglQueryVideoCaptureDeviceNV_t  }
  _ALLEGRO_wglQueryVideoCaptureDeviceNV_t = function(hDc: HDC; hDevice: HVIDEOINPUTDEVICENV; iAttribute: Integer; piValue: PInteger): BOOL; cdecl;

  { _ALLEGRO_wglReleaseVideoCaptureDeviceNV_t  }
  _ALLEGRO_wglReleaseVideoCaptureDeviceNV_t = function(hDc: HDC; hDevice: HVIDEOINPUTDEVICENV): BOOL; cdecl;

  { _ALLEGRO_wglCopyImageSubDataNV_t  }
  _ALLEGRO_wglCopyImageSubDataNV_t = function(hSrcRC: HGLRC; srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; hDstRC: HGLRC; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; width: GLsizei; height: GLsizei; depth: GLsizei): BOOL; cdecl;

  { ALLEGRO_OGL_EXT_LIST  }
  ALLEGRO_OGL_EXT_LIST = record
    ALLEGRO_GL_ARB_imaging: Integer;
    ALLEGRO_GL_ARB_multitexture: Integer;
    ALLEGRO_GL_ARB_transpose_matrix: Integer;
    ALLEGRO_GL_ARB_multisample: Integer;
    ALLEGRO_GL_ARB_texture_env_add: Integer;
    ALLEGRO_GL_ARB_texture_cube_map: Integer;
    ALLEGRO_GL_ARB_texture_compression: Integer;
    ALLEGRO_GL_ARB_texture_border_clamp: Integer;
    ALLEGRO_GL_ARB_point_parameters: Integer;
    ALLEGRO_GL_ARB_vertex_blend: Integer;
    ALLEGRO_GL_ARB_texture_env_combine: Integer;
    ALLEGRO_GL_ARB_texture_env_crossbar: Integer;
    ALLEGRO_GL_ARB_texture_env_dot3: Integer;
    ALLEGRO_GL_ARB_texture_mirrored_repeat: Integer;
    ALLEGRO_GL_ARB_depth_texture: Integer;
    ALLEGRO_GL_ARB_shadow: Integer;
    ALLEGRO_GL_ARB_shadow_ambient: Integer;
    ALLEGRO_GL_ARB_window_pos: Integer;
    ALLEGRO_GL_ARB_vertex_program: Integer;
    ALLEGRO_GL_ARB_fragment_program: Integer;
    ALLEGRO_GL_ARB_vertex_buffer_object: Integer;
    ALLEGRO_GL_ARB_occlusion_query: Integer;
    ALLEGRO_GL_ARB_shader_objects: Integer;
    ALLEGRO_GL_ARB_vertex_shader: Integer;
    ALLEGRO_GL_ARB_fragment_shader: Integer;
    ALLEGRO_GL_ARB_shading_language_100: Integer;
    ALLEGRO_GL_ARB_texture_non_power_of_two: Integer;
    ALLEGRO_GL_ARB_point_sprite: Integer;
    ALLEGRO_GL_ARB_fragment_program_shadow: Integer;
    ALLEGRO_GL_ARB_draw_buffers: Integer;
    ALLEGRO_GL_ARB_texture_rectangle: Integer;
    ALLEGRO_GL_ARB_color_buffer_float: Integer;
    ALLEGRO_GL_ARB_half_float_pixel: Integer;
    ALLEGRO_GL_ARB_texture_float: Integer;
    ALLEGRO_GL_ARB_pixel_buffer_object: Integer;
    ALLEGRO_GL_ARB_instanced_arrays: Integer;
    ALLEGRO_GL_ARB_draw_instanced: Integer;
    ALLEGRO_GL_ARB_geometry_shader4: Integer;
    ALLEGRO_GL_ARB_texture_buffer_object: Integer;
    ALLEGRO_GL_ARB_depth_buffer_float: Integer;
    ALLEGRO_GL_ARB_framebuffer_object: Integer;
    ALLEGRO_GL_ARB_framebuffer_sRGB: Integer;
    ALLEGRO_GL_ARB_half_float_vertex: Integer;
    ALLEGRO_GL_ARB_map_buffer_range: Integer;
    ALLEGRO_GL_ARB_texture_compression_rgtc: Integer;
    ALLEGRO_GL_ARB_texture_rg: Integer;
    ALLEGRO_GL_ARB_vertex_array_object: Integer;
    ALLEGRO_GL_ARB_copy_buffer: Integer;
    ALLEGRO_GL_ARB_compatibility: Integer;
    ALLEGRO_GL_ARB_uniform_buffer_object: Integer;
    ALLEGRO_GL_ARB_shader_texture_lod: Integer;
    ALLEGRO_GL_ARB_depth_clamp: Integer;
    ALLEGRO_GL_ARB_draw_elements_base_vertex: Integer;
    ALLEGRO_GL_ARB_fragment_coord_conventions: Integer;
    ALLEGRO_GL_ARB_provoking_vertex: Integer;
    ALLEGRO_GL_ARB_seamless_cube_map: Integer;
    ALLEGRO_GL_ARB_sync: Integer;
    ALLEGRO_GL_ARB_texture_multisample: Integer;
    ALLEGRO_GL_ARB_vertex_array_bgra: Integer;
    ALLEGRO_GL_ARB_draw_buffers_blend: Integer;
    ALLEGRO_GL_ARB_sample_shading: Integer;
    ALLEGRO_GL_ARB_texture_cube_map_array: Integer;
    ALLEGRO_GL_ARB_texture_gather: Integer;
    ALLEGRO_GL_ARB_texture_query_lod: Integer;
    ALLEGRO_GL_ARB_shading_language_include: Integer;
    ALLEGRO_GL_ARB_texture_compression_bptc: Integer;
    ALLEGRO_GL_ARB_blend_func_extended: Integer;
    ALLEGRO_GL_ARB_explicit_attrib_location: Integer;
    ALLEGRO_GL_ARB_occlusion_query2: Integer;
    ALLEGRO_GL_ARB_sampler_objects: Integer;
    ALLEGRO_GL_ARB_shader_bit_encoding: Integer;
    ALLEGRO_GL_ARB_texture_rgb10_a2ui: Integer;
    ALLEGRO_GL_ARB_texture_swizzle: Integer;
    ALLEGRO_GL_ARB_timer_query: Integer;
    ALLEGRO_GL_ARB_vertex_type_2_10_10_10_rev: Integer;
    ALLEGRO_GL_ARB_draw_indirect: Integer;
    ALLEGRO_GL_ARB_gpu_shader5: Integer;
    ALLEGRO_GL_ARB_gpu_shader_fp64: Integer;
    ALLEGRO_GL_ARB_shader_subroutine: Integer;
    ALLEGRO_GL_ARB_tessellation_shader: Integer;
    ALLEGRO_GL_ARB_texture_buffer_object_rgb32: Integer;
    ALLEGRO_GL_ARB_transform_feedback2: Integer;
    ALLEGRO_GL_ARB_transform_feedback3: Integer;
    ALLEGRO_GL_EXT_abgr: Integer;
    ALLEGRO_GL_EXT_blend_color: Integer;
    ALLEGRO_GL_EXT_polygon_offset: Integer;
    ALLEGRO_GL_EXT_texture: Integer;
    ALLEGRO_GL_EXT_texture3D: Integer;
    ALLEGRO_GL_SGIS_texture_filter4: Integer;
    ALLEGRO_GL_EXT_subtexture: Integer;
    ALLEGRO_GL_EXT_copy_texture: Integer;
    ALLEGRO_GL_EXT_histogram: Integer;
    ALLEGRO_GL_EXT_convolution: Integer;
    ALLEGRO_GL_SGI_color_matrix: Integer;
    ALLEGRO_GL_SGI_color_table: Integer;
    ALLEGRO_GL_SGIS_pixel_texture: Integer;
    ALLEGRO_GL_SGIX_pixel_texture: Integer;
    ALLEGRO_GL_SGIS_texture4D: Integer;
    ALLEGRO_GL_SGI_texture_color_table: Integer;
    ALLEGRO_GL_EXT_cmyka: Integer;
    ALLEGRO_GL_EXT_texture_object: Integer;
    ALLEGRO_GL_SGIS_detail_texture: Integer;
    ALLEGRO_GL_SGIS_sharpen_texture: Integer;
    ALLEGRO_GL_EXT_packed_pixels: Integer;
    ALLEGRO_GL_SGIS_texture_lod: Integer;
    ALLEGRO_GL_SGIS_multisample: Integer;
    ALLEGRO_GL_EXT_rescale_normal: Integer;
    ALLEGRO_GL_EXT_vertex_array: Integer;
    ALLEGRO_GL_EXT_misc_attribute: Integer;
    ALLEGRO_GL_SGIS_generate_mipmap: Integer;
    ALLEGRO_GL_SGIX_clipmap: Integer;
    ALLEGRO_GL_SGIX_shadow: Integer;
    ALLEGRO_GL_SGIS_texture_edge_clamp: Integer;
    ALLEGRO_GL_SGIS_texture_border_clamp: Integer;
    ALLEGRO_GL_EXT_blend_minmax: Integer;
    ALLEGRO_GL_EXT_blend_subtract: Integer;
    ALLEGRO_GL_EXT_blend_logic_op: Integer;
    ALLEGRO_GL_SGIX_interlace: Integer;
    ALLEGRO_GL_SGIS_texture_select: Integer;
    ALLEGRO_GL_SGIX_sprite: Integer;
    ALLEGRO_GL_SGIX_texture_multi_buffer: Integer;
    ALLEGRO_GL_EXT_point_parameters: Integer;
    ALLEGRO_GL_SGIX_instruments: Integer;
    ALLEGRO_GL_SGIX_texture_scale_bias: Integer;
    ALLEGRO_GL_SGIX_framezoom: Integer;
    ALLEGRO_GL_SGIX_tag_sample_buffer: Integer;
    ALLEGRO_GL_SGIX_reference_plane: Integer;
    ALLEGRO_GL_SGIX_flush_raster: Integer;
    ALLEGRO_GL_SGIX_depth_texture: Integer;
    ALLEGRO_GL_SGIS_fog_function: Integer;
    ALLEGRO_GL_SGIX_fog_offset: Integer;
    ALLEGRO_GL_HP_image_transform: Integer;
    ALLEGRO_GL_HP_convolution_border_modes: Integer;
    ALLEGRO_GL_SGIX_texture_add_env: Integer;
    ALLEGRO_GL_EXT_color_subtable: Integer;
    ALLEGRO_GL_PGI_vertex_hints: Integer;
    ALLEGRO_GL_PGI_misc_hints: Integer;
    ALLEGRO_GL_EXT_paletted_texture: Integer;
    ALLEGRO_GL_EXT_clip_volume_hint: Integer;
    ALLEGRO_GL_SGIX_list_priority: Integer;
    ALLEGRO_GL_SGIX_ir_instrument1: Integer;
    ALLEGRO_GL_SGIX_texture_lod_bias: Integer;
    ALLEGRO_GL_SGIX_shadow_ambient: Integer;
    ALLEGRO_GL_EXT_index_texture: Integer;
    ALLEGRO_GL_EXT_index_material: Integer;
    ALLEGRO_GL_EXT_index_func: Integer;
    ALLEGRO_GL_EXT_index_array_formats: Integer;
    ALLEGRO_GL_EXT_compiled_vertex_array: Integer;
    ALLEGRO_GL_EXT_cull_vertex: Integer;
    ALLEGRO_GL_SGIX_ycrcb: Integer;
    ALLEGRO_GL_EXT_fragment_lighting: Integer;
    ALLEGRO_GL_IBM_rasterpos_clip: Integer;
    ALLEGRO_GL_HP_texture_lighting: Integer;
    ALLEGRO_GL_EXT_draw_range_elements: Integer;
    ALLEGRO_GL_WIN_phong_shading: Integer;
    ALLEGRO_GL_WIN_specular_fog: Integer;
    ALLEGRO_GL_EXT_light_texture: Integer;
    ALLEGRO_GL_SGIX_blend_alpha_minmax: Integer;
    ALLEGRO_GL_EXT_scene_marker: Integer;
    ALLEGRO_GL_SGIX_pixel_texture_bits: Integer;
    ALLEGRO_GL_EXT_bgra: Integer;
    ALLEGRO_GL_SGIX_async: Integer;
    ALLEGRO_GL_SGIX_async_pixel: Integer;
    ALLEGRO_GL_SGIX_async_histogram: Integer;
    ALLEGRO_GL_INTEL_texture_scissor: Integer;
    ALLEGRO_GL_INTEL_parallel_arrays: Integer;
    ALLEGRO_GL_HP_occlusion_test: Integer;
    ALLEGRO_GL_EXT_pixel_transform: Integer;
    ALLEGRO_GL_EXT_pixel_transform_color_table: Integer;
    ALLEGRO_GL_EXT_shared_texture_palette: Integer;
    ALLEGRO_GL_EXT_separate_specular_color: Integer;
    ALLEGRO_GL_EXT_secondary_color: Integer;
    ALLEGRO_GL_EXT_texture_env: Integer;
    ALLEGRO_GL_EXT_texture_perturb_normal: Integer;
    ALLEGRO_GL_EXT_multi_draw_arrays: Integer;
    ALLEGRO_GL_EXT_fog_coord: Integer;
    ALLEGRO_GL_REND_screen_coordinates: Integer;
    ALLEGRO_GL_EXT_coordinate_frame: Integer;
    ALLEGRO_GL_EXT_texture_env_combine: Integer;
    ALLEGRO_GL_APPLE_specular_vector: Integer;
    ALLEGRO_GL_APPLE_transform_hint: Integer;
    ALLEGRO_GL_SUNX_constant_data: Integer;
    ALLEGRO_GL_SUN_global_alpha: Integer;
    ALLEGRO_GL_SUN_triangle_list: Integer;
    ALLEGRO_GL_SUN_vertex: Integer;
    ALLEGRO_GL_EXT_blend_func_separate: Integer;
    ALLEGRO_GL_INGR_color_clamp: Integer;
    ALLEGRO_GL_INGR_interlace_read: Integer;
    ALLEGRO_GL_EXT_stencil_wrap: Integer;
    ALLEGRO_GL_EXT_422_pixels: Integer;
    ALLEGRO_GL_NV_texgen_reflection: Integer;
    ALLEGRO_GL_SGIX_texture_range: Integer;
    ALLEGRO_GL_SUN_convolution_border_modes: Integer;
    ALLEGRO_GL_EXT_texture_env_add: Integer;
    ALLEGRO_GL_EXT_texture_lod_bias: Integer;
    ALLEGRO_GL_EXT_texture_filter_anisotropic: Integer;
    ALLEGRO_GL_EXT_vertex_weighting: Integer;
    ALLEGRO_GL_NV_light_max_exponent: Integer;
    ALLEGRO_GL_NV_vertex_array_range: Integer;
    ALLEGRO_GL_NV_register_combiners: Integer;
    ALLEGRO_GL_NV_fog_distance: Integer;
    ALLEGRO_GL_NV_texgen_emboss: Integer;
    ALLEGRO_GL_NV_blend_square: Integer;
    ALLEGRO_GL_NV_texture_env_combine4: Integer;
    ALLEGRO_GL_MESA_resize_buffers: Integer;
    ALLEGRO_GL_MESA_window_pos: Integer;
    ALLEGRO_GL_EXT_texture_compression_s3tc: Integer;
    ALLEGRO_GL_IBM_cull_vertex: Integer;
    ALLEGRO_GL_IBM_multimode_draw_arrays: Integer;
    ALLEGRO_GL_IBM_vertex_array_lists: Integer;
    ALLEGRO_GL_3DFX_texture_compression_FXT1: Integer;
    ALLEGRO_GL_3DFX_multisample: Integer;
    ALLEGRO_GL_3DFX_tbuffer: Integer;
    ALLEGRO_GL_SGIX_vertex_preclip: Integer;
    ALLEGRO_GL_SGIX_resample: Integer;
    ALLEGRO_GL_SGIS_texture_color_mask: Integer;
    ALLEGRO_GL_EXT_texture_env_dot3: Integer;
    ALLEGRO_GL_ATI_texture_mirror_once: Integer;
    ALLEGRO_GL_NV_fence: Integer;
    ALLEGRO_GL_IBM_static_data: Integer;
    ALLEGRO_GL_IBM_texture_mirrored_repeat: Integer;
    ALLEGRO_GL_NV_evaluators: Integer;
    ALLEGRO_GL_NV_packed_depth_stencil: Integer;
    ALLEGRO_GL_NV_register_combiners2: Integer;
    ALLEGRO_GL_NV_texture_compression_vtc: Integer;
    ALLEGRO_GL_NV_texture_rectangle: Integer;
    ALLEGRO_GL_NV_texture_shader: Integer;
    ALLEGRO_GL_NV_texture_shader2: Integer;
    ALLEGRO_GL_NV_vertex_array_range2: Integer;
    ALLEGRO_GL_NV_vertex_program: Integer;
    ALLEGRO_GL_SGIX_texture_coordinate_clamp: Integer;
    ALLEGRO_GL_OML_interlace: Integer;
    ALLEGRO_GL_OML_subsample: Integer;
    ALLEGRO_GL_OML_resample: Integer;
    ALLEGRO_GL_NV_copy_depth_to_color: Integer;
    ALLEGRO_GL_ATI_envmap_bumpmap: Integer;
    ALLEGRO_GL_ATI_fragment_shader: Integer;
    ALLEGRO_GL_ATI_pn_triangles: Integer;
    ALLEGRO_GL_ATI_vertex_array_object: Integer;
    ALLEGRO_GL_EXT_vertex_shader: Integer;
    ALLEGRO_GL_ATI_vertex_streams: Integer;
    ALLEGRO_GL_ATI_element_array: Integer;
    ALLEGRO_GL_SUN_mesh_array: Integer;
    ALLEGRO_GL_SUN_slice_accum: Integer;
    ALLEGRO_GL_NV_multisample_filter_hint: Integer;
    ALLEGRO_GL_NV_depth_clamp: Integer;
    ALLEGRO_GL_NV_occlusion_query: Integer;
    ALLEGRO_GL_NV_point_sprite: Integer;
    ALLEGRO_GL_NV_texture_shader3: Integer;
    ALLEGRO_GL_NV_vertex_program1_1: Integer;
    ALLEGRO_GL_EXT_shadow_funcs: Integer;
    ALLEGRO_GL_EXT_stencil_two_side: Integer;
    ALLEGRO_GL_ATI_text_fragment_shader: Integer;
    ALLEGRO_GL_APPLE_client_storage: Integer;
    ALLEGRO_GL_APPLE_element_array: Integer;
    ALLEGRO_GL_APPLE_fence: Integer;
    ALLEGRO_GL_APPLE_vertex_array_object: Integer;
    ALLEGRO_GL_APPLE_vertex_array_range: Integer;
    ALLEGRO_GL_APPLE_ycbcr_422: Integer;
    ALLEGRO_GL_S3_s3tc: Integer;
    ALLEGRO_GL_ATI_draw_buffers: Integer;
    ALLEGRO_GL_ATI_texture_env_combine3: Integer;
    ALLEGRO_GL_ATI_texture_float: Integer;
    ALLEGRO_GL_NV_float_buffer: Integer;
    ALLEGRO_GL_NV_fragment_program: Integer;
    ALLEGRO_GL_NV_half_float: Integer;
    ALLEGRO_GL_NV_pixel_data_range: Integer;
    ALLEGRO_GL_NV_primitive_restart: Integer;
    ALLEGRO_GL_NV_texture_expand_normal: Integer;
    ALLEGRO_GL_NV_vertex_program2: Integer;
    ALLEGRO_GL_ATI_map_object_buffer: Integer;
    ALLEGRO_GL_ATI_separate_stencil: Integer;
    ALLEGRO_GL_ATI_vertex_attrib_array_object: Integer;
    ALLEGRO_GL_OES_byte_coordinates: Integer;
    ALLEGRO_GL_OES_fixed_point: Integer;
    ALLEGRO_GL_OES_single_precision: Integer;
    ALLEGRO_GL_OES_compressed_paletted_texture: Integer;
    ALLEGRO_GL_OES_read_format: Integer;
    ALLEGRO_GL_OES_query_matrix: Integer;
    ALLEGRO_GL_OES_framebuffer_object: Integer;
    ALLEGRO_GL_OES_texture_npot: Integer;
    ALLEGRO_GL_EXT_depth_bounds_test: Integer;
    ALLEGRO_GL_EXT_texture_mirror_clamp: Integer;
    ALLEGRO_GL_EXT_blend_equation_separate: Integer;
    ALLEGRO_GL_MESA_pack_invert: Integer;
    ALLEGRO_GL_MESA_ycbcr_texture: Integer;
    ALLEGRO_GL_EXT_pixel_buffer_object: Integer;
    ALLEGRO_GL_NV_fragment_program_option: Integer;
    ALLEGRO_GL_NV_fragment_program2: Integer;
    ALLEGRO_GL_NV_vertex_program2_option: Integer;
    ALLEGRO_GL_NV_vertex_program3: Integer;
    ALLEGRO_GL_EXT_texture_compression_dxt1: Integer;
    ALLEGRO_GL_EXT_framebuffer_object: Integer;
    ALLEGRO_GL_GREMEDY_string_marker: Integer;
    ALLEGRO_GL_EXT_packed_depth_stencil: Integer;
    ALLEGRO_GL_EXT_stencil_clear_tag: Integer;
    ALLEGRO_GL_EXT_texture_sRGB: Integer;
    ALLEGRO_GL_EXT_framebuffer_blit: Integer;
    ALLEGRO_GL_EXT_framebuffer_multisample: Integer;
    ALLEGRO_GL_MESAX_texture_stack: Integer;
    ALLEGRO_GL_EXT_timer_query: Integer;
    ALLEGRO_GL_EXT_gpu_program_parameters: Integer;
    ALLEGRO_GL_APPLE_flush_buffer_range: Integer;
    ALLEGRO_GL_EXT_bindable_uniform: Integer;
    ALLEGRO_GL_EXT_draw_buffers2: Integer;
    ALLEGRO_GL_EXT_draw_instanced: Integer;
    ALLEGRO_GL_EXT_framebuffer_sRGB: Integer;
    ALLEGRO_GL_EXT_geometry_shader4: Integer;
    ALLEGRO_GL_EXT_gpu_shader4: Integer;
    ALLEGRO_GL_EXT_packed_float: Integer;
    ALLEGRO_GL_EXT_texture_array: Integer;
    ALLEGRO_GL_EXT_texture_buffer_object: Integer;
    ALLEGRO_GL_EXT_texture_compression_latc: Integer;
    ALLEGRO_GL_EXT_texture_compression_rgtc: Integer;
    ALLEGRO_GL_EXT_texture_integer: Integer;
    ALLEGRO_GL_EXT_texture_shared_exponent: Integer;
    ALLEGRO_GL_NV_depth_buffer_float: Integer;
    ALLEGRO_GL_NV_fragment_program4: Integer;
    ALLEGRO_GL_NV_framebuffer_multisample_coverage: Integer;
    ALLEGRO_GL_NV_geometry_program4: Integer;
    ALLEGRO_GL_NV_gpu_program4: Integer;
    ALLEGRO_GL_NV_parameter_buffer_object: Integer;
    ALLEGRO_GL_NV_transform_feedback: Integer;
    ALLEGRO_GL_NV_vertex_program4: Integer;
    ALLEGRO_GL_GREMEDY_frame_terminator: Integer;
    ALLEGRO_GL_NV_conditional_render: Integer;
    ALLEGRO_GL_NV_present_video: Integer;
    ALLEGRO_GL_EXT_direct_state_access: Integer;
    ALLEGRO_GL_EXT_transform_feedback: Integer;
    ALLEGRO_GL_EXT_texture_swizzle: Integer;
    ALLEGRO_GL_NV_explicit_multisample: Integer;
    ALLEGRO_GL_NV_transform_feedback2: Integer;
    ALLEGRO_GL_ATI_meminfo: Integer;
    ALLEGRO_GL_AMD_performance_monitor: Integer;
    ALLEGRO_GL_AMD_texture_texture4: Integer;
    ALLEGRO_GL_AMD_vertex_shader_tesselator: Integer;
    ALLEGRO_GL_EXT_provoking_vertex: Integer;
    ALLEGRO_GL_EXT_texture_snorm: Integer;
    ALLEGRO_GL_AMD_draw_buffers_blend: Integer;
    ALLEGRO_GL_APPLE_texture_range: Integer;
    ALLEGRO_GL_APPLE_float_pixels: Integer;
    ALLEGRO_GL_APPLE_vertex_program_evaluators: Integer;
    ALLEGRO_GL_APPLE_aux_depth_stencil: Integer;
    ALLEGRO_GL_APPLE_object_purgeable: Integer;
    ALLEGRO_GL_APPLE_row_bytes: Integer;
    ALLEGRO_GL_APPLE_rgb_422: Integer;
    ALLEGRO_GL_NV_video_capture: Integer;
    ALLEGRO_GL_EXT_separate_shader_objects: Integer;
    ALLEGRO_GL_NV_parameter_buffer_object2: Integer;
    ALLEGRO_GL_NV_shader_buffer_load: Integer;
    ALLEGRO_GL_NV_vertex_buffer_unified_memory: Integer;
    ALLEGRO_GL_NV_texture_barrier: Integer;
    ALLEGRO_GL_AMD_shader_stencil_export: Integer;
    ALLEGRO_GL_AMD_seamless_cubemap_per_texture: Integer;
    ALLEGRO_GL_AMD_conservative_depth: Integer;
    ALLEGRO_WGL_ARB_buffer_region: Integer;
    ALLEGRO_WGL_ARB_multisample: Integer;
    ALLEGRO_WGL_ARB_extensions_string: Integer;
    ALLEGRO_WGL_ARB_pixel_format: Integer;
    ALLEGRO_WGL_ARB_make_current_read: Integer;
    ALLEGRO_WGL_ARB_pbuffer: Integer;
    ALLEGRO_WGL_ARB_render_texture: Integer;
    ALLEGRO_WGL_ARB_pixel_format_float: Integer;
    ALLEGRO_WGL_EXT_display_color_table: Integer;
    ALLEGRO_WGL_EXT_extensions_string: Integer;
    ALLEGRO_WGL_EXT_make_current_read: Integer;
    ALLEGRO_WGL_EXT_pixel_format: Integer;
    ALLEGRO_WGL_EXT_pbuffer: Integer;
    ALLEGRO_WGL_EXT_swap_control: Integer;
    ALLEGRO_WGL_EXT_depth_float: Integer;
    ALLEGRO_WGL_EXT_multisample: Integer;
    ALLEGRO_WGL_OML_sync_control: Integer;
    ALLEGRO_WGL_I3D_digital_video_control: Integer;
    ALLEGRO_WGL_I3D_gamma: Integer;
    ALLEGRO_WGL_I3D_genlock: Integer;
    ALLEGRO_WGL_I3D_image_buffer: Integer;
    ALLEGRO_WGL_I3D_swap_frame_lock: Integer;
    ALLEGRO_WGL_I3D_swap_frame_usage: Integer;
    ALLEGRO_WGL_NV_render_depth_texture: Integer;
    ALLEGRO_WGL_NV_render_texture_rectangle: Integer;
    ALLEGRO_WGL_ATI_pixel_format_float: Integer;
    ALLEGRO_WGL_EXT_framebuffer_sRGB: Integer;
    ALLEGRO_WGL_EXT_pixel_format_packed_float: Integer;
    ALLEGRO_WGL_WIN_swap_hint: Integer;
    ALLEGRO_WGL_3DL_stereo_control: Integer;
    ALLEGRO_WGL_NV_swap_group: Integer;
    ALLEGRO_WGL_NV_gpu_affinity: Integer;
    ALLEGRO_WGL_NV_video_out: Integer;
    ALLEGRO_WGL_NV_present_video: Integer;
    ALLEGRO_WGL_ARB_create_context: Integer;
    ALLEGRO_WGL_AMD_gpu_association: Integer;
    ALLEGRO_WGL_NV_copy_image: Integer;
    ALLEGRO_WGL_NV_video_capture: Integer;
  end;

  { ALLEGRO_OGL_EXT_API  }
  ALLEGRO_OGL_EXT_API = record
    BlendColor: _ALLEGRO_glBlendColor_t;
    BlendEquation: _ALLEGRO_glBlendEquation_t;
    DrawRangeElements: _ALLEGRO_glDrawRangeElements_t;
    ColorTable: _ALLEGRO_glColorTable_t;
    ColorTableParameterfv: _ALLEGRO_glColorTableParameterfv_t;
    ColorTableParameteriv: _ALLEGRO_glColorTableParameteriv_t;
    CopyColorTable: _ALLEGRO_glCopyColorTable_t;
    GetColorTable: _ALLEGRO_glGetColorTable_t;
    GetColorTableParameterfv: _ALLEGRO_glGetColorTableParameterfv_t;
    GetColorTableParameteriv: _ALLEGRO_glGetColorTableParameteriv_t;
    ColorSubTable: _ALLEGRO_glColorSubTable_t;
    CopyColorSubTable: _ALLEGRO_glCopyColorSubTable_t;
    TexImage3D: _ALLEGRO_glTexImage3D_t;
    TexSubImage3D: _ALLEGRO_glTexSubImage3D_t;
    CopyTexSubImage3D: _ALLEGRO_glCopyTexSubImage3D_t;
    ConvolutionFilter1D: _ALLEGRO_glConvolutionFilter1D_t;
    ConvolutionFilter2D: _ALLEGRO_glConvolutionFilter2D_t;
    ConvolutionParameterf: _ALLEGRO_glConvolutionParameterf_t;
    ConvolutionParameterfv: _ALLEGRO_glConvolutionParameterfv_t;
    ConvolutionParameteri: _ALLEGRO_glConvolutionParameteri_t;
    ConvolutionParameteriv: _ALLEGRO_glConvolutionParameteriv_t;
    CopyConvolutionFilter1D: _ALLEGRO_glCopyConvolutionFilter1D_t;
    CopyConvolutionFilter2D: _ALLEGRO_glCopyConvolutionFilter2D_t;
    GetConvolutionFilter: _ALLEGRO_glGetConvolutionFilter_t;
    GetConvolutionParameterfv: _ALLEGRO_glGetConvolutionParameterfv_t;
    GetConvolutionParameteriv: _ALLEGRO_glGetConvolutionParameteriv_t;
    GetSeparableFilter: _ALLEGRO_glGetSeparableFilter_t;
    SeparableFilter2D: _ALLEGRO_glSeparableFilter2D_t;
    GetHistogram: _ALLEGRO_glGetHistogram_t;
    GetHistogramParameterfv: _ALLEGRO_glGetHistogramParameterfv_t;
    GetHistogramParameteriv: _ALLEGRO_glGetHistogramParameteriv_t;
    GetMinmax: _ALLEGRO_glGetMinmax_t;
    GetMinmaxParameterfv: _ALLEGRO_glGetMinmaxParameterfv_t;
    GetMinmaxParameteriv: _ALLEGRO_glGetMinmaxParameteriv_t;
    Histogram: _ALLEGRO_glHistogram_t;
    Minmax: _ALLEGRO_glMinmax_t;
    ResetHistogram: _ALLEGRO_glResetHistogram_t;
    ResetMinmax: _ALLEGRO_glResetMinmax_t;
    ActiveTexture: _ALLEGRO_glActiveTexture_t;
    ClientActiveTexture: _ALLEGRO_glClientActiveTexture_t;
    MultiTexCoord1d: _ALLEGRO_glMultiTexCoord1d_t;
    MultiTexCoord1dv: _ALLEGRO_glMultiTexCoord1dv_t;
    MultiTexCoord1f: _ALLEGRO_glMultiTexCoord1f_t;
    MultiTexCoord1fv: _ALLEGRO_glMultiTexCoord1fv_t;
    MultiTexCoord1i: _ALLEGRO_glMultiTexCoord1i_t;
    MultiTexCoord1iv: _ALLEGRO_glMultiTexCoord1iv_t;
    MultiTexCoord1s: _ALLEGRO_glMultiTexCoord1s_t;
    MultiTexCoord1sv: _ALLEGRO_glMultiTexCoord1sv_t;
    MultiTexCoord2d: _ALLEGRO_glMultiTexCoord2d_t;
    MultiTexCoord2dv: _ALLEGRO_glMultiTexCoord2dv_t;
    MultiTexCoord2f: _ALLEGRO_glMultiTexCoord2f_t;
    MultiTexCoord2fv: _ALLEGRO_glMultiTexCoord2fv_t;
    MultiTexCoord2i: _ALLEGRO_glMultiTexCoord2i_t;
    MultiTexCoord2iv: _ALLEGRO_glMultiTexCoord2iv_t;
    MultiTexCoord2s: _ALLEGRO_glMultiTexCoord2s_t;
    MultiTexCoord2sv: _ALLEGRO_glMultiTexCoord2sv_t;
    MultiTexCoord3d: _ALLEGRO_glMultiTexCoord3d_t;
    MultiTexCoord3dv: _ALLEGRO_glMultiTexCoord3dv_t;
    MultiTexCoord3f: _ALLEGRO_glMultiTexCoord3f_t;
    MultiTexCoord3fv: _ALLEGRO_glMultiTexCoord3fv_t;
    MultiTexCoord3i: _ALLEGRO_glMultiTexCoord3i_t;
    MultiTexCoord3iv: _ALLEGRO_glMultiTexCoord3iv_t;
    MultiTexCoord3s: _ALLEGRO_glMultiTexCoord3s_t;
    MultiTexCoord3sv: _ALLEGRO_glMultiTexCoord3sv_t;
    MultiTexCoord4d: _ALLEGRO_glMultiTexCoord4d_t;
    MultiTexCoord4dv: _ALLEGRO_glMultiTexCoord4dv_t;
    MultiTexCoord4f: _ALLEGRO_glMultiTexCoord4f_t;
    MultiTexCoord4fv: _ALLEGRO_glMultiTexCoord4fv_t;
    MultiTexCoord4i: _ALLEGRO_glMultiTexCoord4i_t;
    MultiTexCoord4iv: _ALLEGRO_glMultiTexCoord4iv_t;
    MultiTexCoord4s: _ALLEGRO_glMultiTexCoord4s_t;
    MultiTexCoord4sv: _ALLEGRO_glMultiTexCoord4sv_t;
    LoadTransposeMatrixf: _ALLEGRO_glLoadTransposeMatrixf_t;
    LoadTransposeMatrixd: _ALLEGRO_glLoadTransposeMatrixd_t;
    MultTransposeMatrixf: _ALLEGRO_glMultTransposeMatrixf_t;
    MultTransposeMatrixd: _ALLEGRO_glMultTransposeMatrixd_t;
    SampleCoverage: _ALLEGRO_glSampleCoverage_t;
    CompressedTexImage3D: _ALLEGRO_glCompressedTexImage3D_t;
    CompressedTexImage2D: _ALLEGRO_glCompressedTexImage2D_t;
    CompressedTexImage1D: _ALLEGRO_glCompressedTexImage1D_t;
    CompressedTexSubImage3D: _ALLEGRO_glCompressedTexSubImage3D_t;
    CompressedTexSubImage2D: _ALLEGRO_glCompressedTexSubImage2D_t;
    CompressedTexSubImage1D: _ALLEGRO_glCompressedTexSubImage1D_t;
    GetCompressedTexImage: _ALLEGRO_glGetCompressedTexImage_t;
    BlendFuncSeparate: _ALLEGRO_glBlendFuncSeparate_t;
    FogCoordf: _ALLEGRO_glFogCoordf_t;
    FogCoordfv: _ALLEGRO_glFogCoordfv_t;
    FogCoordd: _ALLEGRO_glFogCoordd_t;
    FogCoorddv: _ALLEGRO_glFogCoorddv_t;
    FogCoordPointer: _ALLEGRO_glFogCoordPointer_t;
    MultiDrawArrays: _ALLEGRO_glMultiDrawArrays_t;
    MultiDrawElements: _ALLEGRO_glMultiDrawElements_t;
    PointParameterf: _ALLEGRO_glPointParameterf_t;
    PointParameterfv: _ALLEGRO_glPointParameterfv_t;
    PointParameteri: _ALLEGRO_glPointParameteri_t;
    PointParameteriv: _ALLEGRO_glPointParameteriv_t;
    SecondaryColor3b: _ALLEGRO_glSecondaryColor3b_t;
    SecondaryColor3bv: _ALLEGRO_glSecondaryColor3bv_t;
    SecondaryColor3d: _ALLEGRO_glSecondaryColor3d_t;
    SecondaryColor3dv: _ALLEGRO_glSecondaryColor3dv_t;
    SecondaryColor3f: _ALLEGRO_glSecondaryColor3f_t;
    SecondaryColor3fv: _ALLEGRO_glSecondaryColor3fv_t;
    SecondaryColor3i: _ALLEGRO_glSecondaryColor3i_t;
    SecondaryColor3iv: _ALLEGRO_glSecondaryColor3iv_t;
    SecondaryColor3s: _ALLEGRO_glSecondaryColor3s_t;
    SecondaryColor3sv: _ALLEGRO_glSecondaryColor3sv_t;
    SecondaryColor3ub: _ALLEGRO_glSecondaryColor3ub_t;
    SecondaryColor3ubv: _ALLEGRO_glSecondaryColor3ubv_t;
    SecondaryColor3ui: _ALLEGRO_glSecondaryColor3ui_t;
    SecondaryColor3uiv: _ALLEGRO_glSecondaryColor3uiv_t;
    SecondaryColor3us: _ALLEGRO_glSecondaryColor3us_t;
    SecondaryColor3usv: _ALLEGRO_glSecondaryColor3usv_t;
    SecondaryColorPointer: _ALLEGRO_glSecondaryColorPointer_t;
    WindowPos2d: _ALLEGRO_glWindowPos2d_t;
    WindowPos2dv: _ALLEGRO_glWindowPos2dv_t;
    WindowPos2f: _ALLEGRO_glWindowPos2f_t;
    WindowPos2fv: _ALLEGRO_glWindowPos2fv_t;
    WindowPos2i: _ALLEGRO_glWindowPos2i_t;
    WindowPos2iv: _ALLEGRO_glWindowPos2iv_t;
    WindowPos2s: _ALLEGRO_glWindowPos2s_t;
    WindowPos2sv: _ALLEGRO_glWindowPos2sv_t;
    WindowPos3d: _ALLEGRO_glWindowPos3d_t;
    WindowPos3dv: _ALLEGRO_glWindowPos3dv_t;
    WindowPos3f: _ALLEGRO_glWindowPos3f_t;
    WindowPos3fv: _ALLEGRO_glWindowPos3fv_t;
    WindowPos3i: _ALLEGRO_glWindowPos3i_t;
    WindowPos3iv: _ALLEGRO_glWindowPos3iv_t;
    WindowPos3s: _ALLEGRO_glWindowPos3s_t;
    WindowPos3sv: _ALLEGRO_glWindowPos3sv_t;
    BindBuffer: _ALLEGRO_glBindBuffer_t;
    DeleteBuffers: _ALLEGRO_glDeleteBuffers_t;
    GenBuffers: _ALLEGRO_glGenBuffers_t;
    IsBuffer: _ALLEGRO_glIsBuffer_t;
    BufferData: _ALLEGRO_glBufferData_t;
    BufferSubData: _ALLEGRO_glBufferSubData_t;
    GetBufferSubData: _ALLEGRO_glGetBufferSubData_t;
    MapBuffer: _ALLEGRO_glMapBuffer_t;
    UnmapBuffer: _ALLEGRO_glUnmapBuffer_t;
    GetBufferParameteriv: _ALLEGRO_glGetBufferParameteriv_t;
    GetBufferPointerv: _ALLEGRO_glGetBufferPointerv_t;
    GenQueries: _ALLEGRO_glGenQueries_t;
    DeleteQueries: _ALLEGRO_glDeleteQueries_t;
    IsQuery: _ALLEGRO_glIsQuery_t;
    BeginQuery: _ALLEGRO_glBeginQuery_t;
    EndQuery: _ALLEGRO_glEndQuery_t;
    GetQueryiv: _ALLEGRO_glGetQueryiv_t;
    GetQueryObjectiv: _ALLEGRO_glGetQueryObjectiv_t;
    GetQueryObjectuiv: _ALLEGRO_glGetQueryObjectuiv_t;
    BlendEquationSeparate: _ALLEGRO_glBlendEquationSeparate_t;
    CreateProgram: _ALLEGRO_glCreateProgram_t;
    CreateShader: _ALLEGRO_glCreateShader_t;
    DeleteProgram: _ALLEGRO_glDeleteProgram_t;
    DeleteShader: _ALLEGRO_glDeleteShader_t;
    AttachShader: _ALLEGRO_glAttachShader_t;
    DetachShader: _ALLEGRO_glDetachShader_t;
    ShaderSource: _ALLEGRO_glShaderSource_t;
    CompileShader: _ALLEGRO_glCompileShader_t;
    IsProgram: _ALLEGRO_glIsProgram_t;
    IsShader: _ALLEGRO_glIsShader_t;
    LinkProgram: _ALLEGRO_glLinkProgram_t;
    UseProgram: _ALLEGRO_glUseProgram_t;
    ValidateProgram: _ALLEGRO_glValidateProgram_t;
    Uniform1f: _ALLEGRO_glUniform1f_t;
    Uniform2f: _ALLEGRO_glUniform2f_t;
    Uniform3f: _ALLEGRO_glUniform3f_t;
    Uniform4f: _ALLEGRO_glUniform4f_t;
    Uniform1i: _ALLEGRO_glUniform1i_t;
    Uniform2i: _ALLEGRO_glUniform2i_t;
    Uniform3i: _ALLEGRO_glUniform3i_t;
    Uniform4i: _ALLEGRO_glUniform4i_t;
    Uniform1fv: _ALLEGRO_glUniform1fv_t;
    Uniform2fv: _ALLEGRO_glUniform2fv_t;
    Uniform3fv: _ALLEGRO_glUniform3fv_t;
    Uniform4fv: _ALLEGRO_glUniform4fv_t;
    Uniform1iv: _ALLEGRO_glUniform1iv_t;
    Uniform2iv: _ALLEGRO_glUniform2iv_t;
    Uniform3iv: _ALLEGRO_glUniform3iv_t;
    Uniform4iv: _ALLEGRO_glUniform4iv_t;
    UniformMatrix2fv: _ALLEGRO_glUniformMatrix2fv_t;
    UniformMatrix3fv: _ALLEGRO_glUniformMatrix3fv_t;
    UniformMatrix4fv: _ALLEGRO_glUniformMatrix4fv_t;
    GetShaderfv: _ALLEGRO_glGetShaderfv_t;
    GetShaderiv: _ALLEGRO_glGetShaderiv_t;
    GetProgramfv: _ALLEGRO_glGetProgramfv_t;
    GetProgramiv: _ALLEGRO_glGetProgramiv_t;
    GetShaderInfoLog: _ALLEGRO_glGetShaderInfoLog_t;
    GetProgramInfoLog: _ALLEGRO_glGetProgramInfoLog_t;
    GetAttachedShaders: _ALLEGRO_glGetAttachedShaders_t;
    GetUniformLocation: _ALLEGRO_glGetUniformLocation_t;
    GetActiveUniform: _ALLEGRO_glGetActiveUniform_t;
    GetUniformfv: _ALLEGRO_glGetUniformfv_t;
    GetUniformiv: _ALLEGRO_glGetUniformiv_t;
    GetShaderSource: _ALLEGRO_glGetShaderSource_t;
    VertexAttrib1f: _ALLEGRO_glVertexAttrib1f_t;
    VertexAttrib1s: _ALLEGRO_glVertexAttrib1s_t;
    VertexAttrib1d: _ALLEGRO_glVertexAttrib1d_t;
    VertexAttrib2f: _ALLEGRO_glVertexAttrib2f_t;
    VertexAttrib2s: _ALLEGRO_glVertexAttrib2s_t;
    VertexAttrib2d: _ALLEGRO_glVertexAttrib2d_t;
    VertexAttrib3f: _ALLEGRO_glVertexAttrib3f_t;
    VertexAttrib3s: _ALLEGRO_glVertexAttrib3s_t;
    VertexAttrib3d: _ALLEGRO_glVertexAttrib3d_t;
    VertexAttrib4f: _ALLEGRO_glVertexAttrib4f_t;
    VertexAttrib4s: _ALLEGRO_glVertexAttrib4s_t;
    VertexAttrib4d: _ALLEGRO_glVertexAttrib4d_t;
    VertexAttrib4Nub: _ALLEGRO_glVertexAttrib4Nub_t;
    VertexAttrib1fv: _ALLEGRO_glVertexAttrib1fv_t;
    VertexAttrib1sv: _ALLEGRO_glVertexAttrib1sv_t;
    VertexAttrib1dv: _ALLEGRO_glVertexAttrib1dv_t;
    VertexAttrib2fv: _ALLEGRO_glVertexAttrib2fv_t;
    VertexAttrib2sv: _ALLEGRO_glVertexAttrib2sv_t;
    VertexAttrib2dv: _ALLEGRO_glVertexAttrib2dv_t;
    VertexAttrib3fv: _ALLEGRO_glVertexAttrib3fv_t;
    VertexAttrib3sv: _ALLEGRO_glVertexAttrib3sv_t;
    VertexAttrib3dv: _ALLEGRO_glVertexAttrib3dv_t;
    VertexAttrib4fv: _ALLEGRO_glVertexAttrib4fv_t;
    VertexAttrib4sv: _ALLEGRO_glVertexAttrib4sv_t;
    VertexAttrib4dv: _ALLEGRO_glVertexAttrib4dv_t;
    VertexAttrib4iv: _ALLEGRO_glVertexAttrib4iv_t;
    VertexAttrib4bv: _ALLEGRO_glVertexAttrib4bv_t;
    VertexAttrib4ubv: _ALLEGRO_glVertexAttrib4ubv_t;
    VertexAttrib4usv: _ALLEGRO_glVertexAttrib4usv_t;
    VertexAttrib4uiv: _ALLEGRO_glVertexAttrib4uiv_t;
    VertexAttrib4Nbv: _ALLEGRO_glVertexAttrib4Nbv_t;
    VertexAttrib4Nsv: _ALLEGRO_glVertexAttrib4Nsv_t;
    VertexAttrib4Niv: _ALLEGRO_glVertexAttrib4Niv_t;
    VertexAttrib4Nubv: _ALLEGRO_glVertexAttrib4Nubv_t;
    VertexAttrib4Nusv: _ALLEGRO_glVertexAttrib4Nusv_t;
    VertexAttrib4Nuiv: _ALLEGRO_glVertexAttrib4Nuiv_t;
    VertexAttribPointer: _ALLEGRO_glVertexAttribPointer_t;
    EnableVertexAttribArray: _ALLEGRO_glEnableVertexAttribArray_t;
    DisableVertexAttribArray: _ALLEGRO_glDisableVertexAttribArray_t;
    BindAttribLocation: _ALLEGRO_glBindAttribLocation_t;
    GetActiveAttrib: _ALLEGRO_glGetActiveAttrib_t;
    GetAttribLocation: _ALLEGRO_glGetAttribLocation_t;
    GetVertexAttribdv: _ALLEGRO_glGetVertexAttribdv_t;
    GetVertexAttribfv: _ALLEGRO_glGetVertexAttribfv_t;
    GetVertexAttribiv: _ALLEGRO_glGetVertexAttribiv_t;
    GetVertexAttribPointerv: _ALLEGRO_glGetVertexAttribPointerv_t;
    DrawBuffers: _ALLEGRO_glDrawBuffers_t;
    StencilOpSeparate: _ALLEGRO_glStencilOpSeparate_t;
    StencilFuncSeparate: _ALLEGRO_glStencilFuncSeparate_t;
    StencilMaskSeparate: _ALLEGRO_glStencilMaskSeparate_t;
    UniformMatrix2x3fv: _ALLEGRO_glUniformMatrix2x3fv_t;
    UniformMatrix3x2fv: _ALLEGRO_glUniformMatrix3x2fv_t;
    UniformMatrix2x4fv: _ALLEGRO_glUniformMatrix2x4fv_t;
    UniformMatrix4x2fv: _ALLEGRO_glUniformMatrix4x2fv_t;
    UniformMatrix3x4fv: _ALLEGRO_glUniformMatrix3x4fv_t;
    UniformMatrix4x3fv: _ALLEGRO_glUniformMatrix4x3fv_t;
    ColorMaski: _ALLEGRO_glColorMaski_t;
    GetBooleani_v: _ALLEGRO_glGetBooleani_v_t;
    GetIntegeri_v: _ALLEGRO_glGetIntegeri_v_t;
    Enablei: _ALLEGRO_glEnablei_t;
    Disablei: _ALLEGRO_glDisablei_t;
    IsEnabledi: _ALLEGRO_glIsEnabledi_t;
    BeginTransformFeedback: _ALLEGRO_glBeginTransformFeedback_t;
    EndTransformFeedback: _ALLEGRO_glEndTransformFeedback_t;
    BindBufferRange: _ALLEGRO_glBindBufferRange_t;
    BindBufferBase: _ALLEGRO_glBindBufferBase_t;
    TransformFeedbackVaryings: _ALLEGRO_glTransformFeedbackVaryings_t;
    GetTransformFeedbackVarying: _ALLEGRO_glGetTransformFeedbackVarying_t;
    ClampColor: _ALLEGRO_glClampColor_t;
    BeginConditionalRender: _ALLEGRO_glBeginConditionalRender_t;
    EndConditionalRender: _ALLEGRO_glEndConditionalRender_t;
    VertexAttribI1i: _ALLEGRO_glVertexAttribI1i_t;
    VertexAttribI2i: _ALLEGRO_glVertexAttribI2i_t;
    VertexAttribI3i: _ALLEGRO_glVertexAttribI3i_t;
    VertexAttribI4i: _ALLEGRO_glVertexAttribI4i_t;
    VertexAttribI1ui: _ALLEGRO_glVertexAttribI1ui_t;
    VertexAttribI2ui: _ALLEGRO_glVertexAttribI2ui_t;
    VertexAttribI3ui: _ALLEGRO_glVertexAttribI3ui_t;
    VertexAttribI4ui: _ALLEGRO_glVertexAttribI4ui_t;
    VertexAttribI1iv: _ALLEGRO_glVertexAttribI1iv_t;
    VertexAttribI2iv: _ALLEGRO_glVertexAttribI2iv_t;
    VertexAttribI3iv: _ALLEGRO_glVertexAttribI3iv_t;
    VertexAttribI4iv: _ALLEGRO_glVertexAttribI4iv_t;
    VertexAttribI1uiv: _ALLEGRO_glVertexAttribI1uiv_t;
    VertexAttribI2uiv: _ALLEGRO_glVertexAttribI2uiv_t;
    VertexAttribI3uiv: _ALLEGRO_glVertexAttribI3uiv_t;
    VertexAttribI4uiv: _ALLEGRO_glVertexAttribI4uiv_t;
    VertexAttribI4bv: _ALLEGRO_glVertexAttribI4bv_t;
    VertexAttribI4sv: _ALLEGRO_glVertexAttribI4sv_t;
    VertexAttribI4ubv: _ALLEGRO_glVertexAttribI4ubv_t;
    VertexAttribI4usv: _ALLEGRO_glVertexAttribI4usv_t;
    VertexAttribIPointer: _ALLEGRO_glVertexAttribIPointer_t;
    GetVertexAttribIiv: _ALLEGRO_glGetVertexAttribIiv_t;
    GetVertexAttribIuiv: _ALLEGRO_glGetVertexAttribIuiv_t;
    GetUniformuiv: _ALLEGRO_glGetUniformuiv_t;
    BindFragDataLocation: _ALLEGRO_glBindFragDataLocation_t;
    GetFragDataLocation: _ALLEGRO_glGetFragDataLocation_t;
    Uniform1ui: _ALLEGRO_glUniform1ui_t;
    Uniform2ui: _ALLEGRO_glUniform2ui_t;
    Uniform3ui: _ALLEGRO_glUniform3ui_t;
    Uniform4ui: _ALLEGRO_glUniform4ui_t;
    Uniform1uiv: _ALLEGRO_glUniform1uiv_t;
    Uniform2uiv: _ALLEGRO_glUniform2uiv_t;
    Uniform3uiv: _ALLEGRO_glUniform3uiv_t;
    Uniform4uiv: _ALLEGRO_glUniform4uiv_t;
    TexParameterIiv: _ALLEGRO_glTexParameterIiv_t;
    TexParameterIuiv: _ALLEGRO_glTexParameterIuiv_t;
    GetTexParameterIiv: _ALLEGRO_glGetTexParameterIiv_t;
    GetTexParameterIuiv: _ALLEGRO_glGetTexParameterIuiv_t;
    ClearBufferiv: _ALLEGRO_glClearBufferiv_t;
    ClearBufferuiv: _ALLEGRO_glClearBufferuiv_t;
    ClearBufferfv: _ALLEGRO_glClearBufferfv_t;
    ClearBufferfi: _ALLEGRO_glClearBufferfi_t;
    GetStringi: _ALLEGRO_glGetStringi_t;
    DrawArraysInstanced: _ALLEGRO_glDrawArraysInstanced_t;
    DrawElementsInstanced: _ALLEGRO_glDrawElementsInstanced_t;
    TexBuffer: _ALLEGRO_glTexBuffer_t;
    PrimitiveRestartIndex: _ALLEGRO_glPrimitiveRestartIndex_t;
    GetInteger64i_v: _ALLEGRO_glGetInteger64i_v_t;
    GetBufferParameteri64v: _ALLEGRO_glGetBufferParameteri64v_t;
    ProgramParameteri: _ALLEGRO_glProgramParameteri_t;
    FramebufferTexture: _ALLEGRO_glFramebufferTexture_t;
    ClearBufferData: _ALLEGRO_glClearBufferData_t;
    ClearBufferSubData: _ALLEGRO_glClearBufferSubData_t;
    DispatchCompute: _ALLEGRO_glDispatchCompute_t;
    DispatchComputeIndirect: _ALLEGRO_glDispatchComputeIndirect_t;
    CopyImageSubData: _ALLEGRO_glCopyImageSubData_t;
    FramebufferParameteri: _ALLEGRO_glFramebufferParameteri_t;
    GetFramebufferParameteriv: _ALLEGRO_glGetFramebufferParameteriv_t;
    GetInternalformati64v: _ALLEGRO_glGetInternalformati64v_t;
    InvalidateTexSubImage: _ALLEGRO_glInvalidateTexSubImage_t;
    InvalidateTexImage: _ALLEGRO_glInvalidateTexImage_t;
    InvalidateBufferSubData: _ALLEGRO_glInvalidateBufferSubData_t;
    InvalidateBufferData: _ALLEGRO_glInvalidateBufferData_t;
    InvalidateFramebuffer: _ALLEGRO_glInvalidateFramebuffer_t;
    InvalidateSubFramebuffer: _ALLEGRO_glInvalidateSubFramebuffer_t;
    MultiDrawArraysIndirect: _ALLEGRO_glMultiDrawArraysIndirect_t;
    MultiDrawElementsIndirect: _ALLEGRO_glMultiDrawElementsIndirect_t;
    GetProgramInterfaceiv: _ALLEGRO_glGetProgramInterfaceiv_t;
    GetProgramResourceIndex: _ALLEGRO_glGetProgramResourceIndex_t;
    GetProgramResourceName: _ALLEGRO_glGetProgramResourceName_t;
    GetProgramResourceiv: _ALLEGRO_glGetProgramResourceiv_t;
    GetProgramResourceLocation: _ALLEGRO_glGetProgramResourceLocation_t;
    GetProgramResourceLocationIndex: _ALLEGRO_glGetProgramResourceLocationIndex_t;
    ShaderStorageBlockBinding: _ALLEGRO_glShaderStorageBlockBinding_t;
    TexBufferRange: _ALLEGRO_glTexBufferRange_t;
    TexStorage2DMultisample: _ALLEGRO_glTexStorage2DMultisample_t;
    TexStorage3DMultisample: _ALLEGRO_glTexStorage3DMultisample_t;
    TextureView: _ALLEGRO_glTextureView_t;
    BindVertexBuffer: _ALLEGRO_glBindVertexBuffer_t;
    VertexAttribFormat: _ALLEGRO_glVertexAttribFormat_t;
    VertexAttribIFormat: _ALLEGRO_glVertexAttribIFormat_t;
    VertexAttribLFormat: _ALLEGRO_glVertexAttribLFormat_t;
    VertexAttribBinding: _ALLEGRO_glVertexAttribBinding_t;
    VertexBindingDivisor: _ALLEGRO_glVertexBindingDivisor_t;
    DebugMessageControl: _ALLEGRO_glDebugMessageControl_t;
    DebugMessageInsert: _ALLEGRO_glDebugMessageInsert_t;
    DebugMessageCallback: _ALLEGRO_glDebugMessageCallback_t;
    GetDebugMessageLog: _ALLEGRO_glGetDebugMessageLog_t;
    PushDebugGroup: _ALLEGRO_glPushDebugGroup_t;
    PopDebugGroup: _ALLEGRO_glPopDebugGroup_t;
    ObjectLabel: _ALLEGRO_glObjectLabel_t;
    GetObjectLabel: _ALLEGRO_glGetObjectLabel_t;
    ObjectPtrLabel: _ALLEGRO_glObjectPtrLabel_t;
    GetObjectPtrLabel: _ALLEGRO_glGetObjectPtrLabel_t;
    ActiveTextureARB: _ALLEGRO_glActiveTextureARB_t;
    ClientActiveTextureARB: _ALLEGRO_glClientActiveTextureARB_t;
    MultiTexCoord1dARB: _ALLEGRO_glMultiTexCoord1dARB_t;
    MultiTexCoord1dvARB: _ALLEGRO_glMultiTexCoord1dvARB_t;
    MultiTexCoord1fARB: _ALLEGRO_glMultiTexCoord1fARB_t;
    MultiTexCoord1fvARB: _ALLEGRO_glMultiTexCoord1fvARB_t;
    MultiTexCoord1iARB: _ALLEGRO_glMultiTexCoord1iARB_t;
    MultiTexCoord1ivARB: _ALLEGRO_glMultiTexCoord1ivARB_t;
    MultiTexCoord1sARB: _ALLEGRO_glMultiTexCoord1sARB_t;
    MultiTexCoord1svARB: _ALLEGRO_glMultiTexCoord1svARB_t;
    MultiTexCoord2dARB: _ALLEGRO_glMultiTexCoord2dARB_t;
    MultiTexCoord2dvARB: _ALLEGRO_glMultiTexCoord2dvARB_t;
    MultiTexCoord2fARB: _ALLEGRO_glMultiTexCoord2fARB_t;
    MultiTexCoord2fvARB: _ALLEGRO_glMultiTexCoord2fvARB_t;
    MultiTexCoord2iARB: _ALLEGRO_glMultiTexCoord2iARB_t;
    MultiTexCoord2ivARB: _ALLEGRO_glMultiTexCoord2ivARB_t;
    MultiTexCoord2sARB: _ALLEGRO_glMultiTexCoord2sARB_t;
    MultiTexCoord2svARB: _ALLEGRO_glMultiTexCoord2svARB_t;
    MultiTexCoord3dARB: _ALLEGRO_glMultiTexCoord3dARB_t;
    MultiTexCoord3dvARB: _ALLEGRO_glMultiTexCoord3dvARB_t;
    MultiTexCoord3fARB: _ALLEGRO_glMultiTexCoord3fARB_t;
    MultiTexCoord3fvARB: _ALLEGRO_glMultiTexCoord3fvARB_t;
    MultiTexCoord3iARB: _ALLEGRO_glMultiTexCoord3iARB_t;
    MultiTexCoord3ivARB: _ALLEGRO_glMultiTexCoord3ivARB_t;
    MultiTexCoord3sARB: _ALLEGRO_glMultiTexCoord3sARB_t;
    MultiTexCoord3svARB: _ALLEGRO_glMultiTexCoord3svARB_t;
    MultiTexCoord4dARB: _ALLEGRO_glMultiTexCoord4dARB_t;
    MultiTexCoord4dvARB: _ALLEGRO_glMultiTexCoord4dvARB_t;
    MultiTexCoord4fARB: _ALLEGRO_glMultiTexCoord4fARB_t;
    MultiTexCoord4fvARB: _ALLEGRO_glMultiTexCoord4fvARB_t;
    MultiTexCoord4iARB: _ALLEGRO_glMultiTexCoord4iARB_t;
    MultiTexCoord4ivARB: _ALLEGRO_glMultiTexCoord4ivARB_t;
    MultiTexCoord4sARB: _ALLEGRO_glMultiTexCoord4sARB_t;
    MultiTexCoord4svARB: _ALLEGRO_glMultiTexCoord4svARB_t;
    LoadTransposeMatrixfARB: _ALLEGRO_glLoadTransposeMatrixfARB_t;
    LoadTransposeMatrixdARB: _ALLEGRO_glLoadTransposeMatrixdARB_t;
    MultTransposeMatrixfARB: _ALLEGRO_glMultTransposeMatrixfARB_t;
    MultTransposeMatrixdARB: _ALLEGRO_glMultTransposeMatrixdARB_t;
    SampleCoverageARB: _ALLEGRO_glSampleCoverageARB_t;
    CompressedTexImage3DARB: _ALLEGRO_glCompressedTexImage3DARB_t;
    CompressedTexImage2DARB: _ALLEGRO_glCompressedTexImage2DARB_t;
    CompressedTexImage1DARB: _ALLEGRO_glCompressedTexImage1DARB_t;
    CompressedTexSubImage3DARB: _ALLEGRO_glCompressedTexSubImage3DARB_t;
    CompressedTexSubImage2DARB: _ALLEGRO_glCompressedTexSubImage2DARB_t;
    CompressedTexSubImage1DARB: _ALLEGRO_glCompressedTexSubImage1DARB_t;
    GetCompressedTexImageARB: _ALLEGRO_glGetCompressedTexImageARB_t;
    PointParameterfARB: _ALLEGRO_glPointParameterfARB_t;
    PointParameterfvARB: _ALLEGRO_glPointParameterfvARB_t;
    WeightbvARB: _ALLEGRO_glWeightbvARB_t;
    WeightsvARB: _ALLEGRO_glWeightsvARB_t;
    WeightivARB: _ALLEGRO_glWeightivARB_t;
    WeightfvARB: _ALLEGRO_glWeightfvARB_t;
    WeightdvARB: _ALLEGRO_glWeightdvARB_t;
    WeightubvARB: _ALLEGRO_glWeightubvARB_t;
    WeightusvARB: _ALLEGRO_glWeightusvARB_t;
    WeightuivARB: _ALLEGRO_glWeightuivARB_t;
    WeightPointerARB: _ALLEGRO_glWeightPointerARB_t;
    VertexBlendARB: _ALLEGRO_glVertexBlendARB_t;
    CurrentPaletteMatrixARB: _ALLEGRO_glCurrentPaletteMatrixARB_t;
    MatrixIndexubvARB: _ALLEGRO_glMatrixIndexubvARB_t;
    MatrixIndexusvARB: _ALLEGRO_glMatrixIndexusvARB_t;
    MatrixIndexuivARB: _ALLEGRO_glMatrixIndexuivARB_t;
    MatrixIndexPointerARB: _ALLEGRO_glMatrixIndexPointerARB_t;
    WindowPos2dARB: _ALLEGRO_glWindowPos2dARB_t;
    WindowPos2dvARB: _ALLEGRO_glWindowPos2dvARB_t;
    WindowPos2fARB: _ALLEGRO_glWindowPos2fARB_t;
    WindowPos2fvARB: _ALLEGRO_glWindowPos2fvARB_t;
    WindowPos2iARB: _ALLEGRO_glWindowPos2iARB_t;
    WindowPos2ivARB: _ALLEGRO_glWindowPos2ivARB_t;
    WindowPos2sARB: _ALLEGRO_glWindowPos2sARB_t;
    WindowPos2svARB: _ALLEGRO_glWindowPos2svARB_t;
    WindowPos3dARB: _ALLEGRO_glWindowPos3dARB_t;
    WindowPos3dvARB: _ALLEGRO_glWindowPos3dvARB_t;
    WindowPos3fARB: _ALLEGRO_glWindowPos3fARB_t;
    WindowPos3fvARB: _ALLEGRO_glWindowPos3fvARB_t;
    WindowPos3iARB: _ALLEGRO_glWindowPos3iARB_t;
    WindowPos3ivARB: _ALLEGRO_glWindowPos3ivARB_t;
    WindowPos3sARB: _ALLEGRO_glWindowPos3sARB_t;
    WindowPos3svARB: _ALLEGRO_glWindowPos3svARB_t;
    VertexAttrib1dARB: _ALLEGRO_glVertexAttrib1dARB_t;
    VertexAttrib1dvARB: _ALLEGRO_glVertexAttrib1dvARB_t;
    VertexAttrib1fARB: _ALLEGRO_glVertexAttrib1fARB_t;
    VertexAttrib1fvARB: _ALLEGRO_glVertexAttrib1fvARB_t;
    VertexAttrib1sARB: _ALLEGRO_glVertexAttrib1sARB_t;
    VertexAttrib1svARB: _ALLEGRO_glVertexAttrib1svARB_t;
    VertexAttrib2dARB: _ALLEGRO_glVertexAttrib2dARB_t;
    VertexAttrib2dvARB: _ALLEGRO_glVertexAttrib2dvARB_t;
    VertexAttrib2fARB: _ALLEGRO_glVertexAttrib2fARB_t;
    VertexAttrib2fvARB: _ALLEGRO_glVertexAttrib2fvARB_t;
    VertexAttrib2sARB: _ALLEGRO_glVertexAttrib2sARB_t;
    VertexAttrib2svARB: _ALLEGRO_glVertexAttrib2svARB_t;
    VertexAttrib3dARB: _ALLEGRO_glVertexAttrib3dARB_t;
    VertexAttrib3dvARB: _ALLEGRO_glVertexAttrib3dvARB_t;
    VertexAttrib3fARB: _ALLEGRO_glVertexAttrib3fARB_t;
    VertexAttrib3fvARB: _ALLEGRO_glVertexAttrib3fvARB_t;
    VertexAttrib3sARB: _ALLEGRO_glVertexAttrib3sARB_t;
    VertexAttrib3svARB: _ALLEGRO_glVertexAttrib3svARB_t;
    VertexAttrib4NbvARB: _ALLEGRO_glVertexAttrib4NbvARB_t;
    VertexAttrib4NivARB: _ALLEGRO_glVertexAttrib4NivARB_t;
    VertexAttrib4NsvARB: _ALLEGRO_glVertexAttrib4NsvARB_t;
    VertexAttrib4NubARB: _ALLEGRO_glVertexAttrib4NubARB_t;
    VertexAttrib4NubvARB: _ALLEGRO_glVertexAttrib4NubvARB_t;
    VertexAttrib4NuivARB: _ALLEGRO_glVertexAttrib4NuivARB_t;
    VertexAttrib4NusvARB: _ALLEGRO_glVertexAttrib4NusvARB_t;
    VertexAttrib4bvARB: _ALLEGRO_glVertexAttrib4bvARB_t;
    VertexAttrib4dARB: _ALLEGRO_glVertexAttrib4dARB_t;
    VertexAttrib4dvARB: _ALLEGRO_glVertexAttrib4dvARB_t;
    VertexAttrib4fARB: _ALLEGRO_glVertexAttrib4fARB_t;
    VertexAttrib4fvARB: _ALLEGRO_glVertexAttrib4fvARB_t;
    VertexAttrib4ivARB: _ALLEGRO_glVertexAttrib4ivARB_t;
    VertexAttrib4sARB: _ALLEGRO_glVertexAttrib4sARB_t;
    VertexAttrib4svARB: _ALLEGRO_glVertexAttrib4svARB_t;
    VertexAttrib4ubvARB: _ALLEGRO_glVertexAttrib4ubvARB_t;
    VertexAttrib4uivARB: _ALLEGRO_glVertexAttrib4uivARB_t;
    VertexAttrib4usvARB: _ALLEGRO_glVertexAttrib4usvARB_t;
    VertexAttribPointerARB: _ALLEGRO_glVertexAttribPointerARB_t;
    EnableVertexAttribArrayARB: _ALLEGRO_glEnableVertexAttribArrayARB_t;
    DisableVertexAttribArrayARB: _ALLEGRO_glDisableVertexAttribArrayARB_t;
    ProgramStringARB: _ALLEGRO_glProgramStringARB_t;
    BindProgramARB: _ALLEGRO_glBindProgramARB_t;
    DeleteProgramsARB: _ALLEGRO_glDeleteProgramsARB_t;
    GenProgramsARB: _ALLEGRO_glGenProgramsARB_t;
    ProgramEnvParameter4dARB: _ALLEGRO_glProgramEnvParameter4dARB_t;
    ProgramEnvParameter4dvARB: _ALLEGRO_glProgramEnvParameter4dvARB_t;
    ProgramEnvParameter4fARB: _ALLEGRO_glProgramEnvParameter4fARB_t;
    ProgramEnvParameter4fvARB: _ALLEGRO_glProgramEnvParameter4fvARB_t;
    ProgramLocalParameter4dARB: _ALLEGRO_glProgramLocalParameter4dARB_t;
    ProgramLocalParameter4dvARB: _ALLEGRO_glProgramLocalParameter4dvARB_t;
    ProgramLocalParameter4fARB: _ALLEGRO_glProgramLocalParameter4fARB_t;
    ProgramLocalParameter4fvARB: _ALLEGRO_glProgramLocalParameter4fvARB_t;
    GetProgramEnvParameterdvARB: _ALLEGRO_glGetProgramEnvParameterdvARB_t;
    GetProgramEnvParameterfvARB: _ALLEGRO_glGetProgramEnvParameterfvARB_t;
    GetProgramLocalParameterdvARB: _ALLEGRO_glGetProgramLocalParameterdvARB_t;
    GetProgramLocalParameterfvARB: _ALLEGRO_glGetProgramLocalParameterfvARB_t;
    GetProgramivARB: _ALLEGRO_glGetProgramivARB_t;
    GetProgramStringARB: _ALLEGRO_glGetProgramStringARB_t;
    GetVertexAttribdvARB: _ALLEGRO_glGetVertexAttribdvARB_t;
    GetVertexAttribfvARB: _ALLEGRO_glGetVertexAttribfvARB_t;
    GetVertexAttribivARB: _ALLEGRO_glGetVertexAttribivARB_t;
    GetVertexAttribPointervARB: _ALLEGRO_glGetVertexAttribPointervARB_t;
    IsProgramARB: _ALLEGRO_glIsProgramARB_t;
    BindBufferARB: _ALLEGRO_glBindBufferARB_t;
    DeleteBuffersARB: _ALLEGRO_glDeleteBuffersARB_t;
    GenBuffersARB: _ALLEGRO_glGenBuffersARB_t;
    IsBufferARB: _ALLEGRO_glIsBufferARB_t;
    BufferDataARB: _ALLEGRO_glBufferDataARB_t;
    BufferSubDataARB: _ALLEGRO_glBufferSubDataARB_t;
    GetBufferSubDataARB: _ALLEGRO_glGetBufferSubDataARB_t;
    MapBufferARB: _ALLEGRO_glMapBufferARB_t;
    UnmapBufferARB: _ALLEGRO_glUnmapBufferARB_t;
    GetBufferParameterivARB: _ALLEGRO_glGetBufferParameterivARB_t;
    GetBufferPointervARB: _ALLEGRO_glGetBufferPointervARB_t;
    GenQueriesARB: _ALLEGRO_glGenQueriesARB_t;
    DeleteQueriesARB: _ALLEGRO_glDeleteQueriesARB_t;
    IsQueryARB: _ALLEGRO_glIsQueryARB_t;
    BeginQueryARB: _ALLEGRO_glBeginQueryARB_t;
    EndQueryARB: _ALLEGRO_glEndQueryARB_t;
    GetQueryivARB: _ALLEGRO_glGetQueryivARB_t;
    GetQueryObjectivARB: _ALLEGRO_glGetQueryObjectivARB_t;
    GetQueryObjectuivARB: _ALLEGRO_glGetQueryObjectuivARB_t;
    DeleteObjectARB: _ALLEGRO_glDeleteObjectARB_t;
    GetHandleARB: _ALLEGRO_glGetHandleARB_t;
    DetachObjectARB: _ALLEGRO_glDetachObjectARB_t;
    CreateShaderObjectARB: _ALLEGRO_glCreateShaderObjectARB_t;
    ShaderSourceARB: _ALLEGRO_glShaderSourceARB_t;
    CompileShaderARB: _ALLEGRO_glCompileShaderARB_t;
    CreateProgramObjectARB: _ALLEGRO_glCreateProgramObjectARB_t;
    AttachObjectARB: _ALLEGRO_glAttachObjectARB_t;
    LinkProgramARB: _ALLEGRO_glLinkProgramARB_t;
    UseProgramObjectARB: _ALLEGRO_glUseProgramObjectARB_t;
    ValidateProgramARB: _ALLEGRO_glValidateProgramARB_t;
    Uniform1fARB: _ALLEGRO_glUniform1fARB_t;
    Uniform2fARB: _ALLEGRO_glUniform2fARB_t;
    Uniform3fARB: _ALLEGRO_glUniform3fARB_t;
    Uniform4fARB: _ALLEGRO_glUniform4fARB_t;
    Uniform1iARB: _ALLEGRO_glUniform1iARB_t;
    Uniform2iARB: _ALLEGRO_glUniform2iARB_t;
    Uniform3iARB: _ALLEGRO_glUniform3iARB_t;
    Uniform4iARB: _ALLEGRO_glUniform4iARB_t;
    Uniform1fvARB: _ALLEGRO_glUniform1fvARB_t;
    Uniform2fvARB: _ALLEGRO_glUniform2fvARB_t;
    Uniform3fvARB: _ALLEGRO_glUniform3fvARB_t;
    Uniform4fvARB: _ALLEGRO_glUniform4fvARB_t;
    Uniform1ivARB: _ALLEGRO_glUniform1ivARB_t;
    Uniform2ivARB: _ALLEGRO_glUniform2ivARB_t;
    Uniform3ivARB: _ALLEGRO_glUniform3ivARB_t;
    Uniform4ivARB: _ALLEGRO_glUniform4ivARB_t;
    UniformMatrix2fvARB: _ALLEGRO_glUniformMatrix2fvARB_t;
    UniformMatrix3fvARB: _ALLEGRO_glUniformMatrix3fvARB_t;
    UniformMatrix4fvARB: _ALLEGRO_glUniformMatrix4fvARB_t;
    GetObjectParameterfvARB: _ALLEGRO_glGetObjectParameterfvARB_t;
    GetObjectParameterivARB: _ALLEGRO_glGetObjectParameterivARB_t;
    GetInfoLogARB: _ALLEGRO_glGetInfoLogARB_t;
    GetAttachedObjectsARB: _ALLEGRO_glGetAttachedObjectsARB_t;
    GetUniformLocationARB: _ALLEGRO_glGetUniformLocationARB_t;
    GetActiveUniformARB: _ALLEGRO_glGetActiveUniformARB_t;
    GetUniformfvARB: _ALLEGRO_glGetUniformfvARB_t;
    GetUniformivARB: _ALLEGRO_glGetUniformivARB_t;
    GetShaderSourceARB: _ALLEGRO_glGetShaderSourceARB_t;
    BindAttribLocationARB: _ALLEGRO_glBindAttribLocationARB_t;
    GetActiveAttribARB: _ALLEGRO_glGetActiveAttribARB_t;
    GetAttribLocationARB: _ALLEGRO_glGetAttribLocationARB_t;
    DrawBuffersARB: _ALLEGRO_glDrawBuffersARB_t;
    ClampColorARB: _ALLEGRO_glClampColorARB_t;
    DrawArraysInstancedARB: _ALLEGRO_glDrawArraysInstancedARB_t;
    DrawElementsInstancedARB: _ALLEGRO_glDrawElementsInstancedARB_t;
    IsRenderbuffer: _ALLEGRO_glIsRenderbuffer_t;
    BindRenderbuffer: _ALLEGRO_glBindRenderbuffer_t;
    DeleteRenderbuffers: _ALLEGRO_glDeleteRenderbuffers_t;
    GenRenderbuffers: _ALLEGRO_glGenRenderbuffers_t;
    RenderbufferStorage: _ALLEGRO_glRenderbufferStorage_t;
    GetRenderbufferParameteriv: _ALLEGRO_glGetRenderbufferParameteriv_t;
    IsFramebuffer: _ALLEGRO_glIsFramebuffer_t;
    BindFramebuffer: _ALLEGRO_glBindFramebuffer_t;
    DeleteFramebuffers: _ALLEGRO_glDeleteFramebuffers_t;
    GenFramebuffers: _ALLEGRO_glGenFramebuffers_t;
    CheckFramebufferStatus: _ALLEGRO_glCheckFramebufferStatus_t;
    FramebufferTexture1D: _ALLEGRO_glFramebufferTexture1D_t;
    FramebufferTexture2D: _ALLEGRO_glFramebufferTexture2D_t;
    FramebufferTexture3D: _ALLEGRO_glFramebufferTexture3D_t;
    FramebufferRenderbuffer: _ALLEGRO_glFramebufferRenderbuffer_t;
    GetFramebufferAttachmentParameteriv: _ALLEGRO_glGetFramebufferAttachmentParameteriv_t;
    GenerateMipmap: _ALLEGRO_glGenerateMipmap_t;
    BlitFramebuffer: _ALLEGRO_glBlitFramebuffer_t;
    RenderbufferStorageMultisample: _ALLEGRO_glRenderbufferStorageMultisample_t;
    FramebufferTextureLayer: _ALLEGRO_glFramebufferTextureLayer_t;
    ProgramParameteriARB: _ALLEGRO_glProgramParameteriARB_t;
    FramebufferTextureARB: _ALLEGRO_glFramebufferTextureARB_t;
    FramebufferTextureLayerARB: _ALLEGRO_glFramebufferTextureLayerARB_t;
    FramebufferTextureFaceARB: _ALLEGRO_glFramebufferTextureFaceARB_t;
    VertexAttribDivisor: _ALLEGRO_glVertexAttribDivisor_t;
    MapBufferRange: _ALLEGRO_glMapBufferRange_t;
    FlushMappedBufferRange: _ALLEGRO_glFlushMappedBufferRange_t;
    TexBufferARB: _ALLEGRO_glTexBufferARB_t;
    BindVertexArray: _ALLEGRO_glBindVertexArray_t;
    DeleteVertexArrays: _ALLEGRO_glDeleteVertexArrays_t;
    GenVertexArrays: _ALLEGRO_glGenVertexArrays_t;
    IsVertexArray: _ALLEGRO_glIsVertexArray_t;
    GetUniformIndices: _ALLEGRO_glGetUniformIndices_t;
    GetActiveUniformsiv: _ALLEGRO_glGetActiveUniformsiv_t;
    GetActiveUniformName: _ALLEGRO_glGetActiveUniformName_t;
    GetUniformBlockIndex: _ALLEGRO_glGetUniformBlockIndex_t;
    GetActiveUniformBlockiv: _ALLEGRO_glGetActiveUniformBlockiv_t;
    GetActiveUniformBlockName: _ALLEGRO_glGetActiveUniformBlockName_t;
    UniformBlockBinding: _ALLEGRO_glUniformBlockBinding_t;
    CopyBufferSubData: _ALLEGRO_glCopyBufferSubData_t;
    DrawElementsBaseVertex: _ALLEGRO_glDrawElementsBaseVertex_t;
    DrawRangeElementsBaseVertex: _ALLEGRO_glDrawRangeElementsBaseVertex_t;
    DrawElementsInstancedBaseVertex: _ALLEGRO_glDrawElementsInstancedBaseVertex_t;
    MultiDrawElementsBaseVertex: _ALLEGRO_glMultiDrawElementsBaseVertex_t;
    ProvokingVertex: _ALLEGRO_glProvokingVertex_t;
    FenceSync: _ALLEGRO_glFenceSync_t;
    IsSync: _ALLEGRO_glIsSync_t;
    DeleteSync: _ALLEGRO_glDeleteSync_t;
    ClientWaitSync: _ALLEGRO_glClientWaitSync_t;
    WaitSync: _ALLEGRO_glWaitSync_t;
    GetInteger64v: _ALLEGRO_glGetInteger64v_t;
    GetSynciv: _ALLEGRO_glGetSynciv_t;
    TexImage2DMultisample: _ALLEGRO_glTexImage2DMultisample_t;
    TexImage3DMultisample: _ALLEGRO_glTexImage3DMultisample_t;
    GetMultisamplefv: _ALLEGRO_glGetMultisamplefv_t;
    SampleMaski: _ALLEGRO_glSampleMaski_t;
    BlendEquationi: _ALLEGRO_glBlendEquationi_t;
    BlendEquationSeparatei: _ALLEGRO_glBlendEquationSeparatei_t;
    BlendFunci: _ALLEGRO_glBlendFunci_t;
    BlendFuncSeparatei: _ALLEGRO_glBlendFuncSeparatei_t;
    MinSampleShading: _ALLEGRO_glMinSampleShading_t;
    NamedStringARB: _ALLEGRO_glNamedStringARB_t;
    DeleteNamedStringARB: _ALLEGRO_glDeleteNamedStringARB_t;
    CompileShaderIncludeARB: _ALLEGRO_glCompileShaderIncludeARB_t;
    IsNamedStringARB: _ALLEGRO_glIsNamedStringARB_t;
    GetNamedStringARB: _ALLEGRO_glGetNamedStringARB_t;
    GetNamedStringivARB: _ALLEGRO_glGetNamedStringivARB_t;
    BindFragDataLocationIndexed: _ALLEGRO_glBindFragDataLocationIndexed_t;
    GetFragDataIndex: _ALLEGRO_glGetFragDataIndex_t;
    GenSamplers: _ALLEGRO_glGenSamplers_t;
    DeleteSamplers: _ALLEGRO_glDeleteSamplers_t;
    IsSampler: _ALLEGRO_glIsSampler_t;
    BindSampler: _ALLEGRO_glBindSampler_t;
    SamplerParameteri: _ALLEGRO_glSamplerParameteri_t;
    SamplerParameteriv: _ALLEGRO_glSamplerParameteriv_t;
    SamplerParameterf: _ALLEGRO_glSamplerParameterf_t;
    SamplerParameterfv: _ALLEGRO_glSamplerParameterfv_t;
    SamplerParameterIiv: _ALLEGRO_glSamplerParameterIiv_t;
    SamplerParameterIuiv: _ALLEGRO_glSamplerParameterIuiv_t;
    GetSamplerParameteriv: _ALLEGRO_glGetSamplerParameteriv_t;
    GetSamplerParameterIiv: _ALLEGRO_glGetSamplerParameterIiv_t;
    GetSamplerParameterfv: _ALLEGRO_glGetSamplerParameterfv_t;
    GetSamplerParameterIfv: _ALLEGRO_glGetSamplerParameterIfv_t;
    QueryCounter: _ALLEGRO_glQueryCounter_t;
    GetQueryObjecti64v: _ALLEGRO_glGetQueryObjecti64v_t;
    GetQueryObjectui64v: _ALLEGRO_glGetQueryObjectui64v_t;
    VertexP2ui: _ALLEGRO_glVertexP2ui_t;
    VertexP2uiv: _ALLEGRO_glVertexP2uiv_t;
    VertexP3ui: _ALLEGRO_glVertexP3ui_t;
    VertexP3uiv: _ALLEGRO_glVertexP3uiv_t;
    VertexP4ui: _ALLEGRO_glVertexP4ui_t;
    VertexP4uiv: _ALLEGRO_glVertexP4uiv_t;
    TexCoordP1ui: _ALLEGRO_glTexCoordP1ui_t;
    TexCoordP1uiv: _ALLEGRO_glTexCoordP1uiv_t;
    TexCoordP2ui: _ALLEGRO_glTexCoordP2ui_t;
    TexCoordP2uiv: _ALLEGRO_glTexCoordP2uiv_t;
    TexCoordP3ui: _ALLEGRO_glTexCoordP3ui_t;
    TexCoordP3uiv: _ALLEGRO_glTexCoordP3uiv_t;
    TexCoordP4ui: _ALLEGRO_glTexCoordP4ui_t;
    TexCoordP4uiv: _ALLEGRO_glTexCoordP4uiv_t;
    MultiTexCoordP1ui: _ALLEGRO_glMultiTexCoordP1ui_t;
    MultiTexCoordP1uiv: _ALLEGRO_glMultiTexCoordP1uiv_t;
    MultiTexCoordP2ui: _ALLEGRO_glMultiTexCoordP2ui_t;
    MultiTexCoordP2uiv: _ALLEGRO_glMultiTexCoordP2uiv_t;
    MultiTexCoordP3ui: _ALLEGRO_glMultiTexCoordP3ui_t;
    MultiTexCoordP3uiv: _ALLEGRO_glMultiTexCoordP3uiv_t;
    MultiTexCoordP4ui: _ALLEGRO_glMultiTexCoordP4ui_t;
    MultiTexCoordP4uiv: _ALLEGRO_glMultiTexCoordP4uiv_t;
    NormalP3ui: _ALLEGRO_glNormalP3ui_t;
    NormalP3uiv: _ALLEGRO_glNormalP3uiv_t;
    ColorP3ui: _ALLEGRO_glColorP3ui_t;
    ColorP3uiv: _ALLEGRO_glColorP3uiv_t;
    ColorP4ui: _ALLEGRO_glColorP4ui_t;
    ColorP4uiv: _ALLEGRO_glColorP4uiv_t;
    SecondaryColorP3ui: _ALLEGRO_glSecondaryColorP3ui_t;
    SecondaryColorP3uiv: _ALLEGRO_glSecondaryColorP3uiv_t;
    VertexAttribP1ui: _ALLEGRO_glVertexAttribP1ui_t;
    VertexAttribP1uiv: _ALLEGRO_glVertexAttribP1uiv_t;
    VertexAttribP2ui: _ALLEGRO_glVertexAttribP2ui_t;
    VertexAttribP2uiv: _ALLEGRO_glVertexAttribP2uiv_t;
    VertexAttribP3ui: _ALLEGRO_glVertexAttribP3ui_t;
    VertexAttribP3uiv: _ALLEGRO_glVertexAttribP3uiv_t;
    VertexAttribP4ui: _ALLEGRO_glVertexAttribP4ui_t;
    VertexAttribP4uiv: _ALLEGRO_glVertexAttribP4uiv_t;
    DrawArraysIndirect: _ALLEGRO_glDrawArraysIndirect_t;
    DrawElementsIndirect: _ALLEGRO_glDrawElementsIndirect_t;
    Uniform1d: _ALLEGRO_glUniform1d_t;
    Uniform2d: _ALLEGRO_glUniform2d_t;
    Uniform3d: _ALLEGRO_glUniform3d_t;
    Uniform4d: _ALLEGRO_glUniform4d_t;
    Uniform1dv: _ALLEGRO_glUniform1dv_t;
    Uniform2dv: _ALLEGRO_glUniform2dv_t;
    Uniform3dv: _ALLEGRO_glUniform3dv_t;
    Uniform4dv: _ALLEGRO_glUniform4dv_t;
    UniformMatrix2dv: _ALLEGRO_glUniformMatrix2dv_t;
    UniformMatrix3dv: _ALLEGRO_glUniformMatrix3dv_t;
    UniformMatrix4dv: _ALLEGRO_glUniformMatrix4dv_t;
    UniformMatrix2x3dv: _ALLEGRO_glUniformMatrix2x3dv_t;
    UniformMatrix2x4dv: _ALLEGRO_glUniformMatrix2x4dv_t;
    UniformMatrix3x2dv: _ALLEGRO_glUniformMatrix3x2dv_t;
    UniformMatrix3x4dv: _ALLEGRO_glUniformMatrix3x4dv_t;
    UniformMatrix4x2dv: _ALLEGRO_glUniformMatrix4x2dv_t;
    UniformMatrix4x3dv: _ALLEGRO_glUniformMatrix4x3dv_t;
    GetUniformdv: _ALLEGRO_glGetUniformdv_t;
    ProgramUniform1dEXT: _ALLEGRO_glProgramUniform1dEXT_t;
    ProgramUniform2dEXT: _ALLEGRO_glProgramUniform2dEXT_t;
    ProgramUniform3dEXT: _ALLEGRO_glProgramUniform3dEXT_t;
    ProgramUniform4dEXT: _ALLEGRO_glProgramUniform4dEXT_t;
    ProgramUniform1dvEXT: _ALLEGRO_glProgramUniform1dvEXT_t;
    ProgramUniform2dvEXT: _ALLEGRO_glProgramUniform2dvEXT_t;
    ProgramUniform3dvEXT: _ALLEGRO_glProgramUniform3dvEXT_t;
    ProgramUniform4dvEXT: _ALLEGRO_glProgramUniform4dvEXT_t;
    ProgramUniformMatrix2dvEXT: _ALLEGRO_glProgramUniformMatrix2dvEXT_t;
    ProgramUniformMatrix3dvEXT: _ALLEGRO_glProgramUniformMatrix3dvEXT_t;
    ProgramUniformMatrix4dvEXT: _ALLEGRO_glProgramUniformMatrix4dvEXT_t;
    ProgramUniformMatrix2x3dvEXT: _ALLEGRO_glProgramUniformMatrix2x3dvEXT_t;
    ProgramUniformMatrix2x4dvEXT: _ALLEGRO_glProgramUniformMatrix2x4dvEXT_t;
    ProgramUniformMatrix3x2dvEXT: _ALLEGRO_glProgramUniformMatrix3x2dvEXT_t;
    ProgramUniformMatrix3x4dvEXT: _ALLEGRO_glProgramUniformMatrix3x4dvEXT_t;
    ProgramUniformMatrix4x2dvEXT: _ALLEGRO_glProgramUniformMatrix4x2dvEXT_t;
    ProgramUniformMatrix4x3dvEXT: _ALLEGRO_glProgramUniformMatrix4x3dvEXT_t;
    GetSubroutineUniformLocation: _ALLEGRO_glGetSubroutineUniformLocation_t;
    GetSubroutineIndex: _ALLEGRO_glGetSubroutineIndex_t;
    GetActiveSubroutineUniformiv: _ALLEGRO_glGetActiveSubroutineUniformiv_t;
    GetActiveSubroutineUniformName: _ALLEGRO_glGetActiveSubroutineUniformName_t;
    GetActiveSubroutineName: _ALLEGRO_glGetActiveSubroutineName_t;
    UniformSubroutinesuiv: _ALLEGRO_glUniformSubroutinesuiv_t;
    GetUniformSubroutineuiv: _ALLEGRO_glGetUniformSubroutineuiv_t;
    GetProgramStageiv: _ALLEGRO_glGetProgramStageiv_t;
    PatchParameteri: _ALLEGRO_glPatchParameteri_t;
    PatchParameterfv: _ALLEGRO_glPatchParameterfv_t;
    BindTransformFeedback: _ALLEGRO_glBindTransformFeedback_t;
    DeleteTransformFeedbacks: _ALLEGRO_glDeleteTransformFeedbacks_t;
    GenTransformFeedbacks: _ALLEGRO_glGenTransformFeedbacks_t;
    IsTransformFeedback: _ALLEGRO_glIsTransformFeedback_t;
    PauseTransformFeedback: _ALLEGRO_glPauseTransformFeedback_t;
    ResumeTransformFeedback: _ALLEGRO_glResumeTransformFeedback_t;
    DrawTransformFeedback: _ALLEGRO_glDrawTransformFeedback_t;
    DrawTransformFeedbackStream: _ALLEGRO_glDrawTransformFeedbackStream_t;
    BeginQueryIndexed: _ALLEGRO_glBeginQueryIndexed_t;
    EndQueryIndexed: _ALLEGRO_glEndQueryIndexed_t;
    GetQueryIndexediv: _ALLEGRO_glGetQueryIndexediv_t;
    BlendColorEXT: _ALLEGRO_glBlendColorEXT_t;
    PolygonOffsetEXT: _ALLEGRO_glPolygonOffsetEXT_t;
    TexImage3DEXT: _ALLEGRO_glTexImage3DEXT_t;
    TexSubImage3DEXT: _ALLEGRO_glTexSubImage3DEXT_t;
    GetTexFilterFuncSGIS: _ALLEGRO_glGetTexFilterFuncSGIS_t;
    TexFilterFuncSGIS: _ALLEGRO_glTexFilterFuncSGIS_t;
    TexSubImage1DEXT: _ALLEGRO_glTexSubImage1DEXT_t;
    TexSubImage2DEXT: _ALLEGRO_glTexSubImage2DEXT_t;
    CopyTexImage1DEXT: _ALLEGRO_glCopyTexImage1DEXT_t;
    CopyTexImage2DEXT: _ALLEGRO_glCopyTexImage2DEXT_t;
    CopyTexSubImage1DEXT: _ALLEGRO_glCopyTexSubImage1DEXT_t;
    CopyTexSubImage2DEXT: _ALLEGRO_glCopyTexSubImage2DEXT_t;
    CopyTexSubImage3DEXT: _ALLEGRO_glCopyTexSubImage3DEXT_t;
    GetHistogramEXT: _ALLEGRO_glGetHistogramEXT_t;
    GetHistogramParameterfvEXT: _ALLEGRO_glGetHistogramParameterfvEXT_t;
    GetHistogramParameterivEXT: _ALLEGRO_glGetHistogramParameterivEXT_t;
    GetMinmaxEXT: _ALLEGRO_glGetMinmaxEXT_t;
    GetMinmaxParameterfvEXT: _ALLEGRO_glGetMinmaxParameterfvEXT_t;
    GetMinmaxParameterivEXT: _ALLEGRO_glGetMinmaxParameterivEXT_t;
    HistogramEXT: _ALLEGRO_glHistogramEXT_t;
    MinmaxEXT: _ALLEGRO_glMinmaxEXT_t;
    ResetHistogramEXT: _ALLEGRO_glResetHistogramEXT_t;
    ResetMinmaxEXT: _ALLEGRO_glResetMinmaxEXT_t;
    ConvolutionFilter1DEXT: _ALLEGRO_glConvolutionFilter1DEXT_t;
    ConvolutionFilter2DEXT: _ALLEGRO_glConvolutionFilter2DEXT_t;
    ConvolutionParameterfEXT: _ALLEGRO_glConvolutionParameterfEXT_t;
    ConvolutionParameterfvEXT: _ALLEGRO_glConvolutionParameterfvEXT_t;
    ConvolutionParameteriEXT: _ALLEGRO_glConvolutionParameteriEXT_t;
    ConvolutionParameterivEXT: _ALLEGRO_glConvolutionParameterivEXT_t;
    CopyConvolutionFilter1DEXT: _ALLEGRO_glCopyConvolutionFilter1DEXT_t;
    CopyConvolutionFilter2DEXT: _ALLEGRO_glCopyConvolutionFilter2DEXT_t;
    GetConvolutionFilterEXT: _ALLEGRO_glGetConvolutionFilterEXT_t;
    GetConvolutionParameterfvEXT: _ALLEGRO_glGetConvolutionParameterfvEXT_t;
    GetConvolutionParameterivEXT: _ALLEGRO_glGetConvolutionParameterivEXT_t;
    GetSeparableFilterEXT: _ALLEGRO_glGetSeparableFilterEXT_t;
    SeparableFilter2DEXT: _ALLEGRO_glSeparableFilter2DEXT_t;
    ColorTableSGI: _ALLEGRO_glColorTableSGI_t;
    ColorTableParameterfvSGI: _ALLEGRO_glColorTableParameterfvSGI_t;
    ColorTableParameterivSGI: _ALLEGRO_glColorTableParameterivSGI_t;
    CopyColorTableSGI: _ALLEGRO_glCopyColorTableSGI_t;
    GetColorTableSGI: _ALLEGRO_glGetColorTableSGI_t;
    GetColorTableParameterfvSGI: _ALLEGRO_glGetColorTableParameterfvSGI_t;
    GetColorTableParameterivSGI: _ALLEGRO_glGetColorTableParameterivSGI_t;
    PixelTexGenSGIX: _ALLEGRO_glPixelTexGenSGIX_t;
    PixelTexGenParameteriSGIS: _ALLEGRO_glPixelTexGenParameteriSGIS_t;
    PixelTexGenParameterivSGIS: _ALLEGRO_glPixelTexGenParameterivSGIS_t;
    PixelTexGenParameterfSGIS: _ALLEGRO_glPixelTexGenParameterfSGIS_t;
    PixelTexGenParameterfvSGIS: _ALLEGRO_glPixelTexGenParameterfvSGIS_t;
    GetPixelTexGenParameterivSGIS: _ALLEGRO_glGetPixelTexGenParameterivSGIS_t;
    GetPixelTexGenParameterfvSGIS: _ALLEGRO_glGetPixelTexGenParameterfvSGIS_t;
    TexImage4DSGIS: _ALLEGRO_glTexImage4DSGIS_t;
    TexSubImage4DSGIS: _ALLEGRO_glTexSubImage4DSGIS_t;
    AreTexturesResidentEXT: _ALLEGRO_glAreTexturesResidentEXT_t;
    BindTextureEXT: _ALLEGRO_glBindTextureEXT_t;
    DeleteTexturesEXT: _ALLEGRO_glDeleteTexturesEXT_t;
    GenTexturesEXT: _ALLEGRO_glGenTexturesEXT_t;
    IsTextureEXT: _ALLEGRO_glIsTextureEXT_t;
    PrioritizeTexturesEXT: _ALLEGRO_glPrioritizeTexturesEXT_t;
    DetailTexFuncSGIS: _ALLEGRO_glDetailTexFuncSGIS_t;
    GetDetailTexFuncSGIS: _ALLEGRO_glGetDetailTexFuncSGIS_t;
    SharpenTexFuncSGIS: _ALLEGRO_glSharpenTexFuncSGIS_t;
    GetSharpenTexFuncSGIS: _ALLEGRO_glGetSharpenTexFuncSGIS_t;
    SampleMaskSGIS: _ALLEGRO_glSampleMaskSGIS_t;
    SamplePatternSGIS: _ALLEGRO_glSamplePatternSGIS_t;
    ArrayElementEXT: _ALLEGRO_glArrayElementEXT_t;
    ColorPointerEXT: _ALLEGRO_glColorPointerEXT_t;
    DrawArraysEXT: _ALLEGRO_glDrawArraysEXT_t;
    EdgeFlagPointerEXT: _ALLEGRO_glEdgeFlagPointerEXT_t;
    GetPointervEXT: _ALLEGRO_glGetPointervEXT_t;
    IndexPointerEXT: _ALLEGRO_glIndexPointerEXT_t;
    NormalPointerEXT: _ALLEGRO_glNormalPointerEXT_t;
    TexCoordPointerEXT: _ALLEGRO_glTexCoordPointerEXT_t;
    VertexPointerEXT: _ALLEGRO_glVertexPointerEXT_t;
    BlendEquationEXT: _ALLEGRO_glBlendEquationEXT_t;
    SpriteParameterfSGIX: _ALLEGRO_glSpriteParameterfSGIX_t;
    SpriteParameterfvSGIX: _ALLEGRO_glSpriteParameterfvSGIX_t;
    SpriteParameteriSGIX: _ALLEGRO_glSpriteParameteriSGIX_t;
    SpriteParameterivSGIX: _ALLEGRO_glSpriteParameterivSGIX_t;
    PointParameterfEXT: _ALLEGRO_glPointParameterfEXT_t;
    PointParameterfvEXT: _ALLEGRO_glPointParameterfvEXT_t;
    PointParameterfSGIS: _ALLEGRO_glPointParameterfSGIS_t;
    PointParameterfvSGIS: _ALLEGRO_glPointParameterfvSGIS_t;
    GetInstrumentsSGIX: _ALLEGRO_glGetInstrumentsSGIX_t;
    InstrumentsBufferSGIX: _ALLEGRO_glInstrumentsBufferSGIX_t;
    PollInstrumentsSGIX: _ALLEGRO_glPollInstrumentsSGIX_t;
    ReadInstrumentsSGIX: _ALLEGRO_glReadInstrumentsSGIX_t;
    StartInstrumentsSGIX: _ALLEGRO_glStartInstrumentsSGIX_t;
    StopInstrumentsSGIX: _ALLEGRO_glStopInstrumentsSGIX_t;
    FrameZoomSGIX: _ALLEGRO_glFrameZoomSGIX_t;
    TagSampleBufferSGIX: _ALLEGRO_glTagSampleBufferSGIX_t;
    DeformationMap3dSGIX: _ALLEGRO_glDeformationMap3dSGIX_t;
    DeformationMap3fSGIX: _ALLEGRO_glDeformationMap3fSGIX_t;
    DeformSGIX: _ALLEGRO_glDeformSGIX_t;
    LoadIdentityDeformationMapSGIX: _ALLEGRO_glLoadIdentityDeformationMapSGIX_t;
    ReferencePlaneSGIX: _ALLEGRO_glReferencePlaneSGIX_t;
    FlushRasterSGIX: _ALLEGRO_glFlushRasterSGIX_t;
    FogFuncSGIS: _ALLEGRO_glFogFuncSGIS_t;
    GetFogFuncSGIS: _ALLEGRO_glGetFogFuncSGIS_t;
    ImageTransformParameteriHP: _ALLEGRO_glImageTransformParameteriHP_t;
    ImageTransformParameterfHP: _ALLEGRO_glImageTransformParameterfHP_t;
    ImageTransformParameterivHP: _ALLEGRO_glImageTransformParameterivHP_t;
    ImageTransformParameterfvHP: _ALLEGRO_glImageTransformParameterfvHP_t;
    GetImageTransformParameterivHP: _ALLEGRO_glGetImageTransformParameterivHP_t;
    GetImageTransformParameterfvHP: _ALLEGRO_glGetImageTransformParameterfvHP_t;
    CopyColorSubTableEXT: _ALLEGRO_glCopyColorSubTableEXT_t;
    HintPGI: _ALLEGRO_glHintPGI_t;
    ColorTableEXT: _ALLEGRO_glColorTableEXT_t;
    GetColorTableEXT: _ALLEGRO_glGetColorTableEXT_t;
    GetColorTableParameterivEXT: _ALLEGRO_glGetColorTableParameterivEXT_t;
    GetColorTableParameterfvEXT: _ALLEGRO_glGetColorTableParameterfvEXT_t;
    GetListParameterfvSGIX: _ALLEGRO_glGetListParameterfvSGIX_t;
    GetListParameterivSGIX: _ALLEGRO_glGetListParameterivSGIX_t;
    ListParameterfSGIX: _ALLEGRO_glListParameterfSGIX_t;
    ListParameterfvSGIX: _ALLEGRO_glListParameterfvSGIX_t;
    ListParameteriSGIX: _ALLEGRO_glListParameteriSGIX_t;
    ListParameterivSGIX: _ALLEGRO_glListParameterivSGIX_t;
    IndexMaterialEXT: _ALLEGRO_glIndexMaterialEXT_t;
    IndexFuncEXT: _ALLEGRO_glIndexFuncEXT_t;
    LockArraysEXT: _ALLEGRO_glLockArraysEXT_t;
    UnlockArraysEXT: _ALLEGRO_glUnlockArraysEXT_t;
    CullParameterdvEXT: _ALLEGRO_glCullParameterdvEXT_t;
    CullParameterfvEXT: _ALLEGRO_glCullParameterfvEXT_t;
    FragmentColorMaterialSGIX: _ALLEGRO_glFragmentColorMaterialSGIX_t;
    FragmentLightfSGIX: _ALLEGRO_glFragmentLightfSGIX_t;
    FragmentLightfvSGIX: _ALLEGRO_glFragmentLightfvSGIX_t;
    FragmentLightiSGIX: _ALLEGRO_glFragmentLightiSGIX_t;
    FragmentLightivSGIX: _ALLEGRO_glFragmentLightivSGIX_t;
    FragmentLightModelfSGIX: _ALLEGRO_glFragmentLightModelfSGIX_t;
    FragmentLightModelfvSGIX: _ALLEGRO_glFragmentLightModelfvSGIX_t;
    FragmentLightModeliSGIX: _ALLEGRO_glFragmentLightModeliSGIX_t;
    FragmentLightModelivSGIX: _ALLEGRO_glFragmentLightModelivSGIX_t;
    FragmentMaterialfSGIX: _ALLEGRO_glFragmentMaterialfSGIX_t;
    FragmentMaterialfvSGIX: _ALLEGRO_glFragmentMaterialfvSGIX_t;
    FragmentMaterialiSGIX: _ALLEGRO_glFragmentMaterialiSGIX_t;
    FragmentMaterialivSGIX: _ALLEGRO_glFragmentMaterialivSGIX_t;
    GetFragmentLightfvSGIX: _ALLEGRO_glGetFragmentLightfvSGIX_t;
    GetFragmentLightivSGIX: _ALLEGRO_glGetFragmentLightivSGIX_t;
    GetFragmentMaterialfvSGIX: _ALLEGRO_glGetFragmentMaterialfvSGIX_t;
    GetFragmentMaterialivSGIX: _ALLEGRO_glGetFragmentMaterialivSGIX_t;
    LightEnviSGIX: _ALLEGRO_glLightEnviSGIX_t;
    DrawRangeElementsEXT: _ALLEGRO_glDrawRangeElementsEXT_t;
    ApplyTextureEXT: _ALLEGRO_glApplyTextureEXT_t;
    TextureLightEXT: _ALLEGRO_glTextureLightEXT_t;
    TextureMaterialEXT: _ALLEGRO_glTextureMaterialEXT_t;
    AsyncMarkerSGIX: _ALLEGRO_glAsyncMarkerSGIX_t;
    FinishAsyncSGIX: _ALLEGRO_glFinishAsyncSGIX_t;
    PollAsyncSGIX: _ALLEGRO_glPollAsyncSGIX_t;
    GenAsyncMarkersSGIX: _ALLEGRO_glGenAsyncMarkersSGIX_t;
    DeleteAsyncMarkersSGIX: _ALLEGRO_glDeleteAsyncMarkersSGIX_t;
    IsAsyncMarkerSGIX: _ALLEGRO_glIsAsyncMarkerSGIX_t;
    VertexPointervINTEL: _ALLEGRO_glVertexPointervINTEL_t;
    NormalPointervINTEL: _ALLEGRO_glNormalPointervINTEL_t;
    ColorPointervINTEL: _ALLEGRO_glColorPointervINTEL_t;
    TexCoordPointervINTEL: _ALLEGRO_glTexCoordPointervINTEL_t;
    PixelTransformParameteriEXT: _ALLEGRO_glPixelTransformParameteriEXT_t;
    PixelTransformParameterfEXT: _ALLEGRO_glPixelTransformParameterfEXT_t;
    PixelTransformParameterivEXT: _ALLEGRO_glPixelTransformParameterivEXT_t;
    PixelTransformParameterfvEXT: _ALLEGRO_glPixelTransformParameterfvEXT_t;
    SecondaryColor3bEXT: _ALLEGRO_glSecondaryColor3bEXT_t;
    SecondaryColor3bvEXT: _ALLEGRO_glSecondaryColor3bvEXT_t;
    SecondaryColor3dEXT: _ALLEGRO_glSecondaryColor3dEXT_t;
    SecondaryColor3dvEXT: _ALLEGRO_glSecondaryColor3dvEXT_t;
    SecondaryColor3fEXT: _ALLEGRO_glSecondaryColor3fEXT_t;
    SecondaryColor3fvEXT: _ALLEGRO_glSecondaryColor3fvEXT_t;
    SecondaryColor3iEXT: _ALLEGRO_glSecondaryColor3iEXT_t;
    SecondaryColor3ivEXT: _ALLEGRO_glSecondaryColor3ivEXT_t;
    SecondaryColor3sEXT: _ALLEGRO_glSecondaryColor3sEXT_t;
    SecondaryColor3svEXT: _ALLEGRO_glSecondaryColor3svEXT_t;
    SecondaryColor3ubEXT: _ALLEGRO_glSecondaryColor3ubEXT_t;
    SecondaryColor3ubvEXT: _ALLEGRO_glSecondaryColor3ubvEXT_t;
    SecondaryColor3uiEXT: _ALLEGRO_glSecondaryColor3uiEXT_t;
    SecondaryColor3uivEXT: _ALLEGRO_glSecondaryColor3uivEXT_t;
    SecondaryColor3usEXT: _ALLEGRO_glSecondaryColor3usEXT_t;
    SecondaryColor3usvEXT: _ALLEGRO_glSecondaryColor3usvEXT_t;
    SecondaryColorPointerEXT: _ALLEGRO_glSecondaryColorPointerEXT_t;
    TextureNormalEXT: _ALLEGRO_glTextureNormalEXT_t;
    MultiDrawArraysEXT: _ALLEGRO_glMultiDrawArraysEXT_t;
    MultiDrawElementsEXT: _ALLEGRO_glMultiDrawElementsEXT_t;
    FogCoordfEXT: _ALLEGRO_glFogCoordfEXT_t;
    FogCoordfvEXT: _ALLEGRO_glFogCoordfvEXT_t;
    FogCoorddEXT: _ALLEGRO_glFogCoorddEXT_t;
    FogCoorddvEXT: _ALLEGRO_glFogCoorddvEXT_t;
    FogCoordPointerEXT: _ALLEGRO_glFogCoordPointerEXT_t;
    Tangent3bEXT: _ALLEGRO_glTangent3bEXT_t;
    Tangent3bvEXT: _ALLEGRO_glTangent3bvEXT_t;
    Tangent3dEXT: _ALLEGRO_glTangent3dEXT_t;
    Tangent3dvEXT: _ALLEGRO_glTangent3dvEXT_t;
    Tangent3fEXT: _ALLEGRO_glTangent3fEXT_t;
    Tangent3fvEXT: _ALLEGRO_glTangent3fvEXT_t;
    Tangent3iEXT: _ALLEGRO_glTangent3iEXT_t;
    Tangent3ivEXT: _ALLEGRO_glTangent3ivEXT_t;
    Tangent3sEXT: _ALLEGRO_glTangent3sEXT_t;
    Tangent3svEXT: _ALLEGRO_glTangent3svEXT_t;
    Binormal3bEXT: _ALLEGRO_glBinormal3bEXT_t;
    Binormal3bvEXT: _ALLEGRO_glBinormal3bvEXT_t;
    Binormal3dEXT: _ALLEGRO_glBinormal3dEXT_t;
    Binormal3dvEXT: _ALLEGRO_glBinormal3dvEXT_t;
    Binormal3fEXT: _ALLEGRO_glBinormal3fEXT_t;
    Binormal3fvEXT: _ALLEGRO_glBinormal3fvEXT_t;
    Binormal3iEXT: _ALLEGRO_glBinormal3iEXT_t;
    Binormal3ivEXT: _ALLEGRO_glBinormal3ivEXT_t;
    Binormal3sEXT: _ALLEGRO_glBinormal3sEXT_t;
    Binormal3svEXT: _ALLEGRO_glBinormal3svEXT_t;
    TangentPointerEXT: _ALLEGRO_glTangentPointerEXT_t;
    BinormalPointerEXT: _ALLEGRO_glBinormalPointerEXT_t;
    FinishTextureSUNX: _ALLEGRO_glFinishTextureSUNX_t;
    GlobalAlphaFactorbSUN: _ALLEGRO_glGlobalAlphaFactorbSUN_t;
    GlobalAlphaFactorsSUN: _ALLEGRO_glGlobalAlphaFactorsSUN_t;
    GlobalAlphaFactoriSUN: _ALLEGRO_glGlobalAlphaFactoriSUN_t;
    GlobalAlphaFactorfSUN: _ALLEGRO_glGlobalAlphaFactorfSUN_t;
    GlobalAlphaFactordSUN: _ALLEGRO_glGlobalAlphaFactordSUN_t;
    GlobalAlphaFactorubSUN: _ALLEGRO_glGlobalAlphaFactorubSUN_t;
    GlobalAlphaFactorusSUN: _ALLEGRO_glGlobalAlphaFactorusSUN_t;
    GlobalAlphaFactoruiSUN: _ALLEGRO_glGlobalAlphaFactoruiSUN_t;
    ReplacementCodeuiSUN: _ALLEGRO_glReplacementCodeuiSUN_t;
    ReplacementCodeusSUN: _ALLEGRO_glReplacementCodeusSUN_t;
    ReplacementCodeubSUN: _ALLEGRO_glReplacementCodeubSUN_t;
    ReplacementCodeuivSUN: _ALLEGRO_glReplacementCodeuivSUN_t;
    ReplacementCodeusvSUN: _ALLEGRO_glReplacementCodeusvSUN_t;
    ReplacementCodeubvSUN: _ALLEGRO_glReplacementCodeubvSUN_t;
    ReplacementCodePointerSUN: _ALLEGRO_glReplacementCodePointerSUN_t;
    Color4ubVertex2fSUN: _ALLEGRO_glColor4ubVertex2fSUN_t;
    Color4ubVertex2fvSUN: _ALLEGRO_glColor4ubVertex2fvSUN_t;
    Color4ubVertex3fSUN: _ALLEGRO_glColor4ubVertex3fSUN_t;
    Color4ubVertex3fvSUN: _ALLEGRO_glColor4ubVertex3fvSUN_t;
    Color3fVertex3fSUN: _ALLEGRO_glColor3fVertex3fSUN_t;
    Color3fVertex3fvSUN: _ALLEGRO_glColor3fVertex3fvSUN_t;
    Normal3fVertex3fSUN: _ALLEGRO_glNormal3fVertex3fSUN_t;
    Normal3fVertex3fvSUN: _ALLEGRO_glNormal3fVertex3fvSUN_t;
    Color4fNormal3fVertex3fSUN: _ALLEGRO_glColor4fNormal3fVertex3fSUN_t;
    Color4fNormal3fVertex3fvSUN: _ALLEGRO_glColor4fNormal3fVertex3fvSUN_t;
    TexCoord2fVertex3fSUN: _ALLEGRO_glTexCoord2fVertex3fSUN_t;
    TexCoord2fVertex3fvSUN: _ALLEGRO_glTexCoord2fVertex3fvSUN_t;
    TexCoord4fVertex4fSUN: _ALLEGRO_glTexCoord4fVertex4fSUN_t;
    TexCoord4fVertex4fvSUN: _ALLEGRO_glTexCoord4fVertex4fvSUN_t;
    TexCoord2fColor4ubVertex3fSUN: _ALLEGRO_glTexCoord2fColor4ubVertex3fSUN_t;
    TexCoord2fColor4ubVertex3fvSUN: _ALLEGRO_glTexCoord2fColor4ubVertex3fvSUN_t;
    TexCoord2fColor3fVertex3fSUN: _ALLEGRO_glTexCoord2fColor3fVertex3fSUN_t;
    TexCoord2fColor3fVertex3fvSUN: _ALLEGRO_glTexCoord2fColor3fVertex3fvSUN_t;
    TexCoord2fNormal3fVertex3fSUN: _ALLEGRO_glTexCoord2fNormal3fVertex3fSUN_t;
    TexCoord2fNormal3fVertex3fvSUN: _ALLEGRO_glTexCoord2fNormal3fVertex3fvSUN_t;
    TexCoord2fColor4fNormal3fVertex3fSUN: _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fSUN_t;
    TexCoord2fColor4fNormal3fVertex3fvSUN: _ALLEGRO_glTexCoord2fColor4fNormal3fVertex3fvSUN_t;
    TexCoord4fColor4fNormal3fVertex4fSUN: _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fSUN_t;
    TexCoord4fColor4fNormal3fVertex4fvSUN: _ALLEGRO_glTexCoord4fColor4fNormal3fVertex4fvSUN_t;
    ReplacementCodeuiVertex3fSUN: _ALLEGRO_glReplacementCodeuiVertex3fSUN_t;
    ReplacementCodeuiVertex3fvSUN: _ALLEGRO_glReplacementCodeuiVertex3fvSUN_t;
    ReplacementCodeuiColor4ubVertex3fSUN: _ALLEGRO_glReplacementCodeuiColor4ubVertex3fSUN_t;
    ReplacementCodeuiColor4ubVertex3fvSUN: _ALLEGRO_glReplacementCodeuiColor4ubVertex3fvSUN_t;
    ReplacementCodeuiColor3fVertex3fSUN: _ALLEGRO_glReplacementCodeuiColor3fVertex3fSUN_t;
    ReplacementCodeuiColor3fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiColor3fVertex3fvSUN_t;
    ReplacementCodeuiNormal3fVertex3fSUN: _ALLEGRO_glReplacementCodeuiNormal3fVertex3fSUN_t;
    ReplacementCodeuiNormal3fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiNormal3fVertex3fvSUN_t;
    ReplacementCodeuiColor4fNormal3fVertex3fSUN: _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fSUN_t;
    ReplacementCodeuiColor4fNormal3fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t;
    ReplacementCodeuiTexCoord2fVertex3fSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fSUN_t;
    ReplacementCodeuiTexCoord2fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fVertex3fvSUN_t;
    ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t;
    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t;
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t;
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: _ALLEGRO_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t;
    BlendFuncSeparateEXT: _ALLEGRO_glBlendFuncSeparateEXT_t;
    BlendFuncSeparateINGR: _ALLEGRO_glBlendFuncSeparateINGR_t;
    VertexWeightfEXT: _ALLEGRO_glVertexWeightfEXT_t;
    VertexWeightfvEXT: _ALLEGRO_glVertexWeightfvEXT_t;
    VertexWeightPointerEXT: _ALLEGRO_glVertexWeightPointerEXT_t;
    FlushVertexArrayRangeNV: _ALLEGRO_glFlushVertexArrayRangeNV_t;
    VertexArrayRangeNV: _ALLEGRO_glVertexArrayRangeNV_t;
    CombinerParameterfvNV: _ALLEGRO_glCombinerParameterfvNV_t;
    CombinerParameterfNV: _ALLEGRO_glCombinerParameterfNV_t;
    CombinerParameterivNV: _ALLEGRO_glCombinerParameterivNV_t;
    CombinerParameteriNV: _ALLEGRO_glCombinerParameteriNV_t;
    CombinerInputNV: _ALLEGRO_glCombinerInputNV_t;
    CombinerOutputNV: _ALLEGRO_glCombinerOutputNV_t;
    FinalCombinerInputNV: _ALLEGRO_glFinalCombinerInputNV_t;
    GetCombinerInputParameterfvNV: _ALLEGRO_glGetCombinerInputParameterfvNV_t;
    GetCombinerInputParameterivNV: _ALLEGRO_glGetCombinerInputParameterivNV_t;
    GetCombinerOutputParameterfvNV: _ALLEGRO_glGetCombinerOutputParameterfvNV_t;
    GetCombinerOutputParameterivNV: _ALLEGRO_glGetCombinerOutputParameterivNV_t;
    GetFinalCombinerInputParameterfvNV: _ALLEGRO_glGetFinalCombinerInputParameterfvNV_t;
    GetFinalCombinerInputParameterivNV: _ALLEGRO_glGetFinalCombinerInputParameterivNV_t;
    ResizeBuffersMESA: _ALLEGRO_glResizeBuffersMESA_t;
    WindowPos2dMESA: _ALLEGRO_glWindowPos2dMESA_t;
    WindowPos2dvMESA: _ALLEGRO_glWindowPos2dvMESA_t;
    WindowPos2fMESA: _ALLEGRO_glWindowPos2fMESA_t;
    WindowPos2fvMESA: _ALLEGRO_glWindowPos2fvMESA_t;
    WindowPos2iMESA: _ALLEGRO_glWindowPos2iMESA_t;
    WindowPos2ivMESA: _ALLEGRO_glWindowPos2ivMESA_t;
    WindowPos2sMESA: _ALLEGRO_glWindowPos2sMESA_t;
    WindowPos2svMESA: _ALLEGRO_glWindowPos2svMESA_t;
    WindowPos3dMESA: _ALLEGRO_glWindowPos3dMESA_t;
    WindowPos3dvMESA: _ALLEGRO_glWindowPos3dvMESA_t;
    WindowPos3fMESA: _ALLEGRO_glWindowPos3fMESA_t;
    WindowPos3fvMESA: _ALLEGRO_glWindowPos3fvMESA_t;
    WindowPos3iMESA: _ALLEGRO_glWindowPos3iMESA_t;
    WindowPos3ivMESA: _ALLEGRO_glWindowPos3ivMESA_t;
    WindowPos3sMESA: _ALLEGRO_glWindowPos3sMESA_t;
    WindowPos3svMESA: _ALLEGRO_glWindowPos3svMESA_t;
    WindowPos4dMESA: _ALLEGRO_glWindowPos4dMESA_t;
    WindowPos4dvMESA: _ALLEGRO_glWindowPos4dvMESA_t;
    WindowPos4fMESA: _ALLEGRO_glWindowPos4fMESA_t;
    WindowPos4fvMESA: _ALLEGRO_glWindowPos4fvMESA_t;
    WindowPos4iMESA: _ALLEGRO_glWindowPos4iMESA_t;
    WindowPos4ivMESA: _ALLEGRO_glWindowPos4ivMESA_t;
    WindowPos4sMESA: _ALLEGRO_glWindowPos4sMESA_t;
    WindowPos4svMESA: _ALLEGRO_glWindowPos4svMESA_t;
    MultiModeDrawArraysIBM: _ALLEGRO_glMultiModeDrawArraysIBM_t;
    MultiModeDrawElementsIBM: _ALLEGRO_glMultiModeDrawElementsIBM_t;
    TbufferMask3DFX: _ALLEGRO_glTbufferMask3DFX_t;
    SampleMaskEXT: _ALLEGRO_glSampleMaskEXT_t;
    SamplePatternEXT: _ALLEGRO_glSamplePatternEXT_t;
    TextureColorMaskSGIS: _ALLEGRO_glTextureColorMaskSGIS_t;
    IglooInterfaceSGIX: _ALLEGRO_glIglooInterfaceSGIX_t;
    DeleteFencesNV: _ALLEGRO_glDeleteFencesNV_t;
    GenFencesNV: _ALLEGRO_glGenFencesNV_t;
    IsFenceNV: _ALLEGRO_glIsFenceNV_t;
    TestFenceNV: _ALLEGRO_glTestFenceNV_t;
    GetFenceivNV: _ALLEGRO_glGetFenceivNV_t;
    FinishFenceNV: _ALLEGRO_glFinishFenceNV_t;
    SetFenceNV: _ALLEGRO_glSetFenceNV_t;
    MapControlPointsNV: _ALLEGRO_glMapControlPointsNV_t;
    MapParameterivNV: _ALLEGRO_glMapParameterivNV_t;
    MapParameterfvNV: _ALLEGRO_glMapParameterfvNV_t;
    GetMapControlPointsNV: _ALLEGRO_glGetMapControlPointsNV_t;
    GetMapParameterivNV: _ALLEGRO_glGetMapParameterivNV_t;
    GetMapParameterfvNV: _ALLEGRO_glGetMapParameterfvNV_t;
    GetMapAttribParameterivNV: _ALLEGRO_glGetMapAttribParameterivNV_t;
    GetMapAttribParameterfvNV: _ALLEGRO_glGetMapAttribParameterfvNV_t;
    EvalMapsNV: _ALLEGRO_glEvalMapsNV_t;
    CombinerStageParameterfvNV: _ALLEGRO_glCombinerStageParameterfvNV_t;
    GetCombinerStageParameterfvNV: _ALLEGRO_glGetCombinerStageParameterfvNV_t;
    AreProgramsResidentNV: _ALLEGRO_glAreProgramsResidentNV_t;
    BindProgramNV: _ALLEGRO_glBindProgramNV_t;
    DeleteProgramsNV: _ALLEGRO_glDeleteProgramsNV_t;
    ExecuteProgramNV: _ALLEGRO_glExecuteProgramNV_t;
    GenProgramsNV: _ALLEGRO_glGenProgramsNV_t;
    GetProgramParameterdvNV: _ALLEGRO_glGetProgramParameterdvNV_t;
    GetProgramParameterfvNV: _ALLEGRO_glGetProgramParameterfvNV_t;
    GetProgramivNV: _ALLEGRO_glGetProgramivNV_t;
    GetProgramStringNV: _ALLEGRO_glGetProgramStringNV_t;
    GetTrackMatrixivNV: _ALLEGRO_glGetTrackMatrixivNV_t;
    GetVertexAttribdvNV: _ALLEGRO_glGetVertexAttribdvNV_t;
    GetVertexAttribfvNV: _ALLEGRO_glGetVertexAttribfvNV_t;
    GetVertexAttribivNV: _ALLEGRO_glGetVertexAttribivNV_t;
    GetVertexAttribPointervNV: _ALLEGRO_glGetVertexAttribPointervNV_t;
    IsProgramNV: _ALLEGRO_glIsProgramNV_t;
    LoadProgramNV: _ALLEGRO_glLoadProgramNV_t;
    ProgramParameter4dNV: _ALLEGRO_glProgramParameter4dNV_t;
    ProgramParameter4dvNV: _ALLEGRO_glProgramParameter4dvNV_t;
    ProgramParameter4fNV: _ALLEGRO_glProgramParameter4fNV_t;
    ProgramParameter4fvNV: _ALLEGRO_glProgramParameter4fvNV_t;
    ProgramParameters4dvNV: _ALLEGRO_glProgramParameters4dvNV_t;
    ProgramParameters4fvNV: _ALLEGRO_glProgramParameters4fvNV_t;
    RequestResidentProgramsNV: _ALLEGRO_glRequestResidentProgramsNV_t;
    TrackMatrixNV: _ALLEGRO_glTrackMatrixNV_t;
    VertexAttribPointerNV: _ALLEGRO_glVertexAttribPointerNV_t;
    VertexAttrib1dNV: _ALLEGRO_glVertexAttrib1dNV_t;
    VertexAttrib1dvNV: _ALLEGRO_glVertexAttrib1dvNV_t;
    VertexAttrib1fNV: _ALLEGRO_glVertexAttrib1fNV_t;
    VertexAttrib1fvNV: _ALLEGRO_glVertexAttrib1fvNV_t;
    VertexAttrib1sNV: _ALLEGRO_glVertexAttrib1sNV_t;
    VertexAttrib1svNV: _ALLEGRO_glVertexAttrib1svNV_t;
    VertexAttrib2dNV: _ALLEGRO_glVertexAttrib2dNV_t;
    VertexAttrib2dvNV: _ALLEGRO_glVertexAttrib2dvNV_t;
    VertexAttrib2fNV: _ALLEGRO_glVertexAttrib2fNV_t;
    VertexAttrib2fvNV: _ALLEGRO_glVertexAttrib2fvNV_t;
    VertexAttrib2sNV: _ALLEGRO_glVertexAttrib2sNV_t;
    VertexAttrib2svNV: _ALLEGRO_glVertexAttrib2svNV_t;
    VertexAttrib3dNV: _ALLEGRO_glVertexAttrib3dNV_t;
    VertexAttrib3dvNV: _ALLEGRO_glVertexAttrib3dvNV_t;
    VertexAttrib3fNV: _ALLEGRO_glVertexAttrib3fNV_t;
    VertexAttrib3fvNV: _ALLEGRO_glVertexAttrib3fvNV_t;
    VertexAttrib3sNV: _ALLEGRO_glVertexAttrib3sNV_t;
    VertexAttrib3svNV: _ALLEGRO_glVertexAttrib3svNV_t;
    VertexAttrib4dNV: _ALLEGRO_glVertexAttrib4dNV_t;
    VertexAttrib4dvNV: _ALLEGRO_glVertexAttrib4dvNV_t;
    VertexAttrib4fNV: _ALLEGRO_glVertexAttrib4fNV_t;
    VertexAttrib4fvNV: _ALLEGRO_glVertexAttrib4fvNV_t;
    VertexAttrib4sNV: _ALLEGRO_glVertexAttrib4sNV_t;
    VertexAttrib4svNV: _ALLEGRO_glVertexAttrib4svNV_t;
    VertexAttrib4ubNV: _ALLEGRO_glVertexAttrib4ubNV_t;
    VertexAttrib4ubvNV: _ALLEGRO_glVertexAttrib4ubvNV_t;
    VertexAttribs1dvNV: _ALLEGRO_glVertexAttribs1dvNV_t;
    VertexAttribs1fvNV: _ALLEGRO_glVertexAttribs1fvNV_t;
    VertexAttribs1svNV: _ALLEGRO_glVertexAttribs1svNV_t;
    VertexAttribs2dvNV: _ALLEGRO_glVertexAttribs2dvNV_t;
    VertexAttribs2fvNV: _ALLEGRO_glVertexAttribs2fvNV_t;
    VertexAttribs2svNV: _ALLEGRO_glVertexAttribs2svNV_t;
    VertexAttribs3dvNV: _ALLEGRO_glVertexAttribs3dvNV_t;
    VertexAttribs3fvNV: _ALLEGRO_glVertexAttribs3fvNV_t;
    VertexAttribs3svNV: _ALLEGRO_glVertexAttribs3svNV_t;
    VertexAttribs4dvNV: _ALLEGRO_glVertexAttribs4dvNV_t;
    VertexAttribs4fvNV: _ALLEGRO_glVertexAttribs4fvNV_t;
    VertexAttribs4svNV: _ALLEGRO_glVertexAttribs4svNV_t;
    VertexAttribs4ubvNV: _ALLEGRO_glVertexAttribs4ubvNV_t;
    TexBumpParameterivATI: _ALLEGRO_glTexBumpParameterivATI_t;
    TexBumpParameterfvATI: _ALLEGRO_glTexBumpParameterfvATI_t;
    GetTexBumpParameterivATI: _ALLEGRO_glGetTexBumpParameterivATI_t;
    GetTexBumpParameterfvATI: _ALLEGRO_glGetTexBumpParameterfvATI_t;
    GenFragmentShadersATI: _ALLEGRO_glGenFragmentShadersATI_t;
    BindFragmentShaderATI: _ALLEGRO_glBindFragmentShaderATI_t;
    DeleteFragmentShaderATI: _ALLEGRO_glDeleteFragmentShaderATI_t;
    BeginFragmentShaderATI: _ALLEGRO_glBeginFragmentShaderATI_t;
    EndFragmentShaderATI: _ALLEGRO_glEndFragmentShaderATI_t;
    PassTexCoordATI: _ALLEGRO_glPassTexCoordATI_t;
    SampleMapATI: _ALLEGRO_glSampleMapATI_t;
    ColorFragmentOp1ATI: _ALLEGRO_glColorFragmentOp1ATI_t;
    ColorFragmentOp2ATI: _ALLEGRO_glColorFragmentOp2ATI_t;
    ColorFragmentOp3ATI: _ALLEGRO_glColorFragmentOp3ATI_t;
    AlphaFragmentOp1ATI: _ALLEGRO_glAlphaFragmentOp1ATI_t;
    AlphaFragmentOp2ATI: _ALLEGRO_glAlphaFragmentOp2ATI_t;
    AlphaFragmentOp3ATI: _ALLEGRO_glAlphaFragmentOp3ATI_t;
    SetFragmentShaderConstantATI: _ALLEGRO_glSetFragmentShaderConstantATI_t;
    PNTrianglesiATI: _ALLEGRO_glPNTrianglesiATI_t;
    PNTrianglesfATI: _ALLEGRO_glPNTrianglesfATI_t;
    NewObjectBufferATI: _ALLEGRO_glNewObjectBufferATI_t;
    IsObjectBufferATI: _ALLEGRO_glIsObjectBufferATI_t;
    UpdateObjectBufferATI: _ALLEGRO_glUpdateObjectBufferATI_t;
    GetObjectBufferfvATI: _ALLEGRO_glGetObjectBufferfvATI_t;
    GetObjectBufferivATI: _ALLEGRO_glGetObjectBufferivATI_t;
    FreeObjectBufferATI: _ALLEGRO_glFreeObjectBufferATI_t;
    ArrayObjectATI: _ALLEGRO_glArrayObjectATI_t;
    GetArrayObjectfvATI: _ALLEGRO_glGetArrayObjectfvATI_t;
    GetArrayObjectivATI: _ALLEGRO_glGetArrayObjectivATI_t;
    VariantArrayObjectATI: _ALLEGRO_glVariantArrayObjectATI_t;
    GetVariantArrayObjectfvATI: _ALLEGRO_glGetVariantArrayObjectfvATI_t;
    GetVariantArrayObjectivATI: _ALLEGRO_glGetVariantArrayObjectivATI_t;
    BeginVertexShaderEXT: _ALLEGRO_glBeginVertexShaderEXT_t;
    EndVertexShaderEXT: _ALLEGRO_glEndVertexShaderEXT_t;
    BindVertexShaderEXT: _ALLEGRO_glBindVertexShaderEXT_t;
    GenVertexShadersEXT: _ALLEGRO_glGenVertexShadersEXT_t;
    DeleteVertexShaderEXT: _ALLEGRO_glDeleteVertexShaderEXT_t;
    ShaderOp1EXT: _ALLEGRO_glShaderOp1EXT_t;
    ShaderOp2EXT: _ALLEGRO_glShaderOp2EXT_t;
    ShaderOp3EXT: _ALLEGRO_glShaderOp3EXT_t;
    SwizzleEXT: _ALLEGRO_glSwizzleEXT_t;
    WriteMaskEXT: _ALLEGRO_glWriteMaskEXT_t;
    InsertComponentEXT: _ALLEGRO_glInsertComponentEXT_t;
    ExtractComponentEXT: _ALLEGRO_glExtractComponentEXT_t;
    GenSymbolsEXT: _ALLEGRO_glGenSymbolsEXT_t;
    SetInvariantEXT: _ALLEGRO_glSetInvariantEXT_t;
    SetLocalConstantEXT: _ALLEGRO_glSetLocalConstantEXT_t;
    VariantbvEXT: _ALLEGRO_glVariantbvEXT_t;
    VariantsvEXT: _ALLEGRO_glVariantsvEXT_t;
    VariantivEXT: _ALLEGRO_glVariantivEXT_t;
    VariantfvEXT: _ALLEGRO_glVariantfvEXT_t;
    VariantdvEXT: _ALLEGRO_glVariantdvEXT_t;
    VariantubvEXT: _ALLEGRO_glVariantubvEXT_t;
    VariantusvEXT: _ALLEGRO_glVariantusvEXT_t;
    VariantuivEXT: _ALLEGRO_glVariantuivEXT_t;
    VariantPointerEXT: _ALLEGRO_glVariantPointerEXT_t;
    EnableVariantClientStateEXT: _ALLEGRO_glEnableVariantClientStateEXT_t;
    DisableVariantClientStateEXT: _ALLEGRO_glDisableVariantClientStateEXT_t;
    BindLightParameterEXT: _ALLEGRO_glBindLightParameterEXT_t;
    BindMaterialParameterEXT: _ALLEGRO_glBindMaterialParameterEXT_t;
    BindTexGenParameterEXT: _ALLEGRO_glBindTexGenParameterEXT_t;
    BindTextureUnitParameterEXT: _ALLEGRO_glBindTextureUnitParameterEXT_t;
    BindParameterEXT: _ALLEGRO_glBindParameterEXT_t;
    IsVariantEnabledEXT: _ALLEGRO_glIsVariantEnabledEXT_t;
    GetVariantBooleanvEXT: _ALLEGRO_glGetVariantBooleanvEXT_t;
    GetVariantIntegervEXT: _ALLEGRO_glGetVariantIntegervEXT_t;
    GetVariantFloatvEXT: _ALLEGRO_glGetVariantFloatvEXT_t;
    GetVariantPointervEXT: _ALLEGRO_glGetVariantPointervEXT_t;
    GetInvariantBooleanvEXT: _ALLEGRO_glGetInvariantBooleanvEXT_t;
    GetInvariantIntegervEXT: _ALLEGRO_glGetInvariantIntegervEXT_t;
    GetInvariantFloatvEXT: _ALLEGRO_glGetInvariantFloatvEXT_t;
    GetLocalConstantBooleanvEXT: _ALLEGRO_glGetLocalConstantBooleanvEXT_t;
    GetLocalConstantIntegervEXT: _ALLEGRO_glGetLocalConstantIntegervEXT_t;
    GetLocalConstantFloatvEXT: _ALLEGRO_glGetLocalConstantFloatvEXT_t;
    VertexStream1sATI: _ALLEGRO_glVertexStream1sATI_t;
    VertexStream1svATI: _ALLEGRO_glVertexStream1svATI_t;
    VertexStream1iATI: _ALLEGRO_glVertexStream1iATI_t;
    VertexStream1ivATI: _ALLEGRO_glVertexStream1ivATI_t;
    VertexStream1fATI: _ALLEGRO_glVertexStream1fATI_t;
    VertexStream1fvATI: _ALLEGRO_glVertexStream1fvATI_t;
    VertexStream1dATI: _ALLEGRO_glVertexStream1dATI_t;
    VertexStream1dvATI: _ALLEGRO_glVertexStream1dvATI_t;
    VertexStream2sATI: _ALLEGRO_glVertexStream2sATI_t;
    VertexStream2svATI: _ALLEGRO_glVertexStream2svATI_t;
    VertexStream2iATI: _ALLEGRO_glVertexStream2iATI_t;
    VertexStream2ivATI: _ALLEGRO_glVertexStream2ivATI_t;
    VertexStream2fATI: _ALLEGRO_glVertexStream2fATI_t;
    VertexStream2fvATI: _ALLEGRO_glVertexStream2fvATI_t;
    VertexStream2dATI: _ALLEGRO_glVertexStream2dATI_t;
    VertexStream2dvATI: _ALLEGRO_glVertexStream2dvATI_t;
    VertexStream3sATI: _ALLEGRO_glVertexStream3sATI_t;
    VertexStream3svATI: _ALLEGRO_glVertexStream3svATI_t;
    VertexStream3iATI: _ALLEGRO_glVertexStream3iATI_t;
    VertexStream3ivATI: _ALLEGRO_glVertexStream3ivATI_t;
    VertexStream3fATI: _ALLEGRO_glVertexStream3fATI_t;
    VertexStream3fvATI: _ALLEGRO_glVertexStream3fvATI_t;
    VertexStream3dATI: _ALLEGRO_glVertexStream3dATI_t;
    VertexStream3dvATI: _ALLEGRO_glVertexStream3dvATI_t;
    VertexStream4sATI: _ALLEGRO_glVertexStream4sATI_t;
    VertexStream4svATI: _ALLEGRO_glVertexStream4svATI_t;
    VertexStream4iATI: _ALLEGRO_glVertexStream4iATI_t;
    VertexStream4ivATI: _ALLEGRO_glVertexStream4ivATI_t;
    VertexStream4fATI: _ALLEGRO_glVertexStream4fATI_t;
    VertexStream4fvATI: _ALLEGRO_glVertexStream4fvATI_t;
    VertexStream4dATI: _ALLEGRO_glVertexStream4dATI_t;
    VertexStream4dvATI: _ALLEGRO_glVertexStream4dvATI_t;
    NormalStream3bATI: _ALLEGRO_glNormalStream3bATI_t;
    NormalStream3bvATI: _ALLEGRO_glNormalStream3bvATI_t;
    NormalStream3sATI: _ALLEGRO_glNormalStream3sATI_t;
    NormalStream3svATI: _ALLEGRO_glNormalStream3svATI_t;
    NormalStream3iATI: _ALLEGRO_glNormalStream3iATI_t;
    NormalStream3ivATI: _ALLEGRO_glNormalStream3ivATI_t;
    NormalStream3fATI: _ALLEGRO_glNormalStream3fATI_t;
    NormalStream3fvATI: _ALLEGRO_glNormalStream3fvATI_t;
    NormalStream3dATI: _ALLEGRO_glNormalStream3dATI_t;
    NormalStream3dvATI: _ALLEGRO_glNormalStream3dvATI_t;
    ClientActiveVertexStreamATI: _ALLEGRO_glClientActiveVertexStreamATI_t;
    VertexBlendEnviATI: _ALLEGRO_glVertexBlendEnviATI_t;
    VertexBlendEnvfATI: _ALLEGRO_glVertexBlendEnvfATI_t;
    ElementPointerATI: _ALLEGRO_glElementPointerATI_t;
    DrawElementArrayATI: _ALLEGRO_glDrawElementArrayATI_t;
    DrawRangeElementArrayATI: _ALLEGRO_glDrawRangeElementArrayATI_t;
    DrawMeshArraysSUN: _ALLEGRO_glDrawMeshArraysSUN_t;
    GenOcclusionQueriesNV: _ALLEGRO_glGenOcclusionQueriesNV_t;
    DeleteOcclusionQueriesNV: _ALLEGRO_glDeleteOcclusionQueriesNV_t;
    IsOcclusionQueryNV: _ALLEGRO_glIsOcclusionQueryNV_t;
    BeginOcclusionQueryNV: _ALLEGRO_glBeginOcclusionQueryNV_t;
    EndOcclusionQueryNV: _ALLEGRO_glEndOcclusionQueryNV_t;
    GetOcclusionQueryivNV: _ALLEGRO_glGetOcclusionQueryivNV_t;
    GetOcclusionQueryuivNV: _ALLEGRO_glGetOcclusionQueryuivNV_t;
    PointParameteriNV: _ALLEGRO_glPointParameteriNV_t;
    PointParameterivNV: _ALLEGRO_glPointParameterivNV_t;
    ActiveStencilFaceEXT: _ALLEGRO_glActiveStencilFaceEXT_t;
    ElementPointerAPPLE: _ALLEGRO_glElementPointerAPPLE_t;
    DrawElementArrayAPPLE: _ALLEGRO_glDrawElementArrayAPPLE_t;
    DrawRangeElementArrayAPPLE: _ALLEGRO_glDrawRangeElementArrayAPPLE_t;
    MultiDrawElementArrayAPPLE: _ALLEGRO_glMultiDrawElementArrayAPPLE_t;
    MultiDrawRangeElementArrayAPPLE: _ALLEGRO_glMultiDrawRangeElementArrayAPPLE_t;
    GenFencesAPPLE: _ALLEGRO_glGenFencesAPPLE_t;
    DeleteFencesAPPLE: _ALLEGRO_glDeleteFencesAPPLE_t;
    SetFenceAPPLE: _ALLEGRO_glSetFenceAPPLE_t;
    IsFenceAPPLE: _ALLEGRO_glIsFenceAPPLE_t;
    TestFenceAPPLE: _ALLEGRO_glTestFenceAPPLE_t;
    FinishFenceAPPLE: _ALLEGRO_glFinishFenceAPPLE_t;
    TestObjectAPPLE: _ALLEGRO_glTestObjectAPPLE_t;
    FinishObjectAPPLE: _ALLEGRO_glFinishObjectAPPLE_t;
    BindVertexArrayAPPLE: _ALLEGRO_glBindVertexArrayAPPLE_t;
    DeleteVertexArraysAPPLE: _ALLEGRO_glDeleteVertexArraysAPPLE_t;
    GenVertexArraysAPPLE: _ALLEGRO_glGenVertexArraysAPPLE_t;
    IsVertexArrayAPPLE: _ALLEGRO_glIsVertexArrayAPPLE_t;
    VertexArrayRangeAPPLE: _ALLEGRO_glVertexArrayRangeAPPLE_t;
    FlushVertexArrayRangeAPPLE: _ALLEGRO_glFlushVertexArrayRangeAPPLE_t;
    VertexArrayParameteriAPPLE: _ALLEGRO_glVertexArrayParameteriAPPLE_t;
    DrawBuffersATI: _ALLEGRO_glDrawBuffersATI_t;
    ProgramNamedParameter4fNV: _ALLEGRO_glProgramNamedParameter4fNV_t;
    ProgramNamedParameter4dNV: _ALLEGRO_glProgramNamedParameter4dNV_t;
    ProgramNamedParameter4fvNV: _ALLEGRO_glProgramNamedParameter4fvNV_t;
    ProgramNamedParameter4dvNV: _ALLEGRO_glProgramNamedParameter4dvNV_t;
    GetProgramNamedParameterfvNV: _ALLEGRO_glGetProgramNamedParameterfvNV_t;
    GetProgramNamedParameterdvNV: _ALLEGRO_glGetProgramNamedParameterdvNV_t;
    Vertex2hNV: _ALLEGRO_glVertex2hNV_t;
    Vertex2hvNV: _ALLEGRO_glVertex2hvNV_t;
    Vertex3hNV: _ALLEGRO_glVertex3hNV_t;
    Vertex3hvNV: _ALLEGRO_glVertex3hvNV_t;
    Vertex4hNV: _ALLEGRO_glVertex4hNV_t;
    Vertex4hvNV: _ALLEGRO_glVertex4hvNV_t;
    Normal3hNV: _ALLEGRO_glNormal3hNV_t;
    Normal3hvNV: _ALLEGRO_glNormal3hvNV_t;
    Color3hNV: _ALLEGRO_glColor3hNV_t;
    Color3hvNV: _ALLEGRO_glColor3hvNV_t;
    Color4hNV: _ALLEGRO_glColor4hNV_t;
    Color4hvNV: _ALLEGRO_glColor4hvNV_t;
    TexCoord1hNV: _ALLEGRO_glTexCoord1hNV_t;
    TexCoord1hvNV: _ALLEGRO_glTexCoord1hvNV_t;
    TexCoord2hNV: _ALLEGRO_glTexCoord2hNV_t;
    TexCoord2hvNV: _ALLEGRO_glTexCoord2hvNV_t;
    TexCoord3hNV: _ALLEGRO_glTexCoord3hNV_t;
    TexCoord3hvNV: _ALLEGRO_glTexCoord3hvNV_t;
    TexCoord4hNV: _ALLEGRO_glTexCoord4hNV_t;
    TexCoord4hvNV: _ALLEGRO_glTexCoord4hvNV_t;
    MultiTexCoord1hNV: _ALLEGRO_glMultiTexCoord1hNV_t;
    MultiTexCoord1hvNV: _ALLEGRO_glMultiTexCoord1hvNV_t;
    MultiTexCoord2hNV: _ALLEGRO_glMultiTexCoord2hNV_t;
    MultiTexCoord2hvNV: _ALLEGRO_glMultiTexCoord2hvNV_t;
    MultiTexCoord3hNV: _ALLEGRO_glMultiTexCoord3hNV_t;
    MultiTexCoord3hvNV: _ALLEGRO_glMultiTexCoord3hvNV_t;
    MultiTexCoord4hNV: _ALLEGRO_glMultiTexCoord4hNV_t;
    MultiTexCoord4hvNV: _ALLEGRO_glMultiTexCoord4hvNV_t;
    FogCoordhNV: _ALLEGRO_glFogCoordhNV_t;
    FogCoordhvNV: _ALLEGRO_glFogCoordhvNV_t;
    SecondaryColor3hNV: _ALLEGRO_glSecondaryColor3hNV_t;
    SecondaryColor3hvNV: _ALLEGRO_glSecondaryColor3hvNV_t;
    VertexWeighthNV: _ALLEGRO_glVertexWeighthNV_t;
    VertexWeighthvNV: _ALLEGRO_glVertexWeighthvNV_t;
    VertexAttrib1hNV: _ALLEGRO_glVertexAttrib1hNV_t;
    VertexAttrib1hvNV: _ALLEGRO_glVertexAttrib1hvNV_t;
    VertexAttrib2hNV: _ALLEGRO_glVertexAttrib2hNV_t;
    VertexAttrib2hvNV: _ALLEGRO_glVertexAttrib2hvNV_t;
    VertexAttrib3hNV: _ALLEGRO_glVertexAttrib3hNV_t;
    VertexAttrib3hvNV: _ALLEGRO_glVertexAttrib3hvNV_t;
    VertexAttrib4hNV: _ALLEGRO_glVertexAttrib4hNV_t;
    VertexAttrib4hvNV: _ALLEGRO_glVertexAttrib4hvNV_t;
    VertexAttribs1hvNV: _ALLEGRO_glVertexAttribs1hvNV_t;
    VertexAttribs2hvNV: _ALLEGRO_glVertexAttribs2hvNV_t;
    VertexAttribs3hvNV: _ALLEGRO_glVertexAttribs3hvNV_t;
    VertexAttribs4hvNV: _ALLEGRO_glVertexAttribs4hvNV_t;
    PixelDataRangeNV: _ALLEGRO_glPixelDataRangeNV_t;
    FlushPixelDataRangeNV: _ALLEGRO_glFlushPixelDataRangeNV_t;
    PrimitiveRestartNV: _ALLEGRO_glPrimitiveRestartNV_t;
    PrimitiveRestartIndexNV: _ALLEGRO_glPrimitiveRestartIndexNV_t;
    MapObjectBufferATI: _ALLEGRO_glMapObjectBufferATI_t;
    UnmapObjectBufferATI: _ALLEGRO_glUnmapObjectBufferATI_t;
    VertexAttribArrayObjectATI: _ALLEGRO_glVertexAttribArrayObjectATI_t;
    GetVertexAttribArrayObjectfvATI: _ALLEGRO_glGetVertexAttribArrayObjectfvATI_t;
    GetVertexAttribArrayObjectivATI: _ALLEGRO_glGetVertexAttribArrayObjectivATI_t;
    Vertex2bOES: _ALLEGRO_glVertex2bOES_t;
    Vertex3bOES: _ALLEGRO_glVertex3bOES_t;
    Vertex4bOES: _ALLEGRO_glVertex4bOES_t;
    Vertex2bvOES: _ALLEGRO_glVertex2bvOES_t;
    Vertex3bvOES: _ALLEGRO_glVertex3bvOES_t;
    Vertex4bvOES: _ALLEGRO_glVertex4bvOES_t;
    TexCoord1bOES: _ALLEGRO_glTexCoord1bOES_t;
    TexCoord2bOES: _ALLEGRO_glTexCoord2bOES_t;
    TexCoord3bOES: _ALLEGRO_glTexCoord3bOES_t;
    TexCoord4bOES: _ALLEGRO_glTexCoord4bOES_t;
    TexCoord1bvOES: _ALLEGRO_glTexCoord1bvOES_t;
    TexCoord2bvOES: _ALLEGRO_glTexCoord2bvOES_t;
    TexCoord3bvOES: _ALLEGRO_glTexCoord3bvOES_t;
    TexCoord4bvOES: _ALLEGRO_glTexCoord4bvOES_t;
    MultiTexCoord1bOES: _ALLEGRO_glMultiTexCoord1bOES_t;
    MultiTexCoord2bOES: _ALLEGRO_glMultiTexCoord2bOES_t;
    MultiTexCoord3bOES: _ALLEGRO_glMultiTexCoord3bOES_t;
    MultiTexCoord4bOES: _ALLEGRO_glMultiTexCoord4bOES_t;
    MultiTexCoord1bvOES: _ALLEGRO_glMultiTexCoord1bvOES_t;
    MultiTexCoord2bvOES: _ALLEGRO_glMultiTexCoord2bvOES_t;
    MultiTexCoord3bvOES: _ALLEGRO_glMultiTexCoord3bvOES_t;
    MultiTexCoord4bvOES: _ALLEGRO_glMultiTexCoord4bvOES_t;
    Vertex2xOES: _ALLEGRO_glVertex2xOES_t;
    Vertex3xOES: _ALLEGRO_glVertex3xOES_t;
    Vertex4xOES: _ALLEGRO_glVertex4xOES_t;
    Vertex2xvOES: _ALLEGRO_glVertex2xvOES_t;
    Vertex3xvOES: _ALLEGRO_glVertex3xvOES_t;
    Vertex4xvOES: _ALLEGRO_glVertex4xvOES_t;
    Normal3xOES: _ALLEGRO_glNormal3xOES_t;
    Normal3xvOES: _ALLEGRO_glNormal3xvOES_t;
    TexCoord1xOES: _ALLEGRO_glTexCoord1xOES_t;
    TexCoord2xOES: _ALLEGRO_glTexCoord2xOES_t;
    TexCoord3xOES: _ALLEGRO_glTexCoord3xOES_t;
    TexCoord4xOES: _ALLEGRO_glTexCoord4xOES_t;
    TexCoord1xvOES: _ALLEGRO_glTexCoord1xvOES_t;
    TexCoord2xvOES: _ALLEGRO_glTexCoord2xvOES_t;
    TexCoord3xvOES: _ALLEGRO_glTexCoord3xvOES_t;
    TexCoord4xvOES: _ALLEGRO_glTexCoord4xvOES_t;
    MultiTexCoord1xOES: _ALLEGRO_glMultiTexCoord1xOES_t;
    MultiTexCoord2xOES: _ALLEGRO_glMultiTexCoord2xOES_t;
    MultiTexCoord3xOES: _ALLEGRO_glMultiTexCoord3xOES_t;
    MultiTexCoord4xOES: _ALLEGRO_glMultiTexCoord4xOES_t;
    MultiTexCoord1xvOES: _ALLEGRO_glMultiTexCoord1xvOES_t;
    MultiTexCoord2xvOES: _ALLEGRO_glMultiTexCoord2xvOES_t;
    MultiTexCoord3xvOES: _ALLEGRO_glMultiTexCoord3xvOES_t;
    MultiTexCoord4xvOES: _ALLEGRO_glMultiTexCoord4xvOES_t;
    Color3xOES: _ALLEGRO_glColor3xOES_t;
    Color4xOES: _ALLEGRO_glColor4xOES_t;
    Color3xvOES: _ALLEGRO_glColor3xvOES_t;
    Color4xvOES: _ALLEGRO_glColor4xvOES_t;
    IndexxOES: _ALLEGRO_glIndexxOES_t;
    IndexxvOES: _ALLEGRO_glIndexxvOES_t;
    RectxOES: _ALLEGRO_glRectxOES_t;
    RectxvOES: _ALLEGRO_glRectxvOES_t;
    DepthRangexOES: _ALLEGRO_glDepthRangexOES_t;
    LoadMatrixxOES: _ALLEGRO_glLoadMatrixxOES_t;
    MultMatrixxOES: _ALLEGRO_glMultMatrixxOES_t;
    LoadTransposeMatrixxOES: _ALLEGRO_glLoadTransposeMatrixxOES_t;
    MultTransposeMatrixxOES: _ALLEGRO_glMultTransposeMatrixxOES_t;
    RotatexOES: _ALLEGRO_glRotatexOES_t;
    ScalexOES: _ALLEGRO_glScalexOES_t;
    TranslatexOES: _ALLEGRO_glTranslatexOES_t;
    FrustumxOES: _ALLEGRO_glFrustumxOES_t;
    OrthoxOES: _ALLEGRO_glOrthoxOES_t;
    TexGenxOES: _ALLEGRO_glTexGenxOES_t;
    TexGenxvOES: _ALLEGRO_glTexGenxvOES_t;
    GetTexGenxvOES: _ALLEGRO_glGetTexGenxvOES_t;
    ClipPlanexOES: _ALLEGRO_glClipPlanexOES_t;
    GetClipPlanexOES: _ALLEGRO_glGetClipPlanexOES_t;
    RasterPos2xOES: _ALLEGRO_glRasterPos2xOES_t;
    RasterPos3xOES: _ALLEGRO_glRasterPos3xOES_t;
    RasterPos4xOES: _ALLEGRO_glRasterPos4xOES_t;
    RasterPos2xvOES: _ALLEGRO_glRasterPos2xvOES_t;
    RasterPos3xvOES: _ALLEGRO_glRasterPos3xvOES_t;
    RasterPos4xvOES: _ALLEGRO_glRasterPos4xvOES_t;
    MaterialxOES: _ALLEGRO_glMaterialxOES_t;
    MaterialxvOES: _ALLEGRO_glMaterialxvOES_t;
    GetMaterialxOES: _ALLEGRO_glGetMaterialxOES_t;
    LightxOES: _ALLEGRO_glLightxOES_t;
    LightxvOES: _ALLEGRO_glLightxvOES_t;
    GetLightxOES: _ALLEGRO_glGetLightxOES_t;
    LightModelxOES: _ALLEGRO_glLightModelxOES_t;
    LightModelxvOES: _ALLEGRO_glLightModelxvOES_t;
    PointSizexOES: _ALLEGRO_glPointSizexOES_t;
    LineWidthxOES: _ALLEGRO_glLineWidthxOES_t;
    PolygonOffsetxOES: _ALLEGRO_glPolygonOffsetxOES_t;
    PixelStorex: _ALLEGRO_glPixelStorex_t;
    PixelTransferxOES: _ALLEGRO_glPixelTransferxOES_t;
    PixelMapx: _ALLEGRO_glPixelMapx_t;
    GetPixelMapxv: _ALLEGRO_glGetPixelMapxv_t;
    ConvolutionParameterxOES: _ALLEGRO_glConvolutionParameterxOES_t;
    ConvolutionParameterxvOES: _ALLEGRO_glConvolutionParameterxvOES_t;
    GetConvolutionParameterxvOES: _ALLEGRO_glGetConvolutionParameterxvOES_t;
    GetHistogramParameterxvOES: _ALLEGRO_glGetHistogramParameterxvOES_t;
    PixelZoomxOES: _ALLEGRO_glPixelZoomxOES_t;
    BitmapxOES: _ALLEGRO_glBitmapxOES_t;
    TexParameterxOES: _ALLEGRO_glTexParameterxOES_t;
    TexParameterxvOES: _ALLEGRO_glTexParameterxvOES_t;
    GetTexParameterxvOES: _ALLEGRO_glGetTexParameterxvOES_t;
    GetTexLevelParameterxvOES: _ALLEGRO_glGetTexLevelParameterxvOES_t;
    PrioritizeTexturesxOES: _ALLEGRO_glPrioritizeTexturesxOES_t;
    TexEnvxOES: _ALLEGRO_glTexEnvxOES_t;
    TexEnvxvOES: _ALLEGRO_glTexEnvxvOES_t;
    GetTexEnvxvOES: _ALLEGRO_glGetTexEnvxvOES_t;
    FogxOES: _ALLEGRO_glFogxOES_t;
    FogxvOES: _ALLEGRO_glFogxvOES_t;
    SampleCoverageOES: _ALLEGRO_glSampleCoverageOES_t;
    AlphaFuncxOES: _ALLEGRO_glAlphaFuncxOES_t;
    BlendColorxOES: _ALLEGRO_glBlendColorxOES_t;
    ClearColorxOES: _ALLEGRO_glClearColorxOES_t;
    ClearDepthxOES: _ALLEGRO_glClearDepthxOES_t;
    ClearAccumxOES: _ALLEGRO_glClearAccumxOES_t;
    AccumxOES: _ALLEGRO_glAccumxOES_t;
    Map1xOES: _ALLEGRO_glMap1xOES_t;
    Map2xOES: _ALLEGRO_glMap2xOES_t;
    MapGrid1xOES: _ALLEGRO_glMapGrid1xOES_t;
    MapGrid2xOES: _ALLEGRO_glMapGrid2xOES_t;
    GetMapxvOES: _ALLEGRO_glGetMapxvOES_t;
    EvalCoord1xOES: _ALLEGRO_glEvalCoord1xOES_t;
    EvalCoord2xOES: _ALLEGRO_glEvalCoord2xOES_t;
    EvalCoord1xvOES: _ALLEGRO_glEvalCoord1xvOES_t;
    EvalCoord2xvOES: _ALLEGRO_glEvalCoord2xvOES_t;
    FeedbackBufferxOES: _ALLEGRO_glFeedbackBufferxOES_t;
    PassThroughxOES: _ALLEGRO_glPassThroughxOES_t;
    GetFixedvOES: _ALLEGRO_glGetFixedvOES_t;
    DepthRangefOES: _ALLEGRO_glDepthRangefOES_t;
    FrustumfOES: _ALLEGRO_glFrustumfOES_t;
    OrthofOES: _ALLEGRO_glOrthofOES_t;
    ClipPlanefOES: _ALLEGRO_glClipPlanefOES_t;
    GetClipPlanefOES: _ALLEGRO_glGetClipPlanefOES_t;
    ClearDepthfOES: _ALLEGRO_glClearDepthfOES_t;
    QueryMatrixxOES: _ALLEGRO_glQueryMatrixxOES_t;
    DepthBoundsEXT: _ALLEGRO_glDepthBoundsEXT_t;
    BlendEquationSeparateEXT: _ALLEGRO_glBlendEquationSeparateEXT_t;
    IsRenderbufferEXT: _ALLEGRO_glIsRenderbufferEXT_t;
    BindRenderbufferEXT: _ALLEGRO_glBindRenderbufferEXT_t;
    DeleteRenderbuffersEXT: _ALLEGRO_glDeleteRenderbuffersEXT_t;
    GenRenderbuffersEXT: _ALLEGRO_glGenRenderbuffersEXT_t;
    RenderbufferStorageEXT: _ALLEGRO_glRenderbufferStorageEXT_t;
    GetRenderbufferParameterivEXT: _ALLEGRO_glGetRenderbufferParameterivEXT_t;
    IsFramebufferEXT: _ALLEGRO_glIsFramebufferEXT_t;
    BindFramebufferEXT: _ALLEGRO_glBindFramebufferEXT_t;
    DeleteFramebuffersEXT: _ALLEGRO_glDeleteFramebuffersEXT_t;
    GenFramebuffersEXT: _ALLEGRO_glGenFramebuffersEXT_t;
    CheckFramebufferStatusEXT: _ALLEGRO_glCheckFramebufferStatusEXT_t;
    FramebufferTexture1DEXT: _ALLEGRO_glFramebufferTexture1DEXT_t;
    FramebufferTexture2DEXT: _ALLEGRO_glFramebufferTexture2DEXT_t;
    FramebufferTexture3DEXT: _ALLEGRO_glFramebufferTexture3DEXT_t;
    FramebufferRenderbufferEXT: _ALLEGRO_glFramebufferRenderbufferEXT_t;
    GetFramebufferAttachmentParameterivEXT: _ALLEGRO_glGetFramebufferAttachmentParameterivEXT_t;
    GenerateMipmapEXT: _ALLEGRO_glGenerateMipmapEXT_t;
    StringMarkerGREMEDY: _ALLEGRO_glStringMarkerGREMEDY_t;
    StencilClearTagEXT: _ALLEGRO_glStencilClearTagEXT_t;
    BlitFramebufferEXT: _ALLEGRO_glBlitFramebufferEXT_t;
    RenderbufferStorageMultisampleEXT: _ALLEGRO_glRenderbufferStorageMultisampleEXT_t;
    GetQueryObjecti64vEXT: _ALLEGRO_glGetQueryObjecti64vEXT_t;
    GetQueryObjectui64vEXT: _ALLEGRO_glGetQueryObjectui64vEXT_t;
    ProgramEnvParameters4fvEXT: _ALLEGRO_glProgramEnvParameters4fvEXT_t;
    ProgramLocalParameters4fvEXT: _ALLEGRO_glProgramLocalParameters4fvEXT_t;
    BufferParameteriAPPLE: _ALLEGRO_glBufferParameteriAPPLE_t;
    FlushMappedBufferRangeAPPLE: _ALLEGRO_glFlushMappedBufferRangeAPPLE_t;
    UniformBufferEXT: _ALLEGRO_glUniformBufferEXT_t;
    GetUniformBufferSizeEXT: _ALLEGRO_glGetUniformBufferSizeEXT_t;
    GetUniformOffsetEXT: _ALLEGRO_glGetUniformOffsetEXT_t;
    ColorMaskIndexedEXT: _ALLEGRO_glColorMaskIndexedEXT_t;
    GetBooleanIndexedvEXT: _ALLEGRO_glGetBooleanIndexedvEXT_t;
    GetIntegerIndexedvEXT: _ALLEGRO_glGetIntegerIndexedvEXT_t;
    EnableIndexedEXT: _ALLEGRO_glEnableIndexedEXT_t;
    DisableIndexedEXT: _ALLEGRO_glDisableIndexedEXT_t;
    IsEnabledIndexedEXT: _ALLEGRO_glIsEnabledIndexedEXT_t;
    DrawArraysInstancedEXT: _ALLEGRO_glDrawArraysInstancedEXT_t;
    DrawElementsInstancedEXT: _ALLEGRO_glDrawElementsInstancedEXT_t;
    ProgramParameteriEXT: _ALLEGRO_glProgramParameteriEXT_t;
    FramebufferTextureEXT: _ALLEGRO_glFramebufferTextureEXT_t;
    FramebufferTextureFaceEXT: _ALLEGRO_glFramebufferTextureFaceEXT_t;
    VertexAttribI1iEXT: _ALLEGRO_glVertexAttribI1iEXT_t;
    VertexAttribI2iEXT: _ALLEGRO_glVertexAttribI2iEXT_t;
    VertexAttribI3iEXT: _ALLEGRO_glVertexAttribI3iEXT_t;
    VertexAttribI4iEXT: _ALLEGRO_glVertexAttribI4iEXT_t;
    VertexAttribI1uiEXT: _ALLEGRO_glVertexAttribI1uiEXT_t;
    VertexAttribI2uiEXT: _ALLEGRO_glVertexAttribI2uiEXT_t;
    VertexAttribI3uiEXT: _ALLEGRO_glVertexAttribI3uiEXT_t;
    VertexAttribI4uiEXT: _ALLEGRO_glVertexAttribI4uiEXT_t;
    VertexAttribI1ivEXT: _ALLEGRO_glVertexAttribI1ivEXT_t;
    VertexAttribI2ivEXT: _ALLEGRO_glVertexAttribI2ivEXT_t;
    VertexAttribI3ivEXT: _ALLEGRO_glVertexAttribI3ivEXT_t;
    VertexAttribI4ivEXT: _ALLEGRO_glVertexAttribI4ivEXT_t;
    VertexAttribI1uivEXT: _ALLEGRO_glVertexAttribI1uivEXT_t;
    VertexAttribI2uivEXT: _ALLEGRO_glVertexAttribI2uivEXT_t;
    VertexAttribI3uivEXT: _ALLEGRO_glVertexAttribI3uivEXT_t;
    VertexAttribI4uivEXT: _ALLEGRO_glVertexAttribI4uivEXT_t;
    VertexAttribI4bvEXT: _ALLEGRO_glVertexAttribI4bvEXT_t;
    VertexAttribI4svEXT: _ALLEGRO_glVertexAttribI4svEXT_t;
    VertexAttribI4ubvEXT: _ALLEGRO_glVertexAttribI4ubvEXT_t;
    VertexAttribI4usvEXT: _ALLEGRO_glVertexAttribI4usvEXT_t;
    VertexAttribIPointerEXT: _ALLEGRO_glVertexAttribIPointerEXT_t;
    GetVertexAttribIivEXT: _ALLEGRO_glGetVertexAttribIivEXT_t;
    GetVertexAttribIuivEXT: _ALLEGRO_glGetVertexAttribIuivEXT_t;
    Uniform1uiEXT: _ALLEGRO_glUniform1uiEXT_t;
    Uniform2uiEXT: _ALLEGRO_glUniform2uiEXT_t;
    Uniform3uiEXT: _ALLEGRO_glUniform3uiEXT_t;
    Uniform4uiEXT: _ALLEGRO_glUniform4uiEXT_t;
    Uniform1uivEXT: _ALLEGRO_glUniform1uivEXT_t;
    Uniform2uivEXT: _ALLEGRO_glUniform2uivEXT_t;
    Uniform3uivEXT: _ALLEGRO_glUniform3uivEXT_t;
    Uniform4uivEXT: _ALLEGRO_glUniform4uivEXT_t;
    GetUniformuivEXT: _ALLEGRO_glGetUniformuivEXT_t;
    BindFragDataLocationEXT: _ALLEGRO_glBindFragDataLocationEXT_t;
    GetFragDataLocationEXT: _ALLEGRO_glGetFragDataLocationEXT_t;
    FramebufferTextureLayerEXT: _ALLEGRO_glFramebufferTextureLayerEXT_t;
    TexBufferEXT: _ALLEGRO_glTexBufferEXT_t;
    DepthRangedNV: _ALLEGRO_glDepthRangedNV_t;
    ClearDepthdNV: _ALLEGRO_glClearDepthdNV_t;
    DepthBoundsdNV: _ALLEGRO_glDepthBoundsdNV_t;
    RenderbufferStorageMultsampleCoverageNV: _ALLEGRO_glRenderbufferStorageMultsampleCoverageNV_t;
    ProgramVertexLimitNV: _ALLEGRO_glProgramVertexLimitNV_t;
    ProgramLocalParameterI4iNV: _ALLEGRO_glProgramLocalParameterI4iNV_t;
    ProgramLocalParameterI4ivNV: _ALLEGRO_glProgramLocalParameterI4ivNV_t;
    ProgramLocalParametersI4ivNV: _ALLEGRO_glProgramLocalParametersI4ivNV_t;
    ProgramLocalParameterI4uiNV: _ALLEGRO_glProgramLocalParameterI4uiNV_t;
    ProgramLocalParameterI4uivNV: _ALLEGRO_glProgramLocalParameterI4uivNV_t;
    ProgramLocalParametersI4uivNV: _ALLEGRO_glProgramLocalParametersI4uivNV_t;
    ProgramEnvParameterI4iNV: _ALLEGRO_glProgramEnvParameterI4iNV_t;
    ProgramEnvParameterI4ivNV: _ALLEGRO_glProgramEnvParameterI4ivNV_t;
    ProgramEnvParametersI4ivNV: _ALLEGRO_glProgramEnvParametersI4ivNV_t;
    ProgramEnvParameterI4uiNV: _ALLEGRO_glProgramEnvParameterI4uiNV_t;
    ProgramEnvParameterI4uivNV: _ALLEGRO_glProgramEnvParameterI4uivNV_t;
    ProgramEnvParametersI4uivNV: _ALLEGRO_glProgramEnvParametersI4uivNV_t;
    GetProgramLocalParameterIivNV: _ALLEGRO_glGetProgramLocalParameterIivNV_t;
    GetProgramLocalParameterIuivNV: _ALLEGRO_glGetProgramLocalParameterIuivNV_t;
    GetProgramEnvParameterIivNV: _ALLEGRO_glGetProgramEnvParameterIivNV_t;
    GetProgramEnvParameterIuivNV: _ALLEGRO_glGetProgramEnvParameterIuivNV_t;
    ProgramBufferParametersfvNV: _ALLEGRO_glProgramBufferParametersfvNV_t;
    ProgramBufferParametersIivNV: _ALLEGRO_glProgramBufferParametersIivNV_t;
    ProgramBufferParametersIuivNV: _ALLEGRO_glProgramBufferParametersIuivNV_t;
    BindBufferRangeNV: _ALLEGRO_glBindBufferRangeNV_t;
    BindBufferOffsetNV: _ALLEGRO_glBindBufferOffsetNV_t;
    BindBufferBaseNV: _ALLEGRO_glBindBufferBaseNV_t;
    TransformFeedbackAttribsNV: _ALLEGRO_glTransformFeedbackAttribsNV_t;
    TransformFeedbackVaryingsNV: _ALLEGRO_glTransformFeedbackVaryingsNV_t;
    BeginTransformFeedbackNV: _ALLEGRO_glBeginTransformFeedbackNV_t;
    EndTransformFeedbackNV: _ALLEGRO_glEndTransformFeedbackNV_t;
    GetVaryingLocationNV: _ALLEGRO_glGetVaryingLocationNV_t;
    GetActiveVaryingNV: _ALLEGRO_glGetActiveVaryingNV_t;
    ActiveVaryingNV: _ALLEGRO_glActiveVaryingNV_t;
    GetTransformFeedbackVaryingNV: _ALLEGRO_glGetTransformFeedbackVaryingNV_t;
    FrameTerminatorGREMEDY: _ALLEGRO_glFrameTerminatorGREMEDY_t;
    BeginConditionalRenderNV: _ALLEGRO_glBeginConditionalRenderNV_t;
    EndConditionalRenderNV: _ALLEGRO_glEndConditionalRenderNV_t;
    BeginTransformFeedbackEXT: _ALLEGRO_glBeginTransformFeedbackEXT_t;
    EndTransformFeedbackEXT: _ALLEGRO_glEndTransformFeedbackEXT_t;
    BindBufferRangeEXT: _ALLEGRO_glBindBufferRangeEXT_t;
    BindBufferOffsetEXT: _ALLEGRO_glBindBufferOffsetEXT_t;
    BindBufferBaseEXT: _ALLEGRO_glBindBufferBaseEXT_t;
    TransformFeedbackVaryingsEXT: _ALLEGRO_glTransformFeedbackVaryingsEXT_t;
    GetTransformFeedbackVaryingEXT: _ALLEGRO_glGetTransformFeedbackVaryingEXT_t;
    ClientAttribDefaultEXT: _ALLEGRO_glClientAttribDefaultEXT_t;
    PushClientAttribDefaultEXT: _ALLEGRO_glPushClientAttribDefaultEXT_t;
    MatrixLoadfEXT: _ALLEGRO_glMatrixLoadfEXT_t;
    MatrixLoaddEXT: _ALLEGRO_glMatrixLoaddEXT_t;
    MatrixMultfEXT: _ALLEGRO_glMatrixMultfEXT_t;
    MatrixMultdEXT: _ALLEGRO_glMatrixMultdEXT_t;
    MatrixLoadIdentityEXT: _ALLEGRO_glMatrixLoadIdentityEXT_t;
    MatrixRotatefEXT: _ALLEGRO_glMatrixRotatefEXT_t;
    MatrixRotatedEXT: _ALLEGRO_glMatrixRotatedEXT_t;
    MatrixScalefEXT: _ALLEGRO_glMatrixScalefEXT_t;
    MatrixScaledEXT: _ALLEGRO_glMatrixScaledEXT_t;
    MatrixTranslatefEXT: _ALLEGRO_glMatrixTranslatefEXT_t;
    MatrixTranslatedEXT: _ALLEGRO_glMatrixTranslatedEXT_t;
    MatrixFrustumEXT: _ALLEGRO_glMatrixFrustumEXT_t;
    MatrixOrthoEXT: _ALLEGRO_glMatrixOrthoEXT_t;
    MatrixPopEXT: _ALLEGRO_glMatrixPopEXT_t;
    MatrixPushEXT: _ALLEGRO_glMatrixPushEXT_t;
    MatrixLoadTransposefEXT: _ALLEGRO_glMatrixLoadTransposefEXT_t;
    MatrixLoadTransposedEXT: _ALLEGRO_glMatrixLoadTransposedEXT_t;
    MatrixMultTransposefEXT: _ALLEGRO_glMatrixMultTransposefEXT_t;
    MatrixMultTransposedEXT: _ALLEGRO_glMatrixMultTransposedEXT_t;
    TextureParameterfEXT: _ALLEGRO_glTextureParameterfEXT_t;
    TextureParameterfvEXT: _ALLEGRO_glTextureParameterfvEXT_t;
    TextureParameteriEXT: _ALLEGRO_glTextureParameteriEXT_t;
    TextureParameterivEXT: _ALLEGRO_glTextureParameterivEXT_t;
    TextureImage1DEXT: _ALLEGRO_glTextureImage1DEXT_t;
    TextureImage2DEXT: _ALLEGRO_glTextureImage2DEXT_t;
    TextureSubImage1DEXT: _ALLEGRO_glTextureSubImage1DEXT_t;
    TextureSubImage2DEXT: _ALLEGRO_glTextureSubImage2DEXT_t;
    CopyTextureImage1DEXT: _ALLEGRO_glCopyTextureImage1DEXT_t;
    CopyTextureImage2DEXT: _ALLEGRO_glCopyTextureImage2DEXT_t;
    CopyTextureSubImage1DEXT: _ALLEGRO_glCopyTextureSubImage1DEXT_t;
    CopyTextureSubImage2DEXT: _ALLEGRO_glCopyTextureSubImage2DEXT_t;
    GetTextureImageEXT: _ALLEGRO_glGetTextureImageEXT_t;
    GetTextureParameterfvEXT: _ALLEGRO_glGetTextureParameterfvEXT_t;
    GetTextureParameterivEXT: _ALLEGRO_glGetTextureParameterivEXT_t;
    GetTextureLevelParameterfvEXT: _ALLEGRO_glGetTextureLevelParameterfvEXT_t;
    GetTextureLevelParameterivEXT: _ALLEGRO_glGetTextureLevelParameterivEXT_t;
    TextureImage3DEXT: _ALLEGRO_glTextureImage3DEXT_t;
    TextureSubImage3DEXT: _ALLEGRO_glTextureSubImage3DEXT_t;
    CopyTextureSubImage3DEXT: _ALLEGRO_glCopyTextureSubImage3DEXT_t;
    MultiTexParameterfEXT: _ALLEGRO_glMultiTexParameterfEXT_t;
    MultiTexParameterfvEXT: _ALLEGRO_glMultiTexParameterfvEXT_t;
    MultiTexParameteriEXT: _ALLEGRO_glMultiTexParameteriEXT_t;
    MultiTexParameterivEXT: _ALLEGRO_glMultiTexParameterivEXT_t;
    MultiTexImage1DEXT: _ALLEGRO_glMultiTexImage1DEXT_t;
    MultiTexImage2DEXT: _ALLEGRO_glMultiTexImage2DEXT_t;
    MultiTexSubImage1DEXT: _ALLEGRO_glMultiTexSubImage1DEXT_t;
    MultiTexSubImage2DEXT: _ALLEGRO_glMultiTexSubImage2DEXT_t;
    CopyMultiTexImage1DEXT: _ALLEGRO_glCopyMultiTexImage1DEXT_t;
    CopyMultiTexImage2DEXT: _ALLEGRO_glCopyMultiTexImage2DEXT_t;
    CopyMultiTexSubImage1DEXT: _ALLEGRO_glCopyMultiTexSubImage1DEXT_t;
    CopyMultiTexSubImage2DEXT: _ALLEGRO_glCopyMultiTexSubImage2DEXT_t;
    GetMultiTexImageEXT: _ALLEGRO_glGetMultiTexImageEXT_t;
    GetMultiTexParameterfvEXT: _ALLEGRO_glGetMultiTexParameterfvEXT_t;
    GetMultiTexParameterivEXT: _ALLEGRO_glGetMultiTexParameterivEXT_t;
    GetMultiTexLevelParameterfvEXT: _ALLEGRO_glGetMultiTexLevelParameterfvEXT_t;
    GetMultiTexLevelParameterivEXT: _ALLEGRO_glGetMultiTexLevelParameterivEXT_t;
    MultiTexImage3DEXT: _ALLEGRO_glMultiTexImage3DEXT_t;
    MultiTexSubImage3DEXT: _ALLEGRO_glMultiTexSubImage3DEXT_t;
    CopyMultiTexSubImage3DEXT: _ALLEGRO_glCopyMultiTexSubImage3DEXT_t;
    BindMultiTextureEXT: _ALLEGRO_glBindMultiTextureEXT_t;
    EnableClientStateIndexedEXT: _ALLEGRO_glEnableClientStateIndexedEXT_t;
    DisableClientStateIndexedEXT: _ALLEGRO_glDisableClientStateIndexedEXT_t;
    MultiTexCoordPointerEXT: _ALLEGRO_glMultiTexCoordPointerEXT_t;
    MultiTexEnvfEXT: _ALLEGRO_glMultiTexEnvfEXT_t;
    MultiTexEnvfvEXT: _ALLEGRO_glMultiTexEnvfvEXT_t;
    MultiTexEnviEXT: _ALLEGRO_glMultiTexEnviEXT_t;
    MultiTexEnvivEXT: _ALLEGRO_glMultiTexEnvivEXT_t;
    MultiTexGendEXT: _ALLEGRO_glMultiTexGendEXT_t;
    MultiTexGendvEXT: _ALLEGRO_glMultiTexGendvEXT_t;
    MultiTexGenfEXT: _ALLEGRO_glMultiTexGenfEXT_t;
    MultiTexGenfvEXT: _ALLEGRO_glMultiTexGenfvEXT_t;
    MultiTexGeniEXT: _ALLEGRO_glMultiTexGeniEXT_t;
    MultiTexGenivEXT: _ALLEGRO_glMultiTexGenivEXT_t;
    GetMultiTexEnvfvEXT: _ALLEGRO_glGetMultiTexEnvfvEXT_t;
    GetMultiTexEnvivEXT: _ALLEGRO_glGetMultiTexEnvivEXT_t;
    GetMultiTexGendvEXT: _ALLEGRO_glGetMultiTexGendvEXT_t;
    GetMultiTexGenfvEXT: _ALLEGRO_glGetMultiTexGenfvEXT_t;
    GetMultiTexGenivEXT: _ALLEGRO_glGetMultiTexGenivEXT_t;
    GetFloatIndexedvEXT: _ALLEGRO_glGetFloatIndexedvEXT_t;
    GetDoubleIndexedvEXT: _ALLEGRO_glGetDoubleIndexedvEXT_t;
    GetPointerIndexedvEXT: _ALLEGRO_glGetPointerIndexedvEXT_t;
    CompressedTextureImage3DEXT: _ALLEGRO_glCompressedTextureImage3DEXT_t;
    CompressedTextureImage2DEXT: _ALLEGRO_glCompressedTextureImage2DEXT_t;
    CompressedTextureImage1DEXT: _ALLEGRO_glCompressedTextureImage1DEXT_t;
    CompressedTextureSubImage3DEXT: _ALLEGRO_glCompressedTextureSubImage3DEXT_t;
    CompressedTextureSubImage2DEXT: _ALLEGRO_glCompressedTextureSubImage2DEXT_t;
    CompressedTextureSubImage1DEXT: _ALLEGRO_glCompressedTextureSubImage1DEXT_t;
    GetCompressedTextureImageEXT: _ALLEGRO_glGetCompressedTextureImageEXT_t;
    CompressedMultiTexImage3DEXT: _ALLEGRO_glCompressedMultiTexImage3DEXT_t;
    CompressedMultiTexImage2DEXT: _ALLEGRO_glCompressedMultiTexImage2DEXT_t;
    CompressedMultiTexImage1DEXT: _ALLEGRO_glCompressedMultiTexImage1DEXT_t;
    CompressedMultiTexSubImage3DEXT: _ALLEGRO_glCompressedMultiTexSubImage3DEXT_t;
    CompressedMultiTexSubImage2DEXT: _ALLEGRO_glCompressedMultiTexSubImage2DEXT_t;
    CompressedMultiTexSubImage1DEXT: _ALLEGRO_glCompressedMultiTexSubImage1DEXT_t;
    GetCompressedMultiTexImageEXT: _ALLEGRO_glGetCompressedMultiTexImageEXT_t;
    NamedProgramStringEXT: _ALLEGRO_glNamedProgramStringEXT_t;
    NamedProgramLocalParameter4dEXT: _ALLEGRO_glNamedProgramLocalParameter4dEXT_t;
    NamedProgramLocalParameter4dvEXT: _ALLEGRO_glNamedProgramLocalParameter4dvEXT_t;
    NamedProgramLocalParameter4fEXT: _ALLEGRO_glNamedProgramLocalParameter4fEXT_t;
    NamedProgramLocalParameter4fvEXT: _ALLEGRO_glNamedProgramLocalParameter4fvEXT_t;
    GetNamedProgramLocalParameterdvEXT: _ALLEGRO_glGetNamedProgramLocalParameterdvEXT_t;
    GetNamedProgramLocalParameterfvEXT: _ALLEGRO_glGetNamedProgramLocalParameterfvEXT_t;
    GetNamedProgramivEXT: _ALLEGRO_glGetNamedProgramivEXT_t;
    GetNamedProgramStringEXT: _ALLEGRO_glGetNamedProgramStringEXT_t;
    NamedProgramLocalParameters4fvEXT: _ALLEGRO_glNamedProgramLocalParameters4fvEXT_t;
    NamedProgramLocalParameterI4iEXT: _ALLEGRO_glNamedProgramLocalParameterI4iEXT_t;
    NamedProgramLocalParameterI4ivEXT: _ALLEGRO_glNamedProgramLocalParameterI4ivEXT_t;
    NamedProgramLocalParametersI4ivEXT: _ALLEGRO_glNamedProgramLocalParametersI4ivEXT_t;
    NamedProgramLocalParameterI4uiEXT: _ALLEGRO_glNamedProgramLocalParameterI4uiEXT_t;
    NamedProgramLocalParameterI4uivEXT: _ALLEGRO_glNamedProgramLocalParameterI4uivEXT_t;
    NamedProgramLocalParametersI4uivEXT: _ALLEGRO_glNamedProgramLocalParametersI4uivEXT_t;
    GetNamedProgramLocalParameterIivEXT: _ALLEGRO_glGetNamedProgramLocalParameterIivEXT_t;
    GetNamedProgramLocalParameterIuivEXT: _ALLEGRO_glGetNamedProgramLocalParameterIuivEXT_t;
    TextureParameterIivEXT: _ALLEGRO_glTextureParameterIivEXT_t;
    TextureParameterIuivEXT: _ALLEGRO_glTextureParameterIuivEXT_t;
    GetTextureParameterIivEXT: _ALLEGRO_glGetTextureParameterIivEXT_t;
    GetTextureParameterIuivEXT: _ALLEGRO_glGetTextureParameterIuivEXT_t;
    MultiTexParameterIivEXT: _ALLEGRO_glMultiTexParameterIivEXT_t;
    MultiTexParameterIuivEXT: _ALLEGRO_glMultiTexParameterIuivEXT_t;
    GetMultiTexParameterIivEXT: _ALLEGRO_glGetMultiTexParameterIivEXT_t;
    GetMultiTexParameterIuivEXT: _ALLEGRO_glGetMultiTexParameterIuivEXT_t;
    ProgramUniform1fEXT: _ALLEGRO_glProgramUniform1fEXT_t;
    ProgramUniform2fEXT: _ALLEGRO_glProgramUniform2fEXT_t;
    ProgramUniform3fEXT: _ALLEGRO_glProgramUniform3fEXT_t;
    ProgramUniform4fEXT: _ALLEGRO_glProgramUniform4fEXT_t;
    ProgramUniform1iEXT: _ALLEGRO_glProgramUniform1iEXT_t;
    ProgramUniform2iEXT: _ALLEGRO_glProgramUniform2iEXT_t;
    ProgramUniform3iEXT: _ALLEGRO_glProgramUniform3iEXT_t;
    ProgramUniform4iEXT: _ALLEGRO_glProgramUniform4iEXT_t;
    ProgramUniform1fvEXT: _ALLEGRO_glProgramUniform1fvEXT_t;
    ProgramUniform2fvEXT: _ALLEGRO_glProgramUniform2fvEXT_t;
    ProgramUniform3fvEXT: _ALLEGRO_glProgramUniform3fvEXT_t;
    ProgramUniform4fvEXT: _ALLEGRO_glProgramUniform4fvEXT_t;
    ProgramUniform1ivEXT: _ALLEGRO_glProgramUniform1ivEXT_t;
    ProgramUniform2ivEXT: _ALLEGRO_glProgramUniform2ivEXT_t;
    ProgramUniform3ivEXT: _ALLEGRO_glProgramUniform3ivEXT_t;
    ProgramUniform4ivEXT: _ALLEGRO_glProgramUniform4ivEXT_t;
    ProgramUniformMatrix2fvEXT: _ALLEGRO_glProgramUniformMatrix2fvEXT_t;
    ProgramUniformMatrix3fvEXT: _ALLEGRO_glProgramUniformMatrix3fvEXT_t;
    ProgramUniformMatrix4fvEXT: _ALLEGRO_glProgramUniformMatrix4fvEXT_t;
    ProgramUniformMatrix2x3fvEXT: _ALLEGRO_glProgramUniformMatrix2x3fvEXT_t;
    ProgramUniformMatrix3x2fvEXT: _ALLEGRO_glProgramUniformMatrix3x2fvEXT_t;
    ProgramUniformMatrix2x4fvEXT: _ALLEGRO_glProgramUniformMatrix2x4fvEXT_t;
    ProgramUniformMatrix4x2fvEXT: _ALLEGRO_glProgramUniformMatrix4x2fvEXT_t;
    ProgramUniformMatrix3x4fvEXT: _ALLEGRO_glProgramUniformMatrix3x4fvEXT_t;
    ProgramUniformMatrix4x3fvEXT: _ALLEGRO_glProgramUniformMatrix4x3fvEXT_t;
    ProgramUniform1uiEXT: _ALLEGRO_glProgramUniform1uiEXT_t;
    ProgramUniform2uiEXT: _ALLEGRO_glProgramUniform2uiEXT_t;
    ProgramUniform3uiEXT: _ALLEGRO_glProgramUniform3uiEXT_t;
    ProgramUniform4uiEXT: _ALLEGRO_glProgramUniform4uiEXT_t;
    ProgramUniform1uivEXT: _ALLEGRO_glProgramUniform1uivEXT_t;
    ProgramUniform2uivEXT: _ALLEGRO_glProgramUniform2uivEXT_t;
    ProgramUniform3uivEXT: _ALLEGRO_glProgramUniform3uivEXT_t;
    ProgramUniform4uivEXT: _ALLEGRO_glProgramUniform4uivEXT_t;
    NamedBufferDataEXT: _ALLEGRO_glNamedBufferDataEXT_t;
    NamedBufferSubDataEXT: _ALLEGRO_glNamedBufferSubDataEXT_t;
    MapNamedBufferEXT: _ALLEGRO_glMapNamedBufferEXT_t;
    UnmapNamedBufferEXT: _ALLEGRO_glUnmapNamedBufferEXT_t;
    GetNamedBufferParameterivEXT: _ALLEGRO_glGetNamedBufferParameterivEXT_t;
    GetNamedBufferPointervEXT: _ALLEGRO_glGetNamedBufferPointervEXT_t;
    GetNamedBufferSubDataEXT: _ALLEGRO_glGetNamedBufferSubDataEXT_t;
    TextureBufferEXT: _ALLEGRO_glTextureBufferEXT_t;
    MultiTexBufferEXT: _ALLEGRO_glMultiTexBufferEXT_t;
    NamedRenderbufferStorageEXT: _ALLEGRO_glNamedRenderbufferStorageEXT_t;
    GetNamedRenderbufferParameterivEXT: _ALLEGRO_glGetNamedRenderbufferParameterivEXT_t;
    CheckNamedFramebufferStatusEXT: _ALLEGRO_glCheckNamedFramebufferStatusEXT_t;
    NamedFramebufferTexture1DEXT: _ALLEGRO_glNamedFramebufferTexture1DEXT_t;
    NamedFramebufferTexture2DEXT: _ALLEGRO_glNamedFramebufferTexture2DEXT_t;
    NamedFramebufferTexture3DEXT: _ALLEGRO_glNamedFramebufferTexture3DEXT_t;
    NamedFramebufferRenderbufferEXT: _ALLEGRO_glNamedFramebufferRenderbufferEXT_t;
    GetNamedFramebufferAttachmentParameterivEXT: _ALLEGRO_glGetNamedFramebufferAttachmentParameterivEXT_t;
    GenerateTextureMipmapEXT: _ALLEGRO_glGenerateTextureMipmapEXT_t;
    GenerateMultiTexMipmapEXT: _ALLEGRO_glGenerateMultiTexMipmapEXT_t;
    FramebufferDrawBufferEXT: _ALLEGRO_glFramebufferDrawBufferEXT_t;
    FramebufferDrawBuffersEXT: _ALLEGRO_glFramebufferDrawBuffersEXT_t;
    FramebufferReadBufferEXT: _ALLEGRO_glFramebufferReadBufferEXT_t;
    GetFramebufferParameterivEXT: _ALLEGRO_glGetFramebufferParameterivEXT_t;
    NamedRenderbufferStorageMultisampleEXT: _ALLEGRO_glNamedRenderbufferStorageMultisampleEXT_t;
    NamedRenderbufferStorageMultisampleCoverageEXT: _ALLEGRO_glNamedRenderbufferStorageMultisampleCoverageEXT_t;
    NamedFramebufferTextureEXT: _ALLEGRO_glNamedFramebufferTextureEXT_t;
    NamedFramebufferTextureLayerEXT: _ALLEGRO_glNamedFramebufferTextureLayerEXT_t;
    NamedFramebufferTextureFaceEXT: _ALLEGRO_glNamedFramebufferTextureFaceEXT_t;
    TextureRenderbufferEXT: _ALLEGRO_glTextureRenderbufferEXT_t;
    MultiTexRenderbufferEXT: _ALLEGRO_glMultiTexRenderbufferEXT_t;
    GetMultisamplefvNV: _ALLEGRO_glGetMultisamplefvNV_t;
    SampleMaskIndexedNV: _ALLEGRO_glSampleMaskIndexedNV_t;
    TexRenderbufferNV: _ALLEGRO_glTexRenderbufferNV_t;
    BindTransformFeedbackNV: _ALLEGRO_glBindTransformFeedbackNV_t;
    DeleteTransformFeedbacksNV: _ALLEGRO_glDeleteTransformFeedbacksNV_t;
    GenTransformFeedbacksNV: _ALLEGRO_glGenTransformFeedbacksNV_t;
    IsTransformFeedbackNV: _ALLEGRO_glIsTransformFeedbackNV_t;
    PauseTransformFeedbackNV: _ALLEGRO_glPauseTransformFeedbackNV_t;
    ResumeTransformFeedbackNV: _ALLEGRO_glResumeTransformFeedbackNV_t;
    DrawTransformFeedbackNV: _ALLEGRO_glDrawTransformFeedbackNV_t;
    GetPerfMonitorGroupsAMD: _ALLEGRO_glGetPerfMonitorGroupsAMD_t;
    GetPerfMonitorCountersAMD: _ALLEGRO_glGetPerfMonitorCountersAMD_t;
    GetPerfMonitorGroupStringAMD: _ALLEGRO_glGetPerfMonitorGroupStringAMD_t;
    GetPerfMonitorCounterStringAMD: _ALLEGRO_glGetPerfMonitorCounterStringAMD_t;
    GetPerfMonitorCounterInfoAMD: _ALLEGRO_glGetPerfMonitorCounterInfoAMD_t;
    GenPerfMonitorsAMD: _ALLEGRO_glGenPerfMonitorsAMD_t;
    DeletePerfMonitorsAMD: _ALLEGRO_glDeletePerfMonitorsAMD_t;
    SelectPerfMonitorCountersAMD: _ALLEGRO_glSelectPerfMonitorCountersAMD_t;
    BeginPerfMonitorAMD: _ALLEGRO_glBeginPerfMonitorAMD_t;
    EndPerfMonitorAMD: _ALLEGRO_glEndPerfMonitorAMD_t;
    GetPerfMonitorCounterDataAMD: _ALLEGRO_glGetPerfMonitorCounterDataAMD_t;
    TessellationFactorAMD: _ALLEGRO_glTessellationFactorAMD_t;
    TessellationModeAMD: _ALLEGRO_glTessellationModeAMD_t;
    ProvokingVertexEXT: _ALLEGRO_glProvokingVertexEXT_t;
    BlendFuncIndexedAMD: _ALLEGRO_glBlendFuncIndexedAMD_t;
    BlendFuncSeparateIndexedAMD: _ALLEGRO_glBlendFuncSeparateIndexedAMD_t;
    BlendEquationIndexedAMD: _ALLEGRO_glBlendEquationIndexedAMD_t;
    BlendEquationSeparateIndexedAMD: _ALLEGRO_glBlendEquationSeparateIndexedAMD_t;
    TextureRangeAPPLE: _ALLEGRO_glTextureRangeAPPLE_t;
    GetTexParameterPointervAPPLE: _ALLEGRO_glGetTexParameterPointervAPPLE_t;
    EnableVertexAttribAPPLE: _ALLEGRO_glEnableVertexAttribAPPLE_t;
    DisableVertexAttribAPPLE: _ALLEGRO_glDisableVertexAttribAPPLE_t;
    IsVertexAttribEnabledAPPLE: _ALLEGRO_glIsVertexAttribEnabledAPPLE_t;
    MapVertexAttrib1dAPPLE: _ALLEGRO_glMapVertexAttrib1dAPPLE_t;
    MapVertexAttrib1fAPPLE: _ALLEGRO_glMapVertexAttrib1fAPPLE_t;
    MapVertexAttrib2dAPPLE: _ALLEGRO_glMapVertexAttrib2dAPPLE_t;
    MapVertexAttrib2fAPPLE: _ALLEGRO_glMapVertexAttrib2fAPPLE_t;
    ObjectPurgeableAPPLE: _ALLEGRO_glObjectPurgeableAPPLE_t;
    ObjectUnpurgeableAPPLE: _ALLEGRO_glObjectUnpurgeableAPPLE_t;
    GetObjectParameterivAPPLE: _ALLEGRO_glGetObjectParameterivAPPLE_t;
    BeginVideoCaptureNV: _ALLEGRO_glBeginVideoCaptureNV_t;
    BindVideoCaptureStreamBufferNV: _ALLEGRO_glBindVideoCaptureStreamBufferNV_t;
    BindVideoCaptureStreamTextureNV: _ALLEGRO_glBindVideoCaptureStreamTextureNV_t;
    EndVideoCaptureNV: _ALLEGRO_glEndVideoCaptureNV_t;
    GetVideoCaptureivNV: _ALLEGRO_glGetVideoCaptureivNV_t;
    GetVideoCaptureStreamivNV: _ALLEGRO_glGetVideoCaptureStreamivNV_t;
    GetVideoCaptureStreamfvNV: _ALLEGRO_glGetVideoCaptureStreamfvNV_t;
    GetVideoCaptureStreamdvNV: _ALLEGRO_glGetVideoCaptureStreamdvNV_t;
    VideoCaptureNV: _ALLEGRO_glVideoCaptureNV_t;
    VideoCaptureStreamParameterivNV: _ALLEGRO_glVideoCaptureStreamParameterivNV_t;
    VideoCaptureStreamParameterfvNV: _ALLEGRO_glVideoCaptureStreamParameterfvNV_t;
    VideoCaptureStreamParameterdvNV: _ALLEGRO_glVideoCaptureStreamParameterdvNV_t;
    UseShaderProgramEXT: _ALLEGRO_glUseShaderProgramEXT_t;
    ActiveProgramEXT: _ALLEGRO_glActiveProgramEXT_t;
    CreateShaderProgramEXT: _ALLEGRO_glCreateShaderProgramEXT_t;
    MakeBufferResidentNV: _ALLEGRO_glMakeBufferResidentNV_t;
    MakeBufferNonResidentNV: _ALLEGRO_glMakeBufferNonResidentNV_t;
    IsBufferResidentNV: _ALLEGRO_glIsBufferResidentNV_t;
    MakeNamedBufferResidentNV: _ALLEGRO_glMakeNamedBufferResidentNV_t;
    MakeNamedBufferNonResidentNV: _ALLEGRO_glMakeNamedBufferNonResidentNV_t;
    IsNamedBufferResidentNV: _ALLEGRO_glIsNamedBufferResidentNV_t;
    GetBufferParameterui64vNV: _ALLEGRO_glGetBufferParameterui64vNV_t;
    GetNamedBufferParameterui64vNV: _ALLEGRO_glGetNamedBufferParameterui64vNV_t;
    GetIntegerui64vNV: _ALLEGRO_glGetIntegerui64vNV_t;
    Uniformui64NV: _ALLEGRO_glUniformui64NV_t;
    Uniformui64vNV: _ALLEGRO_glUniformui64vNV_t;
    GetUniformui64vNV: _ALLEGRO_glGetUniformui64vNV_t;
    ProgramUniformui64NV: _ALLEGRO_glProgramUniformui64NV_t;
    ProgramUniformui64vNV: _ALLEGRO_glProgramUniformui64vNV_t;
    BufferAddressRangeNV: _ALLEGRO_glBufferAddressRangeNV_t;
    VertexFormatNV: _ALLEGRO_glVertexFormatNV_t;
    NormalFormatNV: _ALLEGRO_glNormalFormatNV_t;
    ColorFormatNV: _ALLEGRO_glColorFormatNV_t;
    IndexFormatNV: _ALLEGRO_glIndexFormatNV_t;
    TexCoordFormatNV: _ALLEGRO_glTexCoordFormatNV_t;
    EdgeFlagFormatNV: _ALLEGRO_glEdgeFlagFormatNV_t;
    SecondaryColorFormatNV: _ALLEGRO_glSecondaryColorFormatNV_t;
    FogCoordFormatNV: _ALLEGRO_glFogCoordFormatNV_t;
    VertexAttribFormatNV: _ALLEGRO_glVertexAttribFormatNV_t;
    VertexAttribIFormatNV: _ALLEGRO_glVertexAttribIFormatNV_t;
    GetIntegerui64i_vNV: _ALLEGRO_glGetIntegerui64i_vNV_t;
    TextureBarrierNV: _ALLEGRO_glTextureBarrierNV_t;
    CreateBufferRegionARB: _ALLEGRO_wglCreateBufferRegionARB_t;
    DeleteBufferRegionARB: _ALLEGRO_wglDeleteBufferRegionARB_t;
    SaveBufferRegionARB: _ALLEGRO_wglSaveBufferRegionARB_t;
    RestoreBufferRegionARB: _ALLEGRO_wglRestoreBufferRegionARB_t;
    GetExtensionsStringARB: _ALLEGRO_wglGetExtensionsStringARB_t;
    GetPixelFormatAttribivARB: _ALLEGRO_wglGetPixelFormatAttribivARB_t;
    GetPixelFormatAttribfvARB: _ALLEGRO_wglGetPixelFormatAttribfvARB_t;
    ChoosePixelFormatARB: _ALLEGRO_wglChoosePixelFormatARB_t;
    MakeContextCurrentARB: _ALLEGRO_wglMakeContextCurrentARB_t;
    GetCurrentReadDCARB: _ALLEGRO_wglGetCurrentReadDCARB_t;
    CreatePbufferARB: _ALLEGRO_wglCreatePbufferARB_t;
    GetPbufferDCARB: _ALLEGRO_wglGetPbufferDCARB_t;
    ReleasePbufferDCARB: _ALLEGRO_wglReleasePbufferDCARB_t;
    DestroyPbufferARB: _ALLEGRO_wglDestroyPbufferARB_t;
    QueryPbufferARB: _ALLEGRO_wglQueryPbufferARB_t;
    BindTexImageARB: _ALLEGRO_wglBindTexImageARB_t;
    ReleaseTexImageARB: _ALLEGRO_wglReleaseTexImageARB_t;
    SetPbufferAttribARB: _ALLEGRO_wglSetPbufferAttribARB_t;
    CreateContextAttribsARB: _ALLEGRO_wglCreateContextAttribsARB_t;
    CreateDisplayColorTableEXT: _ALLEGRO_wglCreateDisplayColorTableEXT_t;
    LoadDisplayColorTableEXT: _ALLEGRO_wglLoadDisplayColorTableEXT_t;
    BindDisplayColorTableEXT: _ALLEGRO_wglBindDisplayColorTableEXT_t;
    DestroyDisplayColorTableEXT: _ALLEGRO_wglDestroyDisplayColorTableEXT_t;
    GetExtensionsStringEXT: _ALLEGRO_wglGetExtensionsStringEXT_t;
    MakeContextCurrentEXT: _ALLEGRO_wglMakeContextCurrentEXT_t;
    GetCurrentReadDCEXT: _ALLEGRO_wglGetCurrentReadDCEXT_t;
    CreatePbufferEXT: _ALLEGRO_wglCreatePbufferEXT_t;
    GetPbufferDCEXT: _ALLEGRO_wglGetPbufferDCEXT_t;
    ReleasePbufferDCEXT: _ALLEGRO_wglReleasePbufferDCEXT_t;
    DestroyPbufferEXT: _ALLEGRO_wglDestroyPbufferEXT_t;
    QueryPbufferEXT: _ALLEGRO_wglQueryPbufferEXT_t;
    GetPixelFormatAttribivEXT: _ALLEGRO_wglGetPixelFormatAttribivEXT_t;
    GetPixelFormatAttribfvEXT: _ALLEGRO_wglGetPixelFormatAttribfvEXT_t;
    ChoosePixelFormatEXT: _ALLEGRO_wglChoosePixelFormatEXT_t;
    SwapIntervalEXT: _ALLEGRO_wglSwapIntervalEXT_t;
    GetSwapIntervalEXT: _ALLEGRO_wglGetSwapIntervalEXT_t;
    AllocateMemoryNV: _ALLEGRO_wglAllocateMemoryNV_t;
    FreeMemoryNV: _ALLEGRO_wglFreeMemoryNV_t;
    GetSyncValuesOML: _ALLEGRO_wglGetSyncValuesOML_t;
    GetMscRateOML: _ALLEGRO_wglGetMscRateOML_t;
    SwapBuffersMscOML: _ALLEGRO_wglSwapBuffersMscOML_t;
    SwapLayerBuffersMscOML: _ALLEGRO_wglSwapLayerBuffersMscOML_t;
    WaitForMscOML: _ALLEGRO_wglWaitForMscOML_t;
    WaitForSbcOML: _ALLEGRO_wglWaitForSbcOML_t;
    GetDigitalVideoParametersI3D: _ALLEGRO_wglGetDigitalVideoParametersI3D_t;
    SetDigitalVideoParametersI3D: _ALLEGRO_wglSetDigitalVideoParametersI3D_t;
    GetGammaTableParametersI3D: _ALLEGRO_wglGetGammaTableParametersI3D_t;
    SetGammaTableParametersI3D: _ALLEGRO_wglSetGammaTableParametersI3D_t;
    GetGammaTableI3D: _ALLEGRO_wglGetGammaTableI3D_t;
    SetGammaTableI3D: _ALLEGRO_wglSetGammaTableI3D_t;
    EnableGenlockI3D: _ALLEGRO_wglEnableGenlockI3D_t;
    DisableGenlockI3D: _ALLEGRO_wglDisableGenlockI3D_t;
    IsEnabledGenlockI3D: _ALLEGRO_wglIsEnabledGenlockI3D_t;
    GenlockSourceI3D: _ALLEGRO_wglGenlockSourceI3D_t;
    GetGenlockSourceI3D: _ALLEGRO_wglGetGenlockSourceI3D_t;
    GenlockSourceEdgeI3D: _ALLEGRO_wglGenlockSourceEdgeI3D_t;
    GetGenlockSourceEdgeI3D: _ALLEGRO_wglGetGenlockSourceEdgeI3D_t;
    GenlockSampleRateI3D: _ALLEGRO_wglGenlockSampleRateI3D_t;
    GetGenlockSampleRateI3D: _ALLEGRO_wglGetGenlockSampleRateI3D_t;
    GenlockSourceDelayI3D: _ALLEGRO_wglGenlockSourceDelayI3D_t;
    GetGenlockSourceDelayI3D: _ALLEGRO_wglGetGenlockSourceDelayI3D_t;
    QueryGenlockMaxSourceDelayI3D: _ALLEGRO_wglQueryGenlockMaxSourceDelayI3D_t;
    CreateImageBufferI3D: _ALLEGRO_wglCreateImageBufferI3D_t;
    DestroyImageBufferI3D: _ALLEGRO_wglDestroyImageBufferI3D_t;
    AssociateImageBufferEventsI3D: _ALLEGRO_wglAssociateImageBufferEventsI3D_t;
    ReleaseImageBufferEventsI3D: _ALLEGRO_wglReleaseImageBufferEventsI3D_t;
    EnableFrameLockI3D: _ALLEGRO_wglEnableFrameLockI3D_t;
    DisableFrameLockI3D: _ALLEGRO_wglDisableFrameLockI3D_t;
    IsEnabledFrameLockI3D: _ALLEGRO_wglIsEnabledFrameLockI3D_t;
    QueryFrameLockMasterI3D: _ALLEGRO_wglQueryFrameLockMasterI3D_t;
    GetFrameUsageI3D: _ALLEGRO_wglGetFrameUsageI3D_t;
    BeginFrameTrackingI3D: _ALLEGRO_wglBeginFrameTrackingI3D_t;
    EndFrameTrackingI3D: _ALLEGRO_wglEndFrameTrackingI3D_t;
    QueryFrameTrackingI3D: _ALLEGRO_wglQueryFrameTrackingI3D_t;
    AddSwapHintRectWIN: _ALLEGRO_wglAddSwapHintRectWIN_t;
    EnumerateVideoDevicesNV: _ALLEGRO_wglEnumerateVideoDevicesNV_t;
    BindVideoDeviceNV: _ALLEGRO_wglBindVideoDeviceNV_t;
    QueryCurrentContextNV: _ALLEGRO_wglQueryCurrentContextNV_t;
    GetVideoDeviceNV: _ALLEGRO_wglGetVideoDeviceNV_t;
    ReleaseVideoDeviceNV: _ALLEGRO_wglReleaseVideoDeviceNV_t;
    BindVideoImageNV: _ALLEGRO_wglBindVideoImageNV_t;
    ReleaseVideoImageNV: _ALLEGRO_wglReleaseVideoImageNV_t;
    SendPbufferToVideoNV: _ALLEGRO_wglSendPbufferToVideoNV_t;
    GetVideoInfoNV: _ALLEGRO_wglGetVideoInfoNV_t;
    JoinSwapGroupNV: _ALLEGRO_wglJoinSwapGroupNV_t;
    BindSwapBarrierNV: _ALLEGRO_wglBindSwapBarrierNV_t;
    QuerySwapGroupNV: _ALLEGRO_wglQuerySwapGroupNV_t;
    QueryMaxSwapGroupsNV: _ALLEGRO_wglQueryMaxSwapGroupsNV_t;
    QueryFrameCountNV: _ALLEGRO_wglQueryFrameCountNV_t;
    ResetFrameCountNV: _ALLEGRO_wglResetFrameCountNV_t;
    EnumGpusNV: _ALLEGRO_wglEnumGpusNV_t;
    EnumGpuDevicesNV: _ALLEGRO_wglEnumGpuDevicesNV_t;
    CreateAffinityDCNV: _ALLEGRO_wglCreateAffinityDCNV_t;
    EnumGpusFromAffinityDCNV: _ALLEGRO_wglEnumGpusFromAffinityDCNV_t;
    DeleteDCNV: _ALLEGRO_wglDeleteDCNV_t;
    GetGPUIDsAMD: _ALLEGRO_wglGetGPUIDsAMD_t;
    GetGPUInfoAMD: _ALLEGRO_wglGetGPUInfoAMD_t;
    GetContextGPUIDAMD: _ALLEGRO_wglGetContextGPUIDAMD_t;
    CreateAssociatedContextAMD: _ALLEGRO_wglCreateAssociatedContextAMD_t;
    CreateAssociatedContextAttribsAMD: _ALLEGRO_wglCreateAssociatedContextAttribsAMD_t;
    DeleteAssociatedContextAMD: _ALLEGRO_wglDeleteAssociatedContextAMD_t;
    MakeAssociatedContextCurrentAMD: _ALLEGRO_wglMakeAssociatedContextCurrentAMD_t;
    GetCurrentAssociatedContextAMD: _ALLEGRO_wglGetCurrentAssociatedContextAMD_t;
    BlitContextFramebufferAMD: _ALLEGRO_wglBlitContextFramebufferAMD_t;
    BindVideoCaptureDeviceNV: _ALLEGRO_wglBindVideoCaptureDeviceNV_t;
    EnumerateVideoCaptureDevicesNV: _ALLEGRO_wglEnumerateVideoCaptureDevicesNV_t;
    LockVideoCaptureDeviceNV: _ALLEGRO_wglLockVideoCaptureDeviceNV_t;
    QueryVideoCaptureDeviceNV: _ALLEGRO_wglQueryVideoCaptureDeviceNV_t;
    ReleaseVideoCaptureDeviceNV: _ALLEGRO_wglReleaseVideoCaptureDeviceNV_t;
    CopyImageSubDataNV: _ALLEGRO_wglCopyImageSubDataNV_t;
  end;

  { PALLEGRO_AUDIO_RECORDER  }
  PALLEGRO_AUDIO_RECORDER = Pointer;

  { PPALLEGRO_AUDIO_RECORDER  }
  PPALLEGRO_AUDIO_RECORDER = ^PALLEGRO_AUDIO_RECORDER;

  { ALLEGRO_AUDIO_RECORDER_EVENT  }
  ALLEGRO_AUDIO_RECORDER_EVENT = record
    _type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_AUDIO_RECORDER;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    buffer: Pointer;
    samples: Cardinal;
  end;

  { PALLEGRO_SAMPLE  }
  PALLEGRO_SAMPLE = Pointer;

  { PPALLEGRO_SAMPLE  }
  PPALLEGRO_SAMPLE = ^PALLEGRO_SAMPLE;

  { ALLEGRO_SAMPLE_ID  }
  ALLEGRO_SAMPLE_ID = record
    _index: Integer;
    _id: Integer;
  end;

  { PALLEGRO_SAMPLE_INSTANCE  }
  PALLEGRO_SAMPLE_INSTANCE = Pointer;

  { PPALLEGRO_SAMPLE_INSTANCE  }
  PPALLEGRO_SAMPLE_INSTANCE = ^PALLEGRO_SAMPLE_INSTANCE;

  { PALLEGRO_AUDIO_STREAM  }
  PALLEGRO_AUDIO_STREAM = Pointer;

  { PPALLEGRO_AUDIO_STREAM  }
  PPALLEGRO_AUDIO_STREAM = ^PALLEGRO_AUDIO_STREAM;

  { PALLEGRO_MIXER  }
  PALLEGRO_MIXER = Pointer;

  { PPALLEGRO_MIXER  }
  PPALLEGRO_MIXER = ^PALLEGRO_MIXER;

  { PALLEGRO_VOICE  }
  PALLEGRO_VOICE = Pointer;

  { PPALLEGRO_VOICE  }
  PPALLEGRO_VOICE = ^PALLEGRO_VOICE;

  { PALLEGRO_AUDIO_DEVICE  }
  PALLEGRO_AUDIO_DEVICE = Pointer;

  { PPALLEGRO_AUDIO_DEVICE  }
  PPALLEGRO_AUDIO_DEVICE = ^PALLEGRO_AUDIO_DEVICE;

  { PALLEGRO_FONT  }
  PALLEGRO_FONT = Pointer;

  { PPALLEGRO_FONT  }
  PPALLEGRO_FONT = ^PALLEGRO_FONT;

  { ALLEGRO_GLYPH  }
  ALLEGRO_GLYPH = record
    bitmap: PALLEGRO_BITMAP;
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
    kerning: Integer;
    offset_x: Integer;
    offset_y: Integer;
    advance: Integer;
  end;

  { PALLEGRO_FILECHOOSER  }
  PALLEGRO_FILECHOOSER = Pointer;

  { PPALLEGRO_FILECHOOSER  }
  PPALLEGRO_FILECHOOSER = ^PALLEGRO_FILECHOOSER;

  { PALLEGRO_TEXTLOG  }
  PALLEGRO_TEXTLOG = Pointer;

  { PPALLEGRO_TEXTLOG  }
  PPALLEGRO_TEXTLOG = ^PALLEGRO_TEXTLOG;

  { PALLEGRO_MENU  }
  PALLEGRO_MENU = Pointer;

  { PPALLEGRO_MENU  }
  PPALLEGRO_MENU = ^PALLEGRO_MENU;

  { ALLEGRO_MENU_INFO  }
  ALLEGRO_MENU_INFO = record
    caption: PUTF8Char;
    id: UInt16;
    flags: Integer;
    icon: PALLEGRO_BITMAP;
  end;

  { ALLEGRO_VERTEX_ELEMENT  }
  ALLEGRO_VERTEX_ELEMENT = record
    attribute: Integer;
    storage: Integer;
    offset: Integer;
  end;

  { PALLEGRO_VERTEX_DECL  }
  PALLEGRO_VERTEX_DECL = Pointer;

  { PPALLEGRO_VERTEX_DECL  }
  PPALLEGRO_VERTEX_DECL = ^PALLEGRO_VERTEX_DECL;

  { ALLEGRO_VERTEX  }
  ALLEGRO_VERTEX = record
    x: Single;
    y: Single;
    z: Single;
    u: Single;
    v: Single;
    color: ALLEGRO_COLOR;
  end;

  { PALLEGRO_VERTEX_BUFFER  }
  PALLEGRO_VERTEX_BUFFER = Pointer;

  { PPALLEGRO_VERTEX_BUFFER  }
  PPALLEGRO_VERTEX_BUFFER = ^PALLEGRO_VERTEX_BUFFER;

  { PALLEGRO_INDEX_BUFFER  }
  PALLEGRO_INDEX_BUFFER = Pointer;

  { PPALLEGRO_INDEX_BUFFER  }
  PPALLEGRO_INDEX_BUFFER = ^PALLEGRO_INDEX_BUFFER;

  { PALLEGRO_VIDEO  }
  PALLEGRO_VIDEO = Pointer;

  { PPALLEGRO_VIDEO  }
  PPALLEGRO_VIDEO = ^PALLEGRO_VIDEO;

  { PHYSFS_uint8  }
  PHYSFS_uint8 = Byte;

  { PHYSFS_sint8  }
  PHYSFS_sint8 = UTF8Char;

  { PHYSFS_uint16  }
  PHYSFS_uint16 = Word;

  { PPHYSFS_uint16  }
  PPHYSFS_uint16 = ^PHYSFS_uint16;

  { PHYSFS_sint16  }
  PHYSFS_sint16 = Smallint;

  { PPHYSFS_sint16  }
  PPHYSFS_sint16 = ^PHYSFS_sint16;

  { PHYSFS_uint32  }
  PHYSFS_uint32 = Cardinal;

  { PPHYSFS_uint32  }
  PPHYSFS_uint32 = ^PHYSFS_uint32;

  { PHYSFS_sint32  }
  PHYSFS_sint32 = Integer;

  { PPHYSFS_sint32  }
  PPHYSFS_sint32 = ^PHYSFS_sint32;

  { PHYSFS_sint64  }
  PHYSFS_sint64 = Int64;

  { PPHYSFS_sint64  }
  PPHYSFS_sint64 = ^PHYSFS_sint64;

  { PHYSFS_uint64  }
  PHYSFS_uint64 = UInt64;

  { PPHYSFS_uint64  }
  PPHYSFS_uint64 = ^PHYSFS_uint64;

  { PHYSFS_compile_time_assert_uint8IsOneByte  }
  PHYSFS_compile_time_assert_uint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint8IsOneByte  }
  PHYSFS_compile_time_assert_sint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint16IsTwoBytes  }
  PHYSFS_compile_time_assert_uint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint16IsTwoBytes  }
  PHYSFS_compile_time_assert_sint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint32IsFourBytes  }
  PHYSFS_compile_time_assert_uint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint32IsFourBytes  }
  PHYSFS_compile_time_assert_sint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint64IsEightBytes  }
  PHYSFS_compile_time_assert_uint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint64IsEightBytes  }
  PHYSFS_compile_time_assert_sint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_File  }
  PHYSFS_File = record
    opaque: Pointer;
  end;

  { PHYSFS_ArchiveInfo  }
  PHYSFS_ArchiveInfo = record
    extension: PUTF8Char;
    description: PUTF8Char;
    author: PUTF8Char;
    url: PUTF8Char;
    supportsSymlinks: Integer;
  end;

  { PHYSFS_Version  }
  PHYSFS_Version = record
    major: PHYSFS_uint8;
    minor: PHYSFS_uint8;
    patch: PHYSFS_uint8;
  end;

  { PHYSFS_Allocator  }
  PHYSFS_Allocator = record
    Init: function(): Integer; cdecl;
    Deinit: procedure(); cdecl;
    Malloc: function(p1: PHYSFS_uint64): Pointer; cdecl;
    Realloc: function(p1: Pointer; p2: PHYSFS_uint64): Pointer; cdecl;
    Free: procedure(p1: Pointer); cdecl;
  end;

  { PHYSFS_StringCallback  }
  PHYSFS_StringCallback = procedure(data: Pointer; const str: PUTF8Char); cdecl;

  { PHYSFS_EnumFilesCallback  }
  PHYSFS_EnumFilesCallback = procedure(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char); cdecl;

  { PHYSFS_EnumerateCallback  }
  PHYSFS_EnumerateCallback = function(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char): PHYSFS_EnumerateCallbackResult; cdecl;

  { PHYSFS_Stat_  }
  PHYSFS_Stat_ = record
    filesize: PHYSFS_sint64;
    modtime: PHYSFS_sint64;
    createtime: PHYSFS_sint64;
    accesstime: PHYSFS_sint64;
    filetype: PHYSFS_FileType;
    readonly: Integer;
  end;

  { PHYSFS_Io  }
  PHYSFS_Io = record
    version: PHYSFS_uint32;
    opaque: Pointer;
    read: function(io: PPHYSFS_Io; buf: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    write: function(io: PPHYSFS_Io; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    seek: function(io: PPHYSFS_Io; offset: PHYSFS_uint64): Integer; cdecl;
    tell: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    length: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    duplicate: function(io: PPHYSFS_Io): PPHYSFS_Io; cdecl;
    flush: function(io: PPHYSFS_Io): Integer; cdecl;
    destroy: procedure(io: PPHYSFS_Io); cdecl;
  end;

  { PHYSFS_Archiver  }
  PHYSFS_Archiver = record
    version: PHYSFS_uint32;
    info: PHYSFS_ArchiveInfo;
    openArchive: function(io: PPHYSFS_Io; const name: PUTF8Char; forWrite: Integer; claimed: PInteger): Pointer; cdecl;
    enumerate: function(opaque: Pointer; const dirname: PUTF8Char; cb: PHYSFS_EnumerateCallback; const origdir: PUTF8Char; callbackdata: Pointer): PHYSFS_EnumerateCallbackResult; cdecl;
    openRead: function(opaque: Pointer; const fnm: PUTF8Char): PPHYSFS_Io; cdecl;
    openWrite: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    openAppend: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    remove: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    mkdir: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    stat: function(opaque: Pointer; const fn: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
    closeArchive: procedure(opaque: Pointer); cdecl;
  end;

  { uInt  }
  uInt = Cardinal;

  { uLong  }
  uLong = Cardinal;

  { zipFile  }
  zipFile = Pointer;

  { tm_zip_s  }
  tm_zip_s = record
    tm_sec: uInt;
    tm_min: uInt;
    tm_hour: uInt;
    tm_mday: uInt;
    tm_mon: uInt;
    tm_year: uInt;
  end;

  { tm_zip  }
  tm_zip = tm_zip_s;

  { zip_fileinfo  }
  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  { zipcharpc  }
  zipcharpc = PUTF8Char;

  { al_emit_user_event_dtor  }
  al_emit_user_event_dtor = procedure(p1: PALLEGRO_USER_EVENT); cdecl;

  { al_register_assert_handler_handler  }
  al_register_assert_handler_handler = procedure(const expr: PUTF8Char; const _file: PUTF8Char; line: Integer; const func: PUTF8Char); cdecl;

  { al_register_trace_handler_handler  }
  al_register_trace_handler_handler = procedure(const p1: PUTF8Char); cdecl;

  { al_for_each_fs_entry_callback  }
  al_for_each_fs_entry_callback = function(entry: PALLEGRO_FS_ENTRY; extra: Pointer): Integer; cdecl;

  { atexit_ptr_  }
  atexit_ptr_ = function: UInt64; cdecl;

  { al_install_system_atexit_ptr  }
  al_install_system_atexit_ptr = function(p1: atexit_ptr_): Integer; cdecl;

  { al_create_thread_proc  }
  al_create_thread_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

  { al_create_thread_with_stacksize_proc  }
  al_create_thread_with_stacksize_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

  { al_run_detached_thread_proc  }
  al_run_detached_thread_proc = function(arg: Pointer): Pointer; cdecl;

  { PLRESULT  }
  PLRESULT = ^LRESULT;

  { al_win_add_window_callback_callback  }
  al_win_add_window_callback_callback = function(display: PALLEGRO_DISPLAY; _message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

  { al_win_remove_window_callback_callback  }
  al_win_remove_window_callback_callback = function(display: PALLEGRO_DISPLAY; _message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

  { al_set_mixer_postprocess_callback_cb  }
  al_set_mixer_postprocess_callback_cb = procedure(buf: Pointer; samples: Cardinal; data: Pointer); cdecl;

  { al_register_sample_loader_loader  }
  al_register_sample_loader_loader = function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;

  { al_register_sample_saver_saver  }
  al_register_sample_saver_saver = function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

  { al_register_audio_stream_loader_stream_loader  }
  al_register_audio_stream_loader_stream_loader = function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

  { al_register_sample_loader_f_loader  }
  al_register_sample_loader_f_loader = function(fp: PALLEGRO_FILE): PALLEGRO_SAMPLE; cdecl;

  { al_register_sample_saver_f_saver  }
  al_register_sample_saver_f_saver = function(fp: PALLEGRO_FILE; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

  { al_register_audio_stream_loader_f_stream_loader  }
  al_register_audio_stream_loader_f_stream_loader = function(fp: PALLEGRO_FILE; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

  { al_register_sample_identifier_identifier  }
  al_register_sample_identifier_identifier = function(fp: PALLEGRO_FILE): Boolean; cdecl;

  { al_register_font_loader_load  }
  al_register_font_loader_load = function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;

  { al_do_multiline_text_cb  }
  al_do_multiline_text_cb = function(line_num: Integer; const line: PUTF8Char; size: Integer; extra: Pointer): Boolean; cdecl;

  { al_do_multiline_ustr_cb  }
  al_do_multiline_ustr_cb = function(line_num: Integer; const line: PALLEGRO_USTR; extra: Pointer): Boolean; cdecl;

  { al_triangulate_polygon_emit_triangle  }
  al_triangulate_polygon_emit_triangle = procedure(p1: Integer; p2: Integer; p3: Integer; p4: Pointer); cdecl;

  { al_draw_soft_triangle_init  }
  al_draw_soft_triangle_init = procedure(p1: UIntPtr; p2: PALLEGRO_VERTEX; p3: PALLEGRO_VERTEX; p4: PALLEGRO_VERTEX); cdecl;

  { al_draw_soft_triangle_first  }
  al_draw_soft_triangle_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer; p5: Integer); cdecl;

  { al_draw_soft_triangle_step  }
  al_draw_soft_triangle_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

  { al_draw_soft_triangle_draw  }
  al_draw_soft_triangle_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer); cdecl;

  { al_draw_soft_line_first  }
  al_draw_soft_line_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: PALLEGRO_VERTEX; p5: PALLEGRO_VERTEX); cdecl;

  { al_draw_soft_line_step  }
  al_draw_soft_line_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

  { al_draw_soft_line_draw  }
  al_draw_soft_line_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer); cdecl;

  { PHYSFS_mountMemory_del  }
  PHYSFS_mountMemory_del = procedure(p1: Pointer); cdecl;

var
  _al_trace_prefix: function(const channel: PUTF8Char; level: Integer; const _file: PUTF8Char; line: Integer; const _function: PUTF8Char): Boolean; cdecl;
  _al_trace_suffix: procedure(const msg: PUTF8Char) varargs; cdecl;
  al_acknowledge_drawing_halt: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_acknowledge_drawing_resume: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_acknowledge_resize: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_add_config_comment: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const comment: PUTF8Char); cdecl;
  al_add_config_section: procedure(config: PALLEGRO_CONFIG; const name: PUTF8Char); cdecl;
  al_add_new_bitmap_flag: procedure(flag: Integer); cdecl;
  al_add_timer_count: procedure(timer: PALLEGRO_TIMER; diff: Int64); cdecl;
  al_append_menu_item: function(parent: PALLEGRO_MENU; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_append_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG; const format: PUTF8Char) varargs; cdecl;
  al_append_path_component: procedure(path: PALLEGRO_PATH; const s: PUTF8Char); cdecl;
  al_apply_window_constraints: procedure(display: PALLEGRO_DISPLAY; onoff: Boolean); cdecl;
  al_attach_audio_stream_to_mixer: function(stream: PALLEGRO_AUDIO_STREAM; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_audio_stream_to_voice: function(stream: PALLEGRO_AUDIO_STREAM; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_mixer_to_mixer: function(stream: PALLEGRO_MIXER; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_mixer_to_voice: function(mixer: PALLEGRO_MIXER; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_sample_instance_to_mixer: function(stream: PALLEGRO_SAMPLE_INSTANCE; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_sample_instance_to_voice: function(stream: PALLEGRO_SAMPLE_INSTANCE; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_shader_source: function(shader: PALLEGRO_SHADER; _type: ALLEGRO_SHADER_TYPE; const source: PUTF8Char): Boolean; cdecl;
  al_attach_shader_source_file: function(shader: PALLEGRO_SHADER; _type: ALLEGRO_SHADER_TYPE; const filename: PUTF8Char): Boolean; cdecl;
  al_backup_dirty_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_backup_dirty_bitmaps: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_broadcast_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_build_camera_transform: procedure(trans: PALLEGRO_TRANSFORM; position_x: Single; position_y: Single; position_z: Single; look_x: Single; look_y: Single; look_z: Single; up_x: Single; up_y: Single; up_z: Single); cdecl;
  al_build_menu: function(info: PALLEGRO_MENU_INFO): PALLEGRO_MENU; cdecl;
  al_build_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_build_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; sx: Single; sy: Single; theta: Single); cdecl;
  al_calculate_arc: procedure(dest: PSingle; stride: Integer; cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; thickness: Single; num_points: Integer); cdecl;
  al_calculate_ribbon: procedure(dest: PSingle; dest_stride: Integer; const points: PSingle; points_stride: Integer; thickness: Single; num_segments: Integer); cdecl;
  al_calculate_spline: procedure(dest: PSingle; stride: Integer; points: PSingle; thickness: Single; num_segments: Integer); cdecl;
  al_calloc_with_context: function(count: NativeUInt; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_check_inverse: function(const trans: PALLEGRO_TRANSFORM; tol: Single): Integer; cdecl;
  al_clear_depth_buffer: procedure(x: Single); cdecl;
  al_clear_keyboard_state: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_clear_to_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_clipboard_has_text: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_clone_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_clone_menu: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_clone_menu_for_popup: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_clone_path: function(const path: PALLEGRO_PATH): PALLEGRO_PATH; cdecl;
  al_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_close_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG); cdecl;
  al_close_video: procedure(video: PALLEGRO_VIDEO); cdecl;
  al_color_cmyk: function(c: Single; m: Single; y: Single; k: Single): ALLEGRO_COLOR; cdecl;
  al_color_cmyk_to_rgb: procedure(cyan: Single; magenta: Single; yellow: Single; key: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_distance_ciede2000: function(c1: ALLEGRO_COLOR; c2: ALLEGRO_COLOR): Double; cdecl;
  al_color_hsl: function(h: Single; s: Single; l: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsl_to_rgb: procedure(hue: Single; saturation: Single; lightness: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_hsv: function(h: Single; s: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsv_to_rgb: procedure(hue: Single; saturation: Single; value: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_html: function(const _string: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_html_to_rgb: function(const _string: PUTF8Char; red: PSingle; green: PSingle; blue: PSingle): Boolean; cdecl;
  al_color_lab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_lab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_lch: function(l: Single; c: Single; h: Single): ALLEGRO_COLOR; cdecl;
  al_color_lch_to_rgb: procedure(l: Single; c: Single; h: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_linear: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_linear_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_name: function(const name: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_name_to_rgb: function(const name: PUTF8Char; r: PSingle; g: PSingle; b: PSingle): Boolean; cdecl;
  al_color_oklab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_oklab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_cmyk: procedure(red: Single; green: Single; blue: Single; cyan: PSingle; magenta: PSingle; yellow: PSingle; key: PSingle); cdecl;
  al_color_rgb_to_hsl: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; lightness: PSingle); cdecl;
  al_color_rgb_to_hsv: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; value: PSingle); cdecl;
  al_color_rgb_to_html: procedure(red: Single; green: Single; blue: Single; _string: PUTF8Char); cdecl;
  al_color_rgb_to_lab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_rgb_to_lch: procedure(red: Single; green: Single; blue: Single; l: PSingle; c: PSingle; h: PSingle); cdecl;
  al_color_rgb_to_linear: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_rgb_to_name: function(r: Single; g: Single; b: Single): PUTF8Char; cdecl;
  al_color_rgb_to_oklab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_rgb_to_xyy: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; y2: PSingle); cdecl;
  al_color_rgb_to_xyz: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_rgb_to_yuv: procedure(red: Single; green: Single; blue: Single; y: PSingle; u: PSingle; v: PSingle); cdecl;
  al_color_xyy: function(x: Single; y: Single; y2: Single): ALLEGRO_COLOR; cdecl;
  al_color_xyy_to_rgb: procedure(x: Single; y: Single; y2: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_xyz: function(x: Single; y: Single; z: Single): ALLEGRO_COLOR; cdecl;
  al_color_xyz_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_yuv: function(y: Single; u: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_yuv_to_rgb: procedure(y: Single; u: Single; v: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_compose_transform: procedure(trans: PALLEGRO_TRANSFORM; const other: PALLEGRO_TRANSFORM); cdecl;
  al_convert_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_convert_mask_to_alpha: procedure(bitmap: PALLEGRO_BITMAP; mask_color: ALLEGRO_COLOR); cdecl;
  al_convert_memory_bitmaps: procedure(); cdecl;
  al_copy_transform: procedure(dest: PALLEGRO_TRANSFORM; const src: PALLEGRO_TRANSFORM); cdecl;
  al_create_audio_recorder: function(fragment_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_RECORDER; cdecl;
  al_create_audio_stream: function(buffer_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_STREAM; cdecl;
  al_create_bitmap: function(w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_create_builtin_font: function(): PALLEGRO_FONT; cdecl;
  al_create_cond: function(): PALLEGRO_COND; cdecl;
  al_create_config: function(): PALLEGRO_CONFIG; cdecl;
  al_create_display: function(w: Integer; h: Integer): PALLEGRO_DISPLAY; cdecl;
  al_create_event_queue: function(): PALLEGRO_EVENT_QUEUE; cdecl;
  al_create_file_handle: function(const vt: PALLEGRO_FILE_INTERFACE; userdata: Pointer): PALLEGRO_FILE; cdecl;
  al_create_fs_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
  al_create_index_buffer: function(index_size: Integer; const initial_data: Pointer; num_indices: Integer; flags: Integer): PALLEGRO_INDEX_BUFFER; cdecl;
  al_create_menu: function(): PALLEGRO_MENU; cdecl;
  al_create_mixer: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_MIXER; cdecl;
  al_create_mouse_cursor: function(sprite: PALLEGRO_BITMAP; xfocus: Integer; yfocus: Integer): PALLEGRO_MOUSE_CURSOR; cdecl;
  al_create_mutex: function(): PALLEGRO_MUTEX; cdecl;
  al_create_mutex_recursive: function(): PALLEGRO_MUTEX; cdecl;
  al_create_native_file_dialog: function(const initial_path: PUTF8Char; const title: PUTF8Char; const patterns: PUTF8Char; mode: Integer): PALLEGRO_FILECHOOSER; cdecl;
  al_create_path: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_create_path_for_directory: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_create_popup_menu: function(): PALLEGRO_MENU; cdecl;
  al_create_sample: function(buf: Pointer; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF; free_buf: Boolean): PALLEGRO_SAMPLE; cdecl;
  al_create_sample_instance: function(data: PALLEGRO_SAMPLE): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_create_shader: function(_platform: ALLEGRO_SHADER_PLATFORM): PALLEGRO_SHADER; cdecl;
  al_create_sub_bitmap: function(parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_create_thread: function(proc: al_create_thread_proc; arg: Pointer): PALLEGRO_THREAD; cdecl;
  al_create_thread_with_stacksize: function(proc: al_create_thread_with_stacksize_proc; arg: Pointer; stacksize: NativeUInt): PALLEGRO_THREAD; cdecl;
  al_create_timer: function(speed_secs: Double): PALLEGRO_TIMER; cdecl;
  al_create_vertex_buffer: function(decl: PALLEGRO_VERTEX_DECL; const initial_data: Pointer; num_vertices: Integer; flags: Integer): PALLEGRO_VERTEX_BUFFER; cdecl;
  al_create_vertex_decl: function(const elements: PALLEGRO_VERTEX_ELEMENT; stride: Integer): PALLEGRO_VERTEX_DECL; cdecl;
  al_create_voice: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_VOICE; cdecl;
  al_cstr: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_cstr_dup: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_destroy_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_destroy_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_destroy_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_destroy_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_destroy_config: procedure(config: PALLEGRO_CONFIG); cdecl;
  al_destroy_display: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_destroy_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_destroy_font: procedure(f: PALLEGRO_FONT); cdecl;
  al_destroy_fs_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
  al_destroy_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_destroy_menu: procedure(menu: PALLEGRO_MENU); cdecl;
  al_destroy_mixer: procedure(mixer: PALLEGRO_MIXER); cdecl;
  al_destroy_mouse_cursor: procedure(p1: PALLEGRO_MOUSE_CURSOR); cdecl;
  al_destroy_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_destroy_native_file_dialog: procedure(dialog: PALLEGRO_FILECHOOSER); cdecl;
  al_destroy_path: procedure(path: PALLEGRO_PATH); cdecl;
  al_destroy_sample: procedure(spl: PALLEGRO_SAMPLE); cdecl;
  al_destroy_sample_instance: procedure(spl: PALLEGRO_SAMPLE_INSTANCE); cdecl;
  al_destroy_shader: procedure(shader: PALLEGRO_SHADER); cdecl;
  al_destroy_thread: procedure(thread: PALLEGRO_THREAD); cdecl;
  al_destroy_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_destroy_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_destroy_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_destroy_vertex_decl: procedure(decl: PALLEGRO_VERTEX_DECL); cdecl;
  al_destroy_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_detach_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_detach_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_detach_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_detach_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_disable_menu_event_source: procedure(menu: PALLEGRO_MENU); cdecl;
  al_do_multiline_text: procedure(const font: PALLEGRO_FONT; max_width: Single; const text: PUTF8Char; cb: al_do_multiline_text_cb; extra: Pointer); cdecl;
  al_do_multiline_ustr: procedure(const font: PALLEGRO_FONT; max_width: Single; const ustr: PALLEGRO_USTR; cb: al_do_multiline_ustr_cb; extra: Pointer); cdecl;
  al_drain_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_draw_arc: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_bitmap: procedure(bitmap: PALLEGRO_BITMAP; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_elliptical_arc: procedure(cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_filled_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_polygon: procedure(const vertices: PSingle; vertex_count: Integer; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_polygon_with_holes: procedure(const vertices: PSingle; const vertex_counts: PInteger; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_glyph: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; codepoint: Integer); cdecl;
  al_draw_indexed_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; index_buffer: PALLEGRO_INDEX_BUFFER; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_draw_indexed_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; const indices: PInteger; num_vtx: Integer; _type: Integer): Integer; cdecl;
  al_draw_justified_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_justified_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_justified_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_draw_line: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_multiline_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_multiline_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_multiline_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_draw_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_pixel: procedure(x: Single; y: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_polygon: procedure(const vertices: PSingle; vertex_count: Integer; join_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_polyline: procedure(const vertices: PSingle; vertex_stride: Integer; vertex_count: Integer; join_style: Integer; cap_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_draw_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ribbon: procedure(const points: PSingle; points_stride: Integer; color: ALLEGRO_COLOR; thickness: Single; num_segments: Integer); cdecl;
  al_draw_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_soft_line: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; state: UIntPtr; first: al_draw_soft_line_first; step: al_draw_soft_line_step; draw: al_draw_soft_line_draw); cdecl;
  al_draw_soft_triangle: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; v3: PALLEGRO_VERTEX; state: UIntPtr; init: al_draw_soft_triangle_init; first: al_draw_soft_triangle_first; step: al_draw_soft_triangle_step; draw: al_draw_soft_triangle_draw); cdecl;
  al_draw_spline: procedure(points: PSingle; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_tinted_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const ustr: PALLEGRO_USTR); cdecl;
  al_draw_vertex_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; start: Integer; _end: Integer; _type: Integer): Integer; cdecl;
  al_drop_next_event: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_drop_path_tail: procedure(path: PALLEGRO_PATH); cdecl;
  al_emit_user_event: function(p1: PALLEGRO_EVENT_SOURCE; p2: PALLEGRO_EVENT; dtor: al_emit_user_event_dtor): Boolean; cdecl;
  al_enable_menu_event_source: function(menu: PALLEGRO_MENU): PALLEGRO_EVENT_SOURCE; cdecl;
  al_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
  al_fclose: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_fget_ustr: function(f: PALLEGRO_FILE): PALLEGRO_USTR; cdecl;
  al_fgetc: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_fgets: function(f: PALLEGRO_FILE; const p: PUTF8Char; max: NativeUInt): PUTF8Char; cdecl;
  al_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
  al_fill_silence: procedure(buf: Pointer; samples: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF); cdecl;
  al_find_menu: function(haystack: PALLEGRO_MENU; id: UInt16): PALLEGRO_MENU; cdecl;
  al_find_menu_item: function(haystack: PALLEGRO_MENU; id: UInt16; menu: PPALLEGRO_MENU; index: PInteger): Boolean; cdecl;
  al_fixatan: function(x: al_fixed): al_fixed; cdecl;
  al_fixatan2: function(y: al_fixed; x: al_fixed): al_fixed; cdecl;
  al_fixhypot: function(x: al_fixed; y: al_fixed): al_fixed; cdecl;
  al_fixsqrt: function(x: al_fixed): al_fixed; cdecl;
  al_flip_display: procedure(); cdecl;
  al_flush_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_fd: function(fd: Integer; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_interface: function(const vt: PALLEGRO_FILE_INTERFACE; const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_slice: function(fp: PALLEGRO_FILE; initial_size: NativeUInt; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_for_each_fs_entry: function(dir: PALLEGRO_FS_ENTRY; callback: al_for_each_fs_entry_callback; extra: Pointer): Integer; cdecl;
  al_fprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char): Integer varargs; cdecl;
  al_fputc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fputs: function(f: PALLEGRO_FILE; const p: PUTF8Char): Integer; cdecl;
  al_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fread16be: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fread16le: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fread32be: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_fread32le: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_free_with_context: procedure(ptr: Pointer; line: Integer; const _file: PUTF8Char; const func: PUTF8Char); cdecl;
  al_fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
  al_fsize: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fwrite16be: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fwrite16le: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fwrite32be: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_fwrite32le: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_get_allegro_acodec_version: function(): UInt32; cdecl;
  al_get_allegro_audio_version: function(): UInt32; cdecl;
  al_get_allegro_color_version: function(): UInt32; cdecl;
  al_get_allegro_font_version: function(): UInt32; cdecl;
  al_get_allegro_image_version: function(): UInt32; cdecl;
  al_get_allegro_memfile_version: function(): UInt32; cdecl;
  al_get_allegro_native_dialog_version: function(): UInt32; cdecl;
  al_get_allegro_physfs_version: function(): UInt32; cdecl;
  al_get_allegro_primitives_version: function(): UInt32; cdecl;
  al_get_allegro_ttf_version: function(): UInt32; cdecl;
  al_get_allegro_version: function(): UInt32; cdecl;
  al_get_allegro_video_version: function(): UInt32; cdecl;
  al_get_app_name: function(): PUTF8Char; cdecl;
  al_get_audio_depth_size: function(conf: ALLEGRO_AUDIO_DEPTH): NativeUInt; cdecl;
  al_get_audio_device_name: function(const device: PALLEGRO_AUDIO_DEVICE): PUTF8Char; cdecl;
  al_get_audio_output_device: function(index: Integer): PALLEGRO_AUDIO_DEVICE; cdecl;
  al_get_audio_recorder_event: function(event: PALLEGRO_EVENT): PALLEGRO_AUDIO_RECORDER_EVENT; cdecl;
  al_get_audio_recorder_event_source: function(r: PALLEGRO_AUDIO_RECORDER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_audio_stream_attached: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_channels: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_audio_stream_depth: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_audio_stream_event_source: function(stream: PALLEGRO_AUDIO_STREAM): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_audio_stream_fragment: function(const stream: PALLEGRO_AUDIO_STREAM): Pointer; cdecl;
  al_get_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_frequency: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_gain: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_length: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_length_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_get_audio_stream_pan: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_played_samples: function(const stream: PALLEGRO_AUDIO_STREAM): UInt64; cdecl;
  al_get_audio_stream_playing: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_playmode: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_PLAYMODE; cdecl;
  al_get_audio_stream_position_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_get_audio_stream_speed: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_available_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_backbuffer: function(display: PALLEGRO_DISPLAY): PALLEGRO_BITMAP; cdecl;
  al_get_bitmap_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_get_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger); cdecl;
  al_get_bitmap_depth: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_flags: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_format: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_height: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_samples: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_width: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_x: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_y: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_get_blender: procedure(op: PInteger; source: PInteger; dest: PInteger); cdecl;
  al_get_channel_count: function(conf: ALLEGRO_CHANNEL_CONF): NativeUInt; cdecl;
  al_get_clipboard_text: function(display: PALLEGRO_DISPLAY): PUTF8Char; cdecl;
  al_get_clipping_rectangle: procedure(x: PInteger; y: PInteger; w: PInteger; h: PInteger); cdecl;
  al_get_config_value: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): PUTF8Char; cdecl;
  al_get_cpu_count: function(): Integer; cdecl;
  al_get_current_directory: function(): PUTF8Char; cdecl;
  al_get_current_display: function(): PALLEGRO_DISPLAY; cdecl;
  al_get_current_inverse_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_projection_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_default_menu_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_default_mixer: function(): PALLEGRO_MIXER; cdecl;
  al_get_default_shader_source: function(_platform: ALLEGRO_SHADER_PLATFORM; _type: ALLEGRO_SHADER_TYPE): PUTF8Char; cdecl;
  al_get_default_voice: function(): PALLEGRO_VOICE; cdecl;
  al_get_display_event_source: function(display: PALLEGRO_DISPLAY): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_display_flags: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_format: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_height: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_get_display_mode: function(index: Integer; mode: PALLEGRO_DISPLAY_MODE): PALLEGRO_DISPLAY_MODE; cdecl;
  al_get_display_option: function(display: PALLEGRO_DISPLAY; option: Integer): Integer; cdecl;
  al_get_display_orientation: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_refresh_rate: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_width: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_errno: function(): Integer; cdecl;
  al_get_event_source_data: function(const p1: PALLEGRO_EVENT_SOURCE): IntPtr; cdecl;
  al_get_fallback_font: function(font: PALLEGRO_FONT): PALLEGRO_FONT; cdecl;
  al_get_file_userdata: function(f: PALLEGRO_FILE): Pointer; cdecl;
  al_get_first_config_entry: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_first_config_section: function(const config: PALLEGRO_CONFIG; iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_font_ascent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_descent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_line_height: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_ranges: function(font: PALLEGRO_FONT; ranges_count: Integer; ranges: PInteger): Integer; cdecl;
  al_get_fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
  al_get_fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
  al_get_fs_entry_size: function(e: PALLEGRO_FS_ENTRY): longint; cdecl;
  al_get_fs_interface: function(): PALLEGRO_FS_INTERFACE; cdecl;
  al_get_glyph: function(const f: PALLEGRO_FONT; prev_codepoint: Integer; codepoint: Integer; glyph: PALLEGRO_GLYPH): Boolean; cdecl;
  al_get_glyph_advance: function(const f: PALLEGRO_FONT; codepoint1: Integer; codepoint2: Integer): Integer; cdecl;
  al_get_glyph_dimensions: function(const f: PALLEGRO_FONT; codepoint: Integer; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger): Boolean; cdecl;
  al_get_glyph_width: function(const f: PALLEGRO_FONT; codepoint: Integer): Integer; cdecl;
  al_get_haptic_autocenter: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_get_haptic_capabilities: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_get_haptic_effect_duration: function(p1: PALLEGRO_HAPTIC_EFFECT): Double; cdecl;
  al_get_haptic_from_display: function(p1: PALLEGRO_DISPLAY): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_joystick: function(p1: PALLEGRO_JOYSTICK): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_keyboard: function(p1: PALLEGRO_KEYBOARD): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_mouse: function(p1: PALLEGRO_MOUSE): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_touch_input: function(p1: PALLEGRO_TOUCH_INPUT): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_gain: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_get_index_buffer_size: function(buffer: PALLEGRO_INDEX_BUFFER): Integer; cdecl;
  al_get_joystick: function(joyn: Integer): PALLEGRO_JOYSTICK; cdecl;
  al_get_joystick_active: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_get_joystick_axis_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer; axis: Integer): PUTF8Char; cdecl;
  al_get_joystick_button_name: function(p1: PALLEGRO_JOYSTICK; buttonn: Integer): PUTF8Char; cdecl;
  al_get_joystick_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_joystick_name: function(p1: PALLEGRO_JOYSTICK): PUTF8Char; cdecl;
  al_get_joystick_num_axes: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_num_buttons: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_num_sticks: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_state: procedure(p1: PALLEGRO_JOYSTICK; ret_state: PALLEGRO_JOYSTICK_STATE); cdecl;
  al_get_joystick_stick_flags: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_stick_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer): PUTF8Char; cdecl;
  al_get_keyboard_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_keyboard_state: procedure(ret_state: PALLEGRO_KEYBOARD_STATE); cdecl;
  al_get_max_haptic_effects: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_get_menu_item_caption: function(menu: PALLEGRO_MENU; pos: Integer): PUTF8Char; cdecl;
  al_get_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer): Integer; cdecl;
  al_get_menu_item_icon: function(menu: PALLEGRO_MENU; pos: Integer): PALLEGRO_BITMAP; cdecl;
  al_get_mixer_attached: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_get_mixer_channels: function(const mixer: PALLEGRO_MIXER): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_mixer_depth: function(const mixer: PALLEGRO_MIXER): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_mixer_frequency: function(const mixer: PALLEGRO_MIXER): Cardinal; cdecl;
  al_get_mixer_gain: function(const mixer: PALLEGRO_MIXER): Single; cdecl;
  al_get_mixer_playing: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_get_mixer_quality: function(const mixer: PALLEGRO_MIXER): ALLEGRO_MIXER_QUALITY; cdecl;
  al_get_monitor_dpi: function(adapter: Integer): Integer; cdecl;
  al_get_monitor_info: function(adapter: Integer; info: PALLEGRO_MONITOR_INFO): Boolean; cdecl;
  al_get_monitor_refresh_rate: function(adapter: Integer): Integer; cdecl;
  al_get_mouse_cursor_position: function(ret_x: PInteger; ret_y: PInteger): Boolean; cdecl;
  al_get_mouse_emulation_mode: function(): Integer; cdecl;
  al_get_mouse_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_mouse_num_axes: function(): Cardinal; cdecl;
  al_get_mouse_num_buttons: function(): Cardinal; cdecl;
  al_get_mouse_state: procedure(ret_state: PALLEGRO_MOUSE_STATE); cdecl;
  al_get_mouse_state_axis: function(const state: PALLEGRO_MOUSE_STATE; axis: Integer): Integer; cdecl;
  al_get_mouse_wheel_precision: function(): Integer; cdecl;
  al_get_native_file_dialog_count: function(const dialog: PALLEGRO_FILECHOOSER): Integer; cdecl;
  al_get_native_file_dialog_path: function(const dialog: PALLEGRO_FILECHOOSER; index: NativeUInt): PUTF8Char; cdecl;
  al_get_native_text_log_event_source: function(textlog: PALLEGRO_TEXTLOG): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_new_bitmap_depth: function(): Integer; cdecl;
  al_get_new_bitmap_flags: function(): Integer; cdecl;
  al_get_new_bitmap_format: function(): Integer; cdecl;
  al_get_new_bitmap_samples: function(): Integer; cdecl;
  al_get_new_display_adapter: function(): Integer; cdecl;
  al_get_new_display_flags: function(): Integer; cdecl;
  al_get_new_display_option: function(option: Integer; importance: PInteger): Integer; cdecl;
  al_get_new_display_refresh_rate: function(): Integer; cdecl;
  al_get_new_file_interface: function(): PALLEGRO_FILE_INTERFACE; cdecl;
  al_get_new_window_position: procedure(x: PInteger; y: PInteger); cdecl;
  al_get_new_window_title: function(): PUTF8Char; cdecl;
  al_get_next_config_entry: function(iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_next_config_section: function(iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_get_num_audio_output_devices: function(): Integer; cdecl;
  al_get_num_display_modes: function(): Integer; cdecl;
  al_get_num_joysticks: function(): Integer; cdecl;
  al_get_num_video_adapters: function(): Integer; cdecl;
  al_get_opengl_extension_list: function(): PALLEGRO_OGL_EXT_LIST; cdecl;
  al_get_opengl_fbo: function(bitmap: PALLEGRO_BITMAP): GLuint; cdecl;
  al_get_opengl_proc_address: function(const name: PUTF8Char): Pointer; cdecl;
  al_get_opengl_program_object: function(shader: PALLEGRO_SHADER): GLuint; cdecl;
  al_get_opengl_texture: function(bitmap: PALLEGRO_BITMAP): GLuint; cdecl;
  al_get_opengl_texture_position: procedure(bitmap: PALLEGRO_BITMAP; u: PInteger; v: PInteger); cdecl;
  al_get_opengl_texture_size: function(bitmap: PALLEGRO_BITMAP; w: PInteger; h: PInteger): Boolean; cdecl;
  al_get_opengl_variant: function(): Integer; cdecl;
  al_get_opengl_version: function(): UInt32; cdecl;
  al_get_org_name: function(): PUTF8Char; cdecl;
  al_get_parent_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_get_path_basename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_component: function(const path: PALLEGRO_PATH; i: Integer): PUTF8Char; cdecl;
  al_get_path_drive: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_extension: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_filename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_num_components: function(const path: PALLEGRO_PATH): Integer; cdecl;
  al_get_path_tail: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_pixel: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer): ALLEGRO_COLOR; cdecl;
  al_get_pixel_block_height: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_size: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_width: function(format: Integer): Integer; cdecl;
  al_get_pixel_format_bits: function(format: Integer): Integer; cdecl;
  al_get_pixel_size: function(format: Integer): Integer; cdecl;
  al_get_ram_size: function(): Integer; cdecl;
  al_get_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE): PALLEGRO_SAMPLE; cdecl;
  al_get_sample_channels: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_data: function(const spl: PALLEGRO_SAMPLE): Pointer; cdecl;
  al_get_sample_depth: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_frequency: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_sample_instance_attached: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_get_sample_instance_channels: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_instance_depth: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_instance_frequency: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_gain: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_length: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_pan: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_playing: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_get_sample_instance_playmode: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_PLAYMODE; cdecl;
  al_get_sample_instance_position: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_speed: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_time: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_length: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_separate_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dst: PInteger); cdecl;
  al_get_separate_blender: procedure(op: PInteger; source: PInteger; dest: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dest: PInteger); cdecl;
  al_get_shader_log: function(shader: PALLEGRO_SHADER): PUTF8Char; cdecl;
  al_get_shader_platform: function(shader: PALLEGRO_SHADER): ALLEGRO_SHADER_PLATFORM; cdecl;
  al_get_standard_path: function(id: Integer): PALLEGRO_PATH; cdecl;
  al_get_system_config: function(): PALLEGRO_CONFIG; cdecl;
  al_get_system_driver: function(): PALLEGRO_SYSTEM; cdecl;
  al_get_system_id: function(): ALLEGRO_SYSTEM_ID; cdecl;
  al_get_target_bitmap: function(): PALLEGRO_BITMAP; cdecl;
  al_get_text_dimensions: procedure(const f: PALLEGRO_FONT; const text: PUTF8Char; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_get_text_width: function(const f: PALLEGRO_FONT; const str: PUTF8Char): Integer; cdecl;
  al_get_thread_should_stop: function(outer: PALLEGRO_THREAD): Boolean; cdecl;
  al_get_time: function(): Double; cdecl;
  al_get_timer_count: function(const timer: PALLEGRO_TIMER): Int64; cdecl;
  al_get_timer_event_source: function(timer: PALLEGRO_TIMER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_timer_speed: function(const timer: PALLEGRO_TIMER): Double; cdecl;
  al_get_timer_started: function(const timer: PALLEGRO_TIMER): Boolean; cdecl;
  al_get_touch_input_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_touch_input_mouse_emulation_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_touch_input_state: procedure(ret_state: PALLEGRO_TOUCH_INPUT_STATE); cdecl;
  al_get_ustr_dimensions: procedure(const f: PALLEGRO_FONT; const text: PALLEGRO_USTR; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_get_ustr_width: function(const f: PALLEGRO_FONT; const ustr: PALLEGRO_USTR): Integer; cdecl;
  al_get_vertex_buffer_size: function(buffer: PALLEGRO_VERTEX_BUFFER): Integer; cdecl;
  al_get_video_audio_rate: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_event_source: function(video: PALLEGRO_VIDEO): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_video_fps: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_frame: function(video: PALLEGRO_VIDEO): PALLEGRO_BITMAP; cdecl;
  al_get_video_position: function(video: PALLEGRO_VIDEO; which: ALLEGRO_VIDEO_POSITION_TYPE): Double; cdecl;
  al_get_video_scaled_height: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_video_scaled_width: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_voice_channels: function(const voice: PALLEGRO_VOICE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_voice_depth: function(const voice: PALLEGRO_VOICE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_voice_frequency: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_voice_playing: function(const voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_get_voice_position: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_win_window_handle: function(display: PALLEGRO_DISPLAY): HWND; cdecl;
  al_get_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: PInteger; min_h: PInteger; max_w: PInteger; max_h: PInteger): Boolean; cdecl;
  al_get_window_position: procedure(display: PALLEGRO_DISPLAY; x: PInteger; y: PInteger); cdecl;
  al_grab_font_from_bitmap: function(bmp: PALLEGRO_BITMAP; n: Integer; ranges: PInteger): PALLEGRO_FONT; cdecl;
  al_grab_mouse: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_have_opengl_extension: function(const extension: PUTF8Char): Boolean; cdecl;
  al_hide_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_hold_bitmap_drawing: procedure(hold: Boolean); cdecl;
  al_horizontal_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_identify_bitmap: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_bitmap_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_sample: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_sample_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_video: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_identify_video_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identity_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_inhibit_screensaver: function(inhibit: Boolean): Boolean; cdecl;
  al_init_acodec_addon: function(): Boolean; cdecl;
  al_init_font_addon: function(): Boolean; cdecl;
  al_init_image_addon: function(): Boolean; cdecl;
  al_init_native_dialog_addon: function(): Boolean; cdecl;
  al_init_primitives_addon: function(): Boolean; cdecl;
  al_init_timeout: procedure(timeout: PALLEGRO_TIMEOUT; seconds: Double); cdecl;
  al_init_ttf_addon: function(): Boolean; cdecl;
  al_init_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_init_video_addon: function(): Boolean; cdecl;
  al_insert_menu_item: function(parent: PALLEGRO_MENU; pos: Integer; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_insert_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_install_audio: function(): Boolean; cdecl;
  al_install_haptic: function(): Boolean; cdecl;
  al_install_joystick: function(): Boolean; cdecl;
  al_install_keyboard: function(): Boolean; cdecl;
  al_install_mouse: function(): Boolean; cdecl;
  al_install_system: function(version: Integer; atexit_ptr: al_install_system_atexit_ptr): Boolean; cdecl;
  al_install_touch_input: function(): Boolean; cdecl;
  al_invert_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_is_acodec_addon_initialized: function(): Boolean; cdecl;
  al_is_audio_installed: function(): Boolean; cdecl;
  al_is_audio_recorder_recording: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_is_bitmap_drawing_held: function(): Boolean; cdecl;
  al_is_bitmap_locked: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_color_valid: function(color: ALLEGRO_COLOR): Boolean; cdecl;
  al_is_compatible_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_display_haptic: function(p1: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_is_event_queue_empty: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_is_event_queue_paused: function(const p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_is_event_source_registered: function(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE): Boolean; cdecl;
  al_is_font_addon_initialized: function(): Boolean; cdecl;
  al_is_haptic_active: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_is_haptic_capable: function(p1: PALLEGRO_HAPTIC; p2: Integer): Boolean; cdecl;
  al_is_haptic_effect_ok: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT): Boolean; cdecl;
  al_is_haptic_effect_playing: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_is_haptic_installed: function(): Boolean; cdecl;
  al_is_image_addon_initialized: function(): Boolean; cdecl;
  al_is_joystick_haptic: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_is_joystick_installed: function(): Boolean; cdecl;
  al_is_keyboard_haptic: function(p1: PALLEGRO_KEYBOARD): Boolean; cdecl;
  al_is_keyboard_installed: function(): Boolean; cdecl;
  al_is_mouse_haptic: function(p1: PALLEGRO_MOUSE): Boolean; cdecl;
  al_is_mouse_installed: function(): Boolean; cdecl;
  al_is_native_dialog_addon_initialized: function(): Boolean; cdecl;
  al_is_primitives_addon_initialized: function(): Boolean; cdecl;
  al_is_sub_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_is_system_installed: function(): Boolean; cdecl;
  al_is_touch_input_haptic: function(p1: PALLEGRO_TOUCH_INPUT): Boolean; cdecl;
  al_is_touch_input_installed: function(): Boolean; cdecl;
  al_is_ttf_addon_initialized: function(): Boolean; cdecl;
  al_is_video_addon_initialized: function(): Boolean; cdecl;
  al_is_video_playing: function(video: PALLEGRO_VIDEO): Boolean; cdecl;
  al_join_paths: function(path: PALLEGRO_PATH; const tail: PALLEGRO_PATH): Boolean; cdecl;
  al_join_thread: procedure(outer: PALLEGRO_THREAD; ret_value: PPointer); cdecl;
  al_key_down: function(const p1: PALLEGRO_KEYBOARD_STATE; keycode: Integer): Boolean; cdecl;
  al_keycode_to_name: function(keycode: Integer): PUTF8Char; cdecl;
  al_load_audio_stream: function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_load_audio_stream_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_load_bitmap: function(const filename: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_font: function(const filename: PUTF8Char): PALLEGRO_FONT; cdecl;
  al_load_bitmap_font_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_config_file: function(const filename: PUTF8Char): PALLEGRO_CONFIG; cdecl;
  al_load_config_file_f: function(filename: PALLEGRO_FILE): PALLEGRO_CONFIG; cdecl;
  al_load_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_sample: function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_load_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_load_ttf_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_f: function(_file: PALLEGRO_FILE; const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch: function(const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch_f: function(_file: PALLEGRO_FILE; const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_lock_bitmap: function(bitmap: PALLEGRO_BITMAP; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_blocked: function(bitmap: PALLEGRO_BITMAP; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer; width: Integer; height: Integer; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region_blocked: function(bitmap: PALLEGRO_BITMAP; x_block: Integer; y_block: Integer; width_block: Integer; height_block: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_index_buffer: function(buffer: PALLEGRO_INDEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_lock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_lock_sample_id: function(spl_id: PALLEGRO_SAMPLE_ID): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_lock_vertex_buffer: function(buffer: PALLEGRO_VERTEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_make_path_canonical: function(path: PALLEGRO_PATH): Boolean; cdecl;
  al_make_temp_file: function(const tmpl: PUTF8Char; ret_path: PPALLEGRO_PATH): PALLEGRO_FILE; cdecl;
  al_malloc_with_context: function(n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_map_rgb: function(r: Byte; g: Byte; b: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgb_f: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_map_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_merge_config: function(const cfg1: PALLEGRO_CONFIG; const cfg2: PALLEGRO_CONFIG): PALLEGRO_CONFIG; cdecl;
  al_merge_config_into: procedure(master: PALLEGRO_CONFIG; const add: PALLEGRO_CONFIG); cdecl;
  al_mouse_button_down: function(const state: PALLEGRO_MOUSE_STATE; button: Integer): Boolean; cdecl;
  al_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_open_fs_entry: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_open_memfile: function(mem: Pointer; size: Int64; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_open_native_text_log: function(const title: PUTF8Char; flags: Integer): PALLEGRO_TEXTLOG; cdecl;
  al_open_video: function(const filename: PUTF8Char): PALLEGRO_VIDEO; cdecl;
  al_orthographic_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_path_cstr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PUTF8Char; cdecl;
  al_path_ustr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PALLEGRO_USTR; cdecl;
  al_pause_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: Boolean); cdecl;
  al_peek_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_perspective_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_play_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID; p2: Integer): Boolean; cdecl;
  al_play_sample: function(data: PALLEGRO_SAMPLE; gain: Single; pan: Single; speed: Single; loop: ALLEGRO_PLAYMODE; ret_id: PALLEGRO_SAMPLE_ID): Boolean; cdecl;
  al_play_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_popup_menu: function(popup: PALLEGRO_MENU; display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_premul_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_premul_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_put_blended_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_put_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
  al_realloc_with_context: function(ptr: Pointer; n: NativeUInt; line: Integer; const _file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_rebase_path: function(const head: PALLEGRO_PATH; tail: PALLEGRO_PATH): Boolean; cdecl;
  al_reconfigure_joysticks: function(): Boolean; cdecl;
  al_ref_buffer: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ref_cstr: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ref_ustr: function(info: PALLEGRO_USTR_INFO; const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_register_assert_handler: procedure(handler: al_register_assert_handler_handler); cdecl;
  al_register_audio_stream_loader: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_stream_loader): Boolean; cdecl;
  al_register_audio_stream_loader_f: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_f_stream_loader): Boolean; cdecl;
  al_register_bitmap_identifier: function(const ext: PUTF8Char; identifier: ALLEGRO_IIO_IDENTIFIER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_loader: function(const ext: PUTF8Char; loader: ALLEGRO_IIO_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_loader_f: function(const ext: PUTF8Char; fs_loader: ALLEGRO_IIO_FS_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver: function(const ext: PUTF8Char; saver: ALLEGRO_IIO_SAVER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver_f: function(const ext: PUTF8Char; fs_saver: ALLEGRO_IIO_FS_SAVER_FUNCTION): Boolean; cdecl;
  al_register_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_register_font_loader: function(const ext: PUTF8Char; load: al_register_font_loader_load): Boolean; cdecl;
  al_register_sample_identifier: function(const ext: PUTF8Char; identifier: al_register_sample_identifier_identifier): Boolean; cdecl;
  al_register_sample_loader: function(const ext: PUTF8Char; loader: al_register_sample_loader_loader): Boolean; cdecl;
  al_register_sample_loader_f: function(const ext: PUTF8Char; loader: al_register_sample_loader_f_loader): Boolean; cdecl;
  al_register_sample_saver: function(const ext: PUTF8Char; saver: al_register_sample_saver_saver): Boolean; cdecl;
  al_register_sample_saver_f: function(const ext: PUTF8Char; saver: al_register_sample_saver_f_saver): Boolean; cdecl;
  al_register_trace_handler: procedure(handler: al_register_trace_handler_handler); cdecl;
  al_release_haptic: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_release_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_release_joystick: procedure(p1: PALLEGRO_JOYSTICK); cdecl;
  al_remove_config_key: function(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): Boolean; cdecl;
  al_remove_config_section: function(config: PALLEGRO_CONFIG; const section: PUTF8Char): Boolean; cdecl;
  al_remove_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
  al_remove_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_remove_menu_item: function(menu: PALLEGRO_MENU; pos: Integer): Boolean; cdecl;
  al_remove_opengl_fbo: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_remove_path_component: procedure(path: PALLEGRO_PATH; i: Integer); cdecl;
  al_reparent_bitmap: procedure(bitmap: PALLEGRO_BITMAP; parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer); cdecl;
  al_replace_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_reserve_samples: function(reserve_samples: Integer): Boolean; cdecl;
  al_reset_bitmap_blender: procedure(); cdecl;
  al_reset_clipping_rectangle: procedure(); cdecl;
  al_reset_new_display_options: procedure(); cdecl;
  al_resize_display: function(display: PALLEGRO_DISPLAY; width: Integer; height: Integer): Boolean; cdecl;
  al_rest: procedure(seconds: Double); cdecl;
  al_restore_default_mixer: function(): Boolean; cdecl;
  al_restore_state: procedure(const state: PALLEGRO_STATE); cdecl;
  al_resume_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_rewind_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_rotate_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_rotate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single; angle: Single); cdecl;
  al_rumble_haptic: function(p1: PALLEGRO_HAPTIC; p2: Double; p3: Double; p4: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_run_detached_thread: procedure(proc: al_run_detached_thread_proc; arg: Pointer); cdecl;
  al_save_bitmap: function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_save_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_save_config_file: function(const filename: PUTF8Char; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_save_config_file_f: function(_file: PALLEGRO_FILE; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_save_sample: function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_save_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_scale_transform: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single); cdecl;
  al_scale_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single; sz: Single); cdecl;
  al_seek_audio_stream_secs: function(stream: PALLEGRO_AUDIO_STREAM; time: Double): Boolean; cdecl;
  al_seek_video: function(video: PALLEGRO_VIDEO; pos_in_seconds: Double): Boolean; cdecl;
  al_set_app_name: procedure(const app_name: PUTF8Char); cdecl;
  al_set_audio_stream_channel_matrix: function(stream: PALLEGRO_AUDIO_STREAM; const matrix: PSingle): Boolean; cdecl;
  al_set_audio_stream_fragment: function(stream: PALLEGRO_AUDIO_STREAM; val: Pointer): Boolean; cdecl;
  al_set_audio_stream_gain: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_loop_secs: function(stream: PALLEGRO_AUDIO_STREAM; start: Double; _end: Double): Boolean; cdecl;
  al_set_audio_stream_pan: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_playing: function(stream: PALLEGRO_AUDIO_STREAM; val: Boolean): Boolean; cdecl;
  al_set_audio_stream_playmode: function(stream: PALLEGRO_AUDIO_STREAM; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_audio_stream_speed: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_bitmap_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_set_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer); cdecl;
  al_set_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_set_blender: procedure(op: Integer; source: Integer; dest: Integer); cdecl;
  al_set_clipboard_text: function(display: PALLEGRO_DISPLAY; const text: PUTF8Char): Boolean; cdecl;
  al_set_clipping_rectangle: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_set_config_value: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char; const value: PUTF8Char); cdecl;
  al_set_current_opengl_context: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_set_default_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_set_default_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_set_display_flag: function(display: PALLEGRO_DISPLAY; flag: Integer; onoff: Boolean): Boolean; cdecl;
  al_set_display_icon: procedure(display: PALLEGRO_DISPLAY; icon: PALLEGRO_BITMAP); cdecl;
  al_set_display_icons: procedure(display: PALLEGRO_DISPLAY; num_icons: Integer; icons: PPALLEGRO_BITMAP); cdecl;
  al_set_display_menu: function(display: PALLEGRO_DISPLAY; menu: PALLEGRO_MENU): Boolean; cdecl;
  al_set_display_option: procedure(display: PALLEGRO_DISPLAY; option: Integer; value: Integer); cdecl;
  al_set_errno: procedure(errnum: Integer); cdecl;
  al_set_event_source_data: procedure(p1: PALLEGRO_EVENT_SOURCE; data: IntPtr); cdecl;
  al_set_exe_name: procedure(const path: PUTF8Char); cdecl;
  al_set_fallback_font: procedure(font: PALLEGRO_FONT; fallback: PALLEGRO_FONT); cdecl;
  al_set_fs_interface: procedure(const vtable: PALLEGRO_FS_INTERFACE); cdecl;
  al_set_haptic_autocenter: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_set_haptic_gain: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_set_keyboard_leds: function(leds: Integer): Boolean; cdecl;
  al_set_memory_interface: procedure(iface: PALLEGRO_MEMORY_INTERFACE); cdecl;
  al_set_menu_item_caption: procedure(menu: PALLEGRO_MENU; pos: Integer; const caption: PUTF8Char); cdecl;
  al_set_menu_item_flags: procedure(menu: PALLEGRO_MENU; pos: Integer; flags: Integer); cdecl;
  al_set_menu_item_icon: procedure(menu: PALLEGRO_MENU; pos: Integer; icon: PALLEGRO_BITMAP); cdecl;
  al_set_mixer_frequency: function(mixer: PALLEGRO_MIXER; val: Cardinal): Boolean; cdecl;
  al_set_mixer_gain: function(mixer: PALLEGRO_MIXER; gain: Single): Boolean; cdecl;
  al_set_mixer_playing: function(mixer: PALLEGRO_MIXER; val: Boolean): Boolean; cdecl;
  al_set_mixer_postprocess_callback: function(mixer: PALLEGRO_MIXER; cb: al_set_mixer_postprocess_callback_cb; data: Pointer): Boolean; cdecl;
  al_set_mixer_quality: function(mixer: PALLEGRO_MIXER; val: ALLEGRO_MIXER_QUALITY): Boolean; cdecl;
  al_set_mouse_axis: function(axis: Integer; value: Integer): Boolean; cdecl;
  al_set_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor: PALLEGRO_MOUSE_CURSOR): Boolean; cdecl;
  al_set_mouse_emulation_mode: procedure(mode: Integer); cdecl;
  al_set_mouse_w: function(w: Integer): Boolean; cdecl;
  al_set_mouse_wheel_precision: procedure(precision: Integer); cdecl;
  al_set_mouse_xy: function(display: PALLEGRO_DISPLAY; x: Integer; y: Integer): Boolean; cdecl;
  al_set_mouse_z: function(z: Integer): Boolean; cdecl;
  al_set_new_bitmap_depth: procedure(depth: Integer); cdecl;
  al_set_new_bitmap_flags: procedure(flags: Integer); cdecl;
  al_set_new_bitmap_format: procedure(format: Integer); cdecl;
  al_set_new_bitmap_samples: procedure(samples: Integer); cdecl;
  al_set_new_display_adapter: procedure(adapter: Integer); cdecl;
  al_set_new_display_flags: procedure(flags: Integer); cdecl;
  al_set_new_display_option: procedure(option: Integer; value: Integer; importance: Integer); cdecl;
  al_set_new_display_refresh_rate: procedure(refresh_rate: Integer); cdecl;
  al_set_new_file_interface: procedure(const file_interface: PALLEGRO_FILE_INTERFACE); cdecl;
  al_set_new_window_position: procedure(x: Integer; y: Integer); cdecl;
  al_set_new_window_title: procedure(const title: PUTF8Char); cdecl;
  al_set_org_name: procedure(const org_name: PUTF8Char); cdecl;
  al_set_path_drive: procedure(path: PALLEGRO_PATH; const drive: PUTF8Char); cdecl;
  al_set_path_extension: function(path: PALLEGRO_PATH; const extension: PUTF8Char): Boolean; cdecl;
  al_set_path_filename: procedure(path: PALLEGRO_PATH; const filename: PUTF8Char); cdecl;
  al_set_physfs_file_interface: procedure(); cdecl;
  al_set_render_state: procedure(state: ALLEGRO_RENDER_STATE; value: Integer); cdecl;
  al_set_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE; data: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_set_sample_instance_channel_matrix: function(spl: PALLEGRO_SAMPLE_INSTANCE; const matrix: PSingle): Boolean; cdecl;
  al_set_sample_instance_gain: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_length: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_pan: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_playing: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Boolean): Boolean; cdecl;
  al_set_sample_instance_playmode: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_sample_instance_position: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_speed: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_separate_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer; alpha_op: Integer; alpha_src: Integer; alpha_dst: Integer); cdecl;
  al_set_separate_blender: procedure(op: Integer; source: Integer; dest: Integer; alpha_op: Integer; alpha_source: Integer; alpha_dest: Integer); cdecl;
  al_set_shader_bool: function(const name: PUTF8Char; b: Boolean): Boolean; cdecl;
  al_set_shader_float: function(const name: PUTF8Char; f: Single): Boolean; cdecl;
  al_set_shader_float_vector: function(const name: PUTF8Char; num_components: Integer; const f: PSingle; num_elems: Integer): Boolean; cdecl;
  al_set_shader_int: function(const name: PUTF8Char; i: Integer): Boolean; cdecl;
  al_set_shader_int_vector: function(const name: PUTF8Char; num_components: Integer; const i: PInteger; num_elems: Integer): Boolean; cdecl;
  al_set_shader_matrix: function(const name: PUTF8Char; const matrix: PALLEGRO_TRANSFORM): Boolean; cdecl;
  al_set_shader_sampler: function(const name: PUTF8Char; bitmap: PALLEGRO_BITMAP; _unit: Integer): Boolean; cdecl;
  al_set_standard_file_interface: procedure(); cdecl;
  al_set_standard_fs_interface: procedure(); cdecl;
  al_set_system_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor_id: ALLEGRO_SYSTEM_MOUSE_CURSOR): Boolean; cdecl;
  al_set_target_backbuffer: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_set_target_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_set_thread_should_stop: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_set_timer_count: procedure(timer: PALLEGRO_TIMER; count: Int64); cdecl;
  al_set_timer_speed: procedure(timer: PALLEGRO_TIMER; speed_secs: Double); cdecl;
  al_set_video_playing: procedure(video: PALLEGRO_VIDEO; playing: Boolean); cdecl;
  al_set_voice_playing: function(voice: PALLEGRO_VOICE; val: Boolean): Boolean; cdecl;
  al_set_voice_position: function(voice: PALLEGRO_VOICE; val: Cardinal): Boolean; cdecl;
  al_set_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: Integer; min_h: Integer; max_w: Integer; max_h: Integer): Boolean; cdecl;
  al_set_window_position: procedure(display: PALLEGRO_DISPLAY; x: Integer; y: Integer); cdecl;
  al_set_window_title: procedure(display: PALLEGRO_DISPLAY; const title: PUTF8Char); cdecl;
  al_show_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_show_native_file_dialog: function(display: PALLEGRO_DISPLAY; dialog: PALLEGRO_FILECHOOSER): Boolean; cdecl;
  al_show_native_message_box: function(display: PALLEGRO_DISPLAY; const title: PUTF8Char; const heading: PUTF8Char; const text: PUTF8Char; const buttons: PUTF8Char; flags: Integer): Integer; cdecl;
  al_shutdown_font_addon: procedure(); cdecl;
  al_shutdown_image_addon: procedure(); cdecl;
  al_shutdown_native_dialog_addon: procedure(); cdecl;
  al_shutdown_primitives_addon: procedure(); cdecl;
  al_shutdown_ttf_addon: procedure(); cdecl;
  al_shutdown_video_addon: procedure(); cdecl;
  al_signal_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_start_audio_recorder: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_start_thread: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_start_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_start_video: procedure(video: PALLEGRO_VIDEO; mixer: PALLEGRO_MIXER); cdecl;
  al_start_video_with_voice: procedure(video: PALLEGRO_VIDEO; voice: PALLEGRO_VOICE); cdecl;
  al_stop_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_stop_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_stop_sample: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_stop_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_stop_samples: procedure(); cdecl;
  al_stop_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_store_state: procedure(state: PALLEGRO_STATE; flags: Integer); cdecl;
  al_toggle_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer; flags: Integer): Integer; cdecl;
  al_transform_coordinates: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle); cdecl;
  al_transform_coordinates_3d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_transform_coordinates_3d_projective: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_transform_coordinates_4d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle; w: PSingle); cdecl;
  al_translate_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single); cdecl;
  al_translate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single); cdecl;
  al_transpose_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_triangulate_polygon: function(const vertices: PSingle; vertex_stride: NativeUInt; const vertex_counts: PInteger; emit_triangle: al_triangulate_polygon_emit_triangle; userdata: Pointer): Boolean; cdecl;
  al_ungrab_mouse: function(): Boolean; cdecl;
  al_uninstall_audio: procedure(); cdecl;
  al_uninstall_haptic: procedure(); cdecl;
  al_uninstall_joystick: procedure(); cdecl;
  al_uninstall_keyboard: procedure(); cdecl;
  al_uninstall_mouse: procedure(); cdecl;
  al_uninstall_system: procedure(); cdecl;
  al_uninstall_touch_input: procedure(); cdecl;
  al_unlock_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_unlock_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_unlock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_unlock_sample_id: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_unlock_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_unmap_rgb: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte); cdecl;
  al_unmap_rgb_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle); cdecl;
  al_unmap_rgba: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte; a: PByte); cdecl;
  al_unmap_rgba_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle; a: PSingle); cdecl;
  al_unref_user_event: procedure(p1: PALLEGRO_USER_EVENT); cdecl;
  al_unregister_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_update_display_region: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_update_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_upload_and_play_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID; p4: Integer): Boolean; cdecl;
  al_upload_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_use_projection_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_use_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_use_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_ustr_append: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_append_chr: function(us: PALLEGRO_USTR; c: Int32): NativeUInt; cdecl;
  al_ustr_append_cstr: function(us: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_appendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char): Boolean varargs; cdecl;
  al_ustr_assign: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_assign_cstr: function(us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_assign_substr: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_compare: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_dup: function(const us: PALLEGRO_USTR): PALLEGRO_USTR; cdecl;
  al_ustr_dup_substr: function(const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_ustr_empty_string: function(): PALLEGRO_USTR; cdecl;
  al_ustr_encode_utf16: function(const us: PALLEGRO_USTR; s: PUInt16; n: NativeUInt): NativeUInt; cdecl;
  al_ustr_equal: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_find_cset: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_cset_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PUTF8Char): Integer; cdecl;
  al_ustr_find_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_find_replace: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PALLEGRO_USTR; const replace: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_replace_cstr: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PUTF8Char; const replace: PUTF8Char): Boolean; cdecl;
  al_ustr_find_set: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_set_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PUTF8Char): Integer; cdecl;
  al_ustr_find_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_free: procedure(us: PALLEGRO_USTR); cdecl;
  al_ustr_get: function(const us: PALLEGRO_USTR; pos: Integer): Int32; cdecl;
  al_ustr_get_next: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_has_prefix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_prefix_cstr: function(const u: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_has_suffix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_suffix_cstr: function(const us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_insert: function(us1: PALLEGRO_USTR; pos: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_insert_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_insert_cstr: function(us: PALLEGRO_USTR; pos: Integer; const us2: PUTF8Char): Boolean; cdecl;
  al_ustr_length: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_ltrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_ncompare: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; n: Integer): Integer; cdecl;
  al_ustr_new: function(const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ustr_new_from_buffer: function(const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ustr_new_from_utf16: function(const s: PUInt16): PALLEGRO_USTR; cdecl;
  al_ustr_newf: function(const fmt: PUTF8Char): PALLEGRO_USTR varargs; cdecl;
  al_ustr_next: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_offset: function(const us: PALLEGRO_USTR; index: Integer): Integer; cdecl;
  al_ustr_prev: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_prev_get: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_remove_chr: function(us: PALLEGRO_USTR; pos: Integer): Boolean; cdecl;
  al_ustr_remove_range: function(us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_replace_range: function(us1: PALLEGRO_USTR; start_pos1: Integer; end_pos1: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_rfind_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_rfind_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_rfind_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_rtrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_set_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_size: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_size_utf16: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_to_buffer: procedure(const us: PALLEGRO_USTR; buffer: PUTF8Char; size: Integer); cdecl;
  al_ustr_trim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_truncate: function(us: PALLEGRO_USTR; start_pos: Integer): Boolean; cdecl;
  al_ustr_vappendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char; ap: Pointer): Boolean; cdecl;
  al_utf16_encode: function(s: PUInt16; c: Int32): NativeUInt; cdecl;
  al_utf16_width: function(c: Integer): NativeUInt; cdecl;
  al_utf8_encode: function(s: PUTF8Char; c: Int32): NativeUInt; cdecl;
  al_utf8_width: function(c: Int32): NativeUInt; cdecl;
  al_vertical_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_vfprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char; args: Pointer): Integer; cdecl;
  al_wait_cond: procedure(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX); cdecl;
  al_wait_cond_until: function(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX; const timeout: PALLEGRO_TIMEOUT): Integer; cdecl;
  al_wait_for_event: procedure(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT); cdecl;
  al_wait_for_event_timed: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; secs: Single): Boolean; cdecl;
  al_wait_for_event_until: function(queue: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; timeout: PALLEGRO_TIMEOUT): Boolean; cdecl;
  al_wait_for_vsync: function(): Boolean; cdecl;
  al_win_add_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_add_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  al_win_remove_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_remove_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  PHYSFS_addToSearchPath: function(const newDir: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_caseFold: function(const from: PHYSFS_uint32; _to: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_close: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_deinit: function(): Integer; cdecl;
  PHYSFS_delete: function(const filename: PUTF8Char): Integer; cdecl;
  PHYSFS_deregisterArchiver: function(const ext: PUTF8Char): Integer; cdecl;
  PHYSFS_enumerate: function(const dir: PUTF8Char; c: PHYSFS_EnumerateCallback; d: Pointer): Integer; cdecl;
  PHYSFS_enumerateFiles: function(const dir: PUTF8Char): PPUTF8Char; cdecl;
  PHYSFS_enumerateFilesCallback: procedure(const dir: PUTF8Char; c: PHYSFS_EnumFilesCallback; d: Pointer); cdecl;
  PHYSFS_eof: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_exists: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_fileLength: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_flush: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_freeList: procedure(listVar: Pointer); cdecl;
  PHYSFS_getAllocator: function(): PPHYSFS_Allocator; cdecl;
  PHYSFS_getBaseDir: function(): PUTF8Char; cdecl;
  PHYSFS_getCdRomDirs: function(): PPUTF8Char; cdecl;
  PHYSFS_getCdRomDirsCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getDirSeparator: function(): PUTF8Char; cdecl;
  PHYSFS_getErrorByCode: function(code: PHYSFS_ErrorCode): PUTF8Char; cdecl;
  PHYSFS_getLastError: function(): PUTF8Char; cdecl;
  PHYSFS_getLastErrorCode: function(): PHYSFS_ErrorCode; cdecl;
  PHYSFS_getLastModTime: function(const filename: PUTF8Char): PHYSFS_sint64; cdecl;
  PHYSFS_getLinkedVersion: procedure(ver: PPHYSFS_Version); cdecl;
  PHYSFS_getMountPoint: function(const dir: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getPrefDir: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getRealDir: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getSearchPath: function(): PPUTF8Char; cdecl;
  PHYSFS_getSearchPathCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getUserDir: function(): PUTF8Char; cdecl;
  PHYSFS_getWriteDir: function(): PUTF8Char; cdecl;
  PHYSFS_init: function(const argv0: PUTF8Char): Integer; cdecl;
  PHYSFS_isDirectory: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_isInit: function(): Integer; cdecl;
  PHYSFS_isSymbolicLink: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_mkdir: function(const dirName: PUTF8Char): Integer; cdecl;
  PHYSFS_mount: function(const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountHandle: function(_file: PPHYSFS_File; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountIo: function(io: PPHYSFS_Io; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountMemory: function(const buf: Pointer; len: PHYSFS_uint64; del: PHYSFS_mountMemory_del; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_openAppend: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openRead: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openWrite: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_permitSymbolicLinks: procedure(allow: Integer); cdecl;
  PHYSFS_read: function(handle: PPHYSFS_File; buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_readBytes: function(handle: PPHYSFS_File; buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_readSBE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSBE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSBE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readSLE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSLE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSLE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readUBE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readUBE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readUBE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_readULE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readULE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readULE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_registerArchiver: function(const archiver: PPHYSFS_Archiver): Integer; cdecl;
  PHYSFS_removeFromSearchPath: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_seek: function(handle: PPHYSFS_File; pos: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setAllocator: function(const allocator: PPHYSFS_Allocator): Integer; cdecl;
  PHYSFS_setBuffer: function(handle: PPHYSFS_File; bufsize: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setErrorCode: procedure(code: PHYSFS_ErrorCode); cdecl;
  PHYSFS_setSaneConfig: function(const organization: PUTF8Char; const appName: PUTF8Char; const archiveExt: PUTF8Char; includeCdRoms: Integer; archivesFirst: Integer): Integer; cdecl;
  PHYSFS_setWriteDir: function(const newDir: PUTF8Char): Integer; cdecl;
  PHYSFS_stat: function(const fname: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
  PHYSFS_supportedArchiveTypes: function(): PPPHYSFS_ArchiveInfo; cdecl;
  PHYSFS_swapSBE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSBE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSBE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapSLE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSLE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSLE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapUBE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapUBE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapUBE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_swapULE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapULE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapULE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_symbolicLinksPermitted: function(): Integer; cdecl;
  PHYSFS_tell: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_ucs4stricmp: function(const str1: PPHYSFS_uint32; const str2: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_unmount: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_utf16stricmp: function(const str1: PPHYSFS_uint16; const str2: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_utf8FromLatin1: procedure(const src: PUTF8Char; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs2: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs4: procedure(const src: PPHYSFS_uint32; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUtf16: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8stricmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  PHYSFS_utf8ToUcs2: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs4: procedure(const src: PUTF8Char; dst: PPHYSFS_uint32; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUtf16: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_write: function(handle: PPHYSFS_File; const buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_writeBytes: function(handle: PPHYSFS_File; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_writeSBE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSBE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSBE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeSLE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSLE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSLE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeUBE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeUBE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeUBE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeULE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeULE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeULE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  zipClose: function(_file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  zipCloseFileInZip: function(_file: zipFile): Integer; cdecl;
  zipOpen: function(const pathname: PUTF8Char; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong): Integer; cdecl;
  zipWriteInFileInZip: function(_file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;

implementation

{$R Allegro.res}

uses
  System.SysUtils,
  System.IOUtils,
  System.Classes;

var
  LDllHandle: THandle;
  LDllName: string;

procedure LoadDLL;
var
  LStream: TResourceStream;
begin
  LStream := TResourceStream.Create(HInstance, 'RESDATA', RT_RCDATA);
  LDllName := TPath.GetTempFileName;
  LStream.SaveToFile(LDllName);
  FreeAndNil(LStream);

  LDllHandle := SafeLoadLibrary(LDllName);

  _al_trace_prefix := GetProcAddress(LDllHandle, '_al_trace_prefix');
  _al_trace_suffix := GetProcAddress(LDllHandle, '_al_trace_suffix');
  al_acknowledge_drawing_halt := GetProcAddress(LDllHandle, 'al_acknowledge_drawing_halt');
  al_acknowledge_drawing_resume := GetProcAddress(LDllHandle, 'al_acknowledge_drawing_resume');
  al_acknowledge_resize := GetProcAddress(LDllHandle, 'al_acknowledge_resize');
  al_add_config_comment := GetProcAddress(LDllHandle, 'al_add_config_comment');
  al_add_config_section := GetProcAddress(LDllHandle, 'al_add_config_section');
  al_add_new_bitmap_flag := GetProcAddress(LDllHandle, 'al_add_new_bitmap_flag');
  al_add_timer_count := GetProcAddress(LDllHandle, 'al_add_timer_count');
  al_append_menu_item := GetProcAddress(LDllHandle, 'al_append_menu_item');
  al_append_native_text_log := GetProcAddress(LDllHandle, 'al_append_native_text_log');
  al_append_path_component := GetProcAddress(LDllHandle, 'al_append_path_component');
  al_apply_window_constraints := GetProcAddress(LDllHandle, 'al_apply_window_constraints');
  al_attach_audio_stream_to_mixer := GetProcAddress(LDllHandle, 'al_attach_audio_stream_to_mixer');
  al_attach_audio_stream_to_voice := GetProcAddress(LDllHandle, 'al_attach_audio_stream_to_voice');
  al_attach_mixer_to_mixer := GetProcAddress(LDllHandle, 'al_attach_mixer_to_mixer');
  al_attach_mixer_to_voice := GetProcAddress(LDllHandle, 'al_attach_mixer_to_voice');
  al_attach_sample_instance_to_mixer := GetProcAddress(LDllHandle, 'al_attach_sample_instance_to_mixer');
  al_attach_sample_instance_to_voice := GetProcAddress(LDllHandle, 'al_attach_sample_instance_to_voice');
  al_attach_shader_source := GetProcAddress(LDllHandle, 'al_attach_shader_source');
  al_attach_shader_source_file := GetProcAddress(LDllHandle, 'al_attach_shader_source_file');
  al_backup_dirty_bitmap := GetProcAddress(LDllHandle, 'al_backup_dirty_bitmap');
  al_backup_dirty_bitmaps := GetProcAddress(LDllHandle, 'al_backup_dirty_bitmaps');
  al_broadcast_cond := GetProcAddress(LDllHandle, 'al_broadcast_cond');
  al_build_camera_transform := GetProcAddress(LDllHandle, 'al_build_camera_transform');
  al_build_menu := GetProcAddress(LDllHandle, 'al_build_menu');
  al_build_shader := GetProcAddress(LDllHandle, 'al_build_shader');
  al_build_transform := GetProcAddress(LDllHandle, 'al_build_transform');
  al_calculate_arc := GetProcAddress(LDllHandle, 'al_calculate_arc');
  al_calculate_ribbon := GetProcAddress(LDllHandle, 'al_calculate_ribbon');
  al_calculate_spline := GetProcAddress(LDllHandle, 'al_calculate_spline');
  al_calloc_with_context := GetProcAddress(LDllHandle, 'al_calloc_with_context');
  al_change_directory := GetProcAddress(LDllHandle, 'al_change_directory');
  al_check_inverse := GetProcAddress(LDllHandle, 'al_check_inverse');
  al_clear_depth_buffer := GetProcAddress(LDllHandle, 'al_clear_depth_buffer');
  al_clear_keyboard_state := GetProcAddress(LDllHandle, 'al_clear_keyboard_state');
  al_clear_to_color := GetProcAddress(LDllHandle, 'al_clear_to_color');
  al_clipboard_has_text := GetProcAddress(LDllHandle, 'al_clipboard_has_text');
  al_clone_bitmap := GetProcAddress(LDllHandle, 'al_clone_bitmap');
  al_clone_menu := GetProcAddress(LDllHandle, 'al_clone_menu');
  al_clone_menu_for_popup := GetProcAddress(LDllHandle, 'al_clone_menu_for_popup');
  al_clone_path := GetProcAddress(LDllHandle, 'al_clone_path');
  al_close_directory := GetProcAddress(LDllHandle, 'al_close_directory');
  al_close_native_text_log := GetProcAddress(LDllHandle, 'al_close_native_text_log');
  al_close_video := GetProcAddress(LDllHandle, 'al_close_video');
  al_color_cmyk := GetProcAddress(LDllHandle, 'al_color_cmyk');
  al_color_cmyk_to_rgb := GetProcAddress(LDllHandle, 'al_color_cmyk_to_rgb');
  al_color_distance_ciede2000 := GetProcAddress(LDllHandle, 'al_color_distance_ciede2000');
  al_color_hsl := GetProcAddress(LDllHandle, 'al_color_hsl');
  al_color_hsl_to_rgb := GetProcAddress(LDllHandle, 'al_color_hsl_to_rgb');
  al_color_hsv := GetProcAddress(LDllHandle, 'al_color_hsv');
  al_color_hsv_to_rgb := GetProcAddress(LDllHandle, 'al_color_hsv_to_rgb');
  al_color_html := GetProcAddress(LDllHandle, 'al_color_html');
  al_color_html_to_rgb := GetProcAddress(LDllHandle, 'al_color_html_to_rgb');
  al_color_lab := GetProcAddress(LDllHandle, 'al_color_lab');
  al_color_lab_to_rgb := GetProcAddress(LDllHandle, 'al_color_lab_to_rgb');
  al_color_lch := GetProcAddress(LDllHandle, 'al_color_lch');
  al_color_lch_to_rgb := GetProcAddress(LDllHandle, 'al_color_lch_to_rgb');
  al_color_linear := GetProcAddress(LDllHandle, 'al_color_linear');
  al_color_linear_to_rgb := GetProcAddress(LDllHandle, 'al_color_linear_to_rgb');
  al_color_name := GetProcAddress(LDllHandle, 'al_color_name');
  al_color_name_to_rgb := GetProcAddress(LDllHandle, 'al_color_name_to_rgb');
  al_color_oklab := GetProcAddress(LDllHandle, 'al_color_oklab');
  al_color_oklab_to_rgb := GetProcAddress(LDllHandle, 'al_color_oklab_to_rgb');
  al_color_rgb_to_cmyk := GetProcAddress(LDllHandle, 'al_color_rgb_to_cmyk');
  al_color_rgb_to_hsl := GetProcAddress(LDllHandle, 'al_color_rgb_to_hsl');
  al_color_rgb_to_hsv := GetProcAddress(LDllHandle, 'al_color_rgb_to_hsv');
  al_color_rgb_to_html := GetProcAddress(LDllHandle, 'al_color_rgb_to_html');
  al_color_rgb_to_lab := GetProcAddress(LDllHandle, 'al_color_rgb_to_lab');
  al_color_rgb_to_lch := GetProcAddress(LDllHandle, 'al_color_rgb_to_lch');
  al_color_rgb_to_linear := GetProcAddress(LDllHandle, 'al_color_rgb_to_linear');
  al_color_rgb_to_name := GetProcAddress(LDllHandle, 'al_color_rgb_to_name');
  al_color_rgb_to_oklab := GetProcAddress(LDllHandle, 'al_color_rgb_to_oklab');
  al_color_rgb_to_xyy := GetProcAddress(LDllHandle, 'al_color_rgb_to_xyy');
  al_color_rgb_to_xyz := GetProcAddress(LDllHandle, 'al_color_rgb_to_xyz');
  al_color_rgb_to_yuv := GetProcAddress(LDllHandle, 'al_color_rgb_to_yuv');
  al_color_xyy := GetProcAddress(LDllHandle, 'al_color_xyy');
  al_color_xyy_to_rgb := GetProcAddress(LDllHandle, 'al_color_xyy_to_rgb');
  al_color_xyz := GetProcAddress(LDllHandle, 'al_color_xyz');
  al_color_xyz_to_rgb := GetProcAddress(LDllHandle, 'al_color_xyz_to_rgb');
  al_color_yuv := GetProcAddress(LDllHandle, 'al_color_yuv');
  al_color_yuv_to_rgb := GetProcAddress(LDllHandle, 'al_color_yuv_to_rgb');
  al_compose_transform := GetProcAddress(LDllHandle, 'al_compose_transform');
  al_convert_bitmap := GetProcAddress(LDllHandle, 'al_convert_bitmap');
  al_convert_mask_to_alpha := GetProcAddress(LDllHandle, 'al_convert_mask_to_alpha');
  al_convert_memory_bitmaps := GetProcAddress(LDllHandle, 'al_convert_memory_bitmaps');
  al_copy_transform := GetProcAddress(LDllHandle, 'al_copy_transform');
  al_create_audio_recorder := GetProcAddress(LDllHandle, 'al_create_audio_recorder');
  al_create_audio_stream := GetProcAddress(LDllHandle, 'al_create_audio_stream');
  al_create_bitmap := GetProcAddress(LDllHandle, 'al_create_bitmap');
  al_create_builtin_font := GetProcAddress(LDllHandle, 'al_create_builtin_font');
  al_create_cond := GetProcAddress(LDllHandle, 'al_create_cond');
  al_create_config := GetProcAddress(LDllHandle, 'al_create_config');
  al_create_display := GetProcAddress(LDllHandle, 'al_create_display');
  al_create_event_queue := GetProcAddress(LDllHandle, 'al_create_event_queue');
  al_create_file_handle := GetProcAddress(LDllHandle, 'al_create_file_handle');
  al_create_fs_entry := GetProcAddress(LDllHandle, 'al_create_fs_entry');
  al_create_index_buffer := GetProcAddress(LDllHandle, 'al_create_index_buffer');
  al_create_menu := GetProcAddress(LDllHandle, 'al_create_menu');
  al_create_mixer := GetProcAddress(LDllHandle, 'al_create_mixer');
  al_create_mouse_cursor := GetProcAddress(LDllHandle, 'al_create_mouse_cursor');
  al_create_mutex := GetProcAddress(LDllHandle, 'al_create_mutex');
  al_create_mutex_recursive := GetProcAddress(LDllHandle, 'al_create_mutex_recursive');
  al_create_native_file_dialog := GetProcAddress(LDllHandle, 'al_create_native_file_dialog');
  al_create_path := GetProcAddress(LDllHandle, 'al_create_path');
  al_create_path_for_directory := GetProcAddress(LDllHandle, 'al_create_path_for_directory');
  al_create_popup_menu := GetProcAddress(LDllHandle, 'al_create_popup_menu');
  al_create_sample := GetProcAddress(LDllHandle, 'al_create_sample');
  al_create_sample_instance := GetProcAddress(LDllHandle, 'al_create_sample_instance');
  al_create_shader := GetProcAddress(LDllHandle, 'al_create_shader');
  al_create_sub_bitmap := GetProcAddress(LDllHandle, 'al_create_sub_bitmap');
  al_create_thread := GetProcAddress(LDllHandle, 'al_create_thread');
  al_create_thread_with_stacksize := GetProcAddress(LDllHandle, 'al_create_thread_with_stacksize');
  al_create_timer := GetProcAddress(LDllHandle, 'al_create_timer');
  al_create_vertex_buffer := GetProcAddress(LDllHandle, 'al_create_vertex_buffer');
  al_create_vertex_decl := GetProcAddress(LDllHandle, 'al_create_vertex_decl');
  al_create_voice := GetProcAddress(LDllHandle, 'al_create_voice');
  al_cstr := GetProcAddress(LDllHandle, 'al_cstr');
  al_cstr_dup := GetProcAddress(LDllHandle, 'al_cstr_dup');
  al_destroy_audio_recorder := GetProcAddress(LDllHandle, 'al_destroy_audio_recorder');
  al_destroy_audio_stream := GetProcAddress(LDllHandle, 'al_destroy_audio_stream');
  al_destroy_bitmap := GetProcAddress(LDllHandle, 'al_destroy_bitmap');
  al_destroy_cond := GetProcAddress(LDllHandle, 'al_destroy_cond');
  al_destroy_config := GetProcAddress(LDllHandle, 'al_destroy_config');
  al_destroy_display := GetProcAddress(LDllHandle, 'al_destroy_display');
  al_destroy_event_queue := GetProcAddress(LDllHandle, 'al_destroy_event_queue');
  al_destroy_font := GetProcAddress(LDllHandle, 'al_destroy_font');
  al_destroy_fs_entry := GetProcAddress(LDllHandle, 'al_destroy_fs_entry');
  al_destroy_index_buffer := GetProcAddress(LDllHandle, 'al_destroy_index_buffer');
  al_destroy_menu := GetProcAddress(LDllHandle, 'al_destroy_menu');
  al_destroy_mixer := GetProcAddress(LDllHandle, 'al_destroy_mixer');
  al_destroy_mouse_cursor := GetProcAddress(LDllHandle, 'al_destroy_mouse_cursor');
  al_destroy_mutex := GetProcAddress(LDllHandle, 'al_destroy_mutex');
  al_destroy_native_file_dialog := GetProcAddress(LDllHandle, 'al_destroy_native_file_dialog');
  al_destroy_path := GetProcAddress(LDllHandle, 'al_destroy_path');
  al_destroy_sample := GetProcAddress(LDllHandle, 'al_destroy_sample');
  al_destroy_sample_instance := GetProcAddress(LDllHandle, 'al_destroy_sample_instance');
  al_destroy_shader := GetProcAddress(LDllHandle, 'al_destroy_shader');
  al_destroy_thread := GetProcAddress(LDllHandle, 'al_destroy_thread');
  al_destroy_timer := GetProcAddress(LDllHandle, 'al_destroy_timer');
  al_destroy_user_event_source := GetProcAddress(LDllHandle, 'al_destroy_user_event_source');
  al_destroy_vertex_buffer := GetProcAddress(LDllHandle, 'al_destroy_vertex_buffer');
  al_destroy_vertex_decl := GetProcAddress(LDllHandle, 'al_destroy_vertex_decl');
  al_destroy_voice := GetProcAddress(LDllHandle, 'al_destroy_voice');
  al_detach_audio_stream := GetProcAddress(LDllHandle, 'al_detach_audio_stream');
  al_detach_mixer := GetProcAddress(LDllHandle, 'al_detach_mixer');
  al_detach_sample_instance := GetProcAddress(LDllHandle, 'al_detach_sample_instance');
  al_detach_voice := GetProcAddress(LDllHandle, 'al_detach_voice');
  al_disable_menu_event_source := GetProcAddress(LDllHandle, 'al_disable_menu_event_source');
  al_do_multiline_text := GetProcAddress(LDllHandle, 'al_do_multiline_text');
  al_do_multiline_ustr := GetProcAddress(LDllHandle, 'al_do_multiline_ustr');
  al_drain_audio_stream := GetProcAddress(LDllHandle, 'al_drain_audio_stream');
  al_draw_arc := GetProcAddress(LDllHandle, 'al_draw_arc');
  al_draw_bitmap := GetProcAddress(LDllHandle, 'al_draw_bitmap');
  al_draw_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_bitmap_region');
  al_draw_circle := GetProcAddress(LDllHandle, 'al_draw_circle');
  al_draw_ellipse := GetProcAddress(LDllHandle, 'al_draw_ellipse');
  al_draw_elliptical_arc := GetProcAddress(LDllHandle, 'al_draw_elliptical_arc');
  al_draw_filled_circle := GetProcAddress(LDllHandle, 'al_draw_filled_circle');
  al_draw_filled_ellipse := GetProcAddress(LDllHandle, 'al_draw_filled_ellipse');
  al_draw_filled_pieslice := GetProcAddress(LDllHandle, 'al_draw_filled_pieslice');
  al_draw_filled_polygon := GetProcAddress(LDllHandle, 'al_draw_filled_polygon');
  al_draw_filled_polygon_with_holes := GetProcAddress(LDllHandle, 'al_draw_filled_polygon_with_holes');
  al_draw_filled_rectangle := GetProcAddress(LDllHandle, 'al_draw_filled_rectangle');
  al_draw_filled_rounded_rectangle := GetProcAddress(LDllHandle, 'al_draw_filled_rounded_rectangle');
  al_draw_filled_triangle := GetProcAddress(LDllHandle, 'al_draw_filled_triangle');
  al_draw_glyph := GetProcAddress(LDllHandle, 'al_draw_glyph');
  al_draw_indexed_buffer := GetProcAddress(LDllHandle, 'al_draw_indexed_buffer');
  al_draw_indexed_prim := GetProcAddress(LDllHandle, 'al_draw_indexed_prim');
  al_draw_justified_text := GetProcAddress(LDllHandle, 'al_draw_justified_text');
  al_draw_justified_textf := GetProcAddress(LDllHandle, 'al_draw_justified_textf');
  al_draw_justified_ustr := GetProcAddress(LDllHandle, 'al_draw_justified_ustr');
  al_draw_line := GetProcAddress(LDllHandle, 'al_draw_line');
  al_draw_multiline_text := GetProcAddress(LDllHandle, 'al_draw_multiline_text');
  al_draw_multiline_textf := GetProcAddress(LDllHandle, 'al_draw_multiline_textf');
  al_draw_multiline_ustr := GetProcAddress(LDllHandle, 'al_draw_multiline_ustr');
  al_draw_pieslice := GetProcAddress(LDllHandle, 'al_draw_pieslice');
  al_draw_pixel := GetProcAddress(LDllHandle, 'al_draw_pixel');
  al_draw_polygon := GetProcAddress(LDllHandle, 'al_draw_polygon');
  al_draw_polyline := GetProcAddress(LDllHandle, 'al_draw_polyline');
  al_draw_prim := GetProcAddress(LDllHandle, 'al_draw_prim');
  al_draw_rectangle := GetProcAddress(LDllHandle, 'al_draw_rectangle');
  al_draw_ribbon := GetProcAddress(LDllHandle, 'al_draw_ribbon');
  al_draw_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_rotated_bitmap');
  al_draw_rounded_rectangle := GetProcAddress(LDllHandle, 'al_draw_rounded_rectangle');
  al_draw_scaled_bitmap := GetProcAddress(LDllHandle, 'al_draw_scaled_bitmap');
  al_draw_scaled_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_scaled_rotated_bitmap');
  al_draw_soft_line := GetProcAddress(LDllHandle, 'al_draw_soft_line');
  al_draw_soft_triangle := GetProcAddress(LDllHandle, 'al_draw_soft_triangle');
  al_draw_spline := GetProcAddress(LDllHandle, 'al_draw_spline');
  al_draw_text := GetProcAddress(LDllHandle, 'al_draw_text');
  al_draw_textf := GetProcAddress(LDllHandle, 'al_draw_textf');
  al_draw_tinted_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_bitmap');
  al_draw_tinted_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_tinted_bitmap_region');
  al_draw_tinted_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_rotated_bitmap');
  al_draw_tinted_scaled_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_bitmap');
  al_draw_tinted_scaled_rotated_bitmap := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_rotated_bitmap');
  al_draw_tinted_scaled_rotated_bitmap_region := GetProcAddress(LDllHandle, 'al_draw_tinted_scaled_rotated_bitmap_region');
  al_draw_triangle := GetProcAddress(LDllHandle, 'al_draw_triangle');
  al_draw_ustr := GetProcAddress(LDllHandle, 'al_draw_ustr');
  al_draw_vertex_buffer := GetProcAddress(LDllHandle, 'al_draw_vertex_buffer');
  al_drop_next_event := GetProcAddress(LDllHandle, 'al_drop_next_event');
  al_drop_path_tail := GetProcAddress(LDllHandle, 'al_drop_path_tail');
  al_emit_user_event := GetProcAddress(LDllHandle, 'al_emit_user_event');
  al_enable_menu_event_source := GetProcAddress(LDllHandle, 'al_enable_menu_event_source');
  al_fclearerr := GetProcAddress(LDllHandle, 'al_fclearerr');
  al_fclose := GetProcAddress(LDllHandle, 'al_fclose');
  al_feof := GetProcAddress(LDllHandle, 'al_feof');
  al_ferrmsg := GetProcAddress(LDllHandle, 'al_ferrmsg');
  al_ferror := GetProcAddress(LDllHandle, 'al_ferror');
  al_fflush := GetProcAddress(LDllHandle, 'al_fflush');
  al_fget_ustr := GetProcAddress(LDllHandle, 'al_fget_ustr');
  al_fgetc := GetProcAddress(LDllHandle, 'al_fgetc');
  al_fgets := GetProcAddress(LDllHandle, 'al_fgets');
  al_filename_exists := GetProcAddress(LDllHandle, 'al_filename_exists');
  al_fill_silence := GetProcAddress(LDllHandle, 'al_fill_silence');
  al_find_menu := GetProcAddress(LDllHandle, 'al_find_menu');
  al_find_menu_item := GetProcAddress(LDllHandle, 'al_find_menu_item');
  al_fixatan := GetProcAddress(LDllHandle, 'al_fixatan');
  al_fixatan2 := GetProcAddress(LDllHandle, 'al_fixatan2');
  al_fixhypot := GetProcAddress(LDllHandle, 'al_fixhypot');
  al_fixsqrt := GetProcAddress(LDllHandle, 'al_fixsqrt');
  al_flip_display := GetProcAddress(LDllHandle, 'al_flip_display');
  al_flush_event_queue := GetProcAddress(LDllHandle, 'al_flush_event_queue');
  al_fopen := GetProcAddress(LDllHandle, 'al_fopen');
  al_fopen_fd := GetProcAddress(LDllHandle, 'al_fopen_fd');
  al_fopen_interface := GetProcAddress(LDllHandle, 'al_fopen_interface');
  al_fopen_slice := GetProcAddress(LDllHandle, 'al_fopen_slice');
  al_for_each_fs_entry := GetProcAddress(LDllHandle, 'al_for_each_fs_entry');
  al_fprintf := GetProcAddress(LDllHandle, 'al_fprintf');
  al_fputc := GetProcAddress(LDllHandle, 'al_fputc');
  al_fputs := GetProcAddress(LDllHandle, 'al_fputs');
  al_fread := GetProcAddress(LDllHandle, 'al_fread');
  al_fread16be := GetProcAddress(LDllHandle, 'al_fread16be');
  al_fread16le := GetProcAddress(LDllHandle, 'al_fread16le');
  al_fread32be := GetProcAddress(LDllHandle, 'al_fread32be');
  al_fread32le := GetProcAddress(LDllHandle, 'al_fread32le');
  al_free_with_context := GetProcAddress(LDllHandle, 'al_free_with_context');
  al_fs_entry_exists := GetProcAddress(LDllHandle, 'al_fs_entry_exists');
  al_fseek := GetProcAddress(LDllHandle, 'al_fseek');
  al_fsize := GetProcAddress(LDllHandle, 'al_fsize');
  al_ftell := GetProcAddress(LDllHandle, 'al_ftell');
  al_fungetc := GetProcAddress(LDllHandle, 'al_fungetc');
  al_fwrite := GetProcAddress(LDllHandle, 'al_fwrite');
  al_fwrite16be := GetProcAddress(LDllHandle, 'al_fwrite16be');
  al_fwrite16le := GetProcAddress(LDllHandle, 'al_fwrite16le');
  al_fwrite32be := GetProcAddress(LDllHandle, 'al_fwrite32be');
  al_fwrite32le := GetProcAddress(LDllHandle, 'al_fwrite32le');
  al_get_allegro_acodec_version := GetProcAddress(LDllHandle, 'al_get_allegro_acodec_version');
  al_get_allegro_audio_version := GetProcAddress(LDllHandle, 'al_get_allegro_audio_version');
  al_get_allegro_color_version := GetProcAddress(LDllHandle, 'al_get_allegro_color_version');
  al_get_allegro_font_version := GetProcAddress(LDllHandle, 'al_get_allegro_font_version');
  al_get_allegro_image_version := GetProcAddress(LDllHandle, 'al_get_allegro_image_version');
  al_get_allegro_memfile_version := GetProcAddress(LDllHandle, 'al_get_allegro_memfile_version');
  al_get_allegro_native_dialog_version := GetProcAddress(LDllHandle, 'al_get_allegro_native_dialog_version');
  al_get_allegro_physfs_version := GetProcAddress(LDllHandle, 'al_get_allegro_physfs_version');
  al_get_allegro_primitives_version := GetProcAddress(LDllHandle, 'al_get_allegro_primitives_version');
  al_get_allegro_ttf_version := GetProcAddress(LDllHandle, 'al_get_allegro_ttf_version');
  al_get_allegro_version := GetProcAddress(LDllHandle, 'al_get_allegro_version');
  al_get_allegro_video_version := GetProcAddress(LDllHandle, 'al_get_allegro_video_version');
  al_get_app_name := GetProcAddress(LDllHandle, 'al_get_app_name');
  al_get_audio_depth_size := GetProcAddress(LDllHandle, 'al_get_audio_depth_size');
  al_get_audio_device_name := GetProcAddress(LDllHandle, 'al_get_audio_device_name');
  al_get_audio_output_device := GetProcAddress(LDllHandle, 'al_get_audio_output_device');
  al_get_audio_recorder_event := GetProcAddress(LDllHandle, 'al_get_audio_recorder_event');
  al_get_audio_recorder_event_source := GetProcAddress(LDllHandle, 'al_get_audio_recorder_event_source');
  al_get_audio_stream_attached := GetProcAddress(LDllHandle, 'al_get_audio_stream_attached');
  al_get_audio_stream_channels := GetProcAddress(LDllHandle, 'al_get_audio_stream_channels');
  al_get_audio_stream_depth := GetProcAddress(LDllHandle, 'al_get_audio_stream_depth');
  al_get_audio_stream_event_source := GetProcAddress(LDllHandle, 'al_get_audio_stream_event_source');
  al_get_audio_stream_fragment := GetProcAddress(LDllHandle, 'al_get_audio_stream_fragment');
  al_get_audio_stream_fragments := GetProcAddress(LDllHandle, 'al_get_audio_stream_fragments');
  al_get_audio_stream_frequency := GetProcAddress(LDllHandle, 'al_get_audio_stream_frequency');
  al_get_audio_stream_gain := GetProcAddress(LDllHandle, 'al_get_audio_stream_gain');
  al_get_audio_stream_length := GetProcAddress(LDllHandle, 'al_get_audio_stream_length');
  al_get_audio_stream_length_secs := GetProcAddress(LDllHandle, 'al_get_audio_stream_length_secs');
  al_get_audio_stream_pan := GetProcAddress(LDllHandle, 'al_get_audio_stream_pan');
  al_get_audio_stream_played_samples := GetProcAddress(LDllHandle, 'al_get_audio_stream_played_samples');
  al_get_audio_stream_playing := GetProcAddress(LDllHandle, 'al_get_audio_stream_playing');
  al_get_audio_stream_playmode := GetProcAddress(LDllHandle, 'al_get_audio_stream_playmode');
  al_get_audio_stream_position_secs := GetProcAddress(LDllHandle, 'al_get_audio_stream_position_secs');
  al_get_audio_stream_speed := GetProcAddress(LDllHandle, 'al_get_audio_stream_speed');
  al_get_available_audio_stream_fragments := GetProcAddress(LDllHandle, 'al_get_available_audio_stream_fragments');
  al_get_backbuffer := GetProcAddress(LDllHandle, 'al_get_backbuffer');
  al_get_bitmap_blend_color := GetProcAddress(LDllHandle, 'al_get_bitmap_blend_color');
  al_get_bitmap_blender := GetProcAddress(LDllHandle, 'al_get_bitmap_blender');
  al_get_bitmap_depth := GetProcAddress(LDllHandle, 'al_get_bitmap_depth');
  al_get_bitmap_flags := GetProcAddress(LDllHandle, 'al_get_bitmap_flags');
  al_get_bitmap_format := GetProcAddress(LDllHandle, 'al_get_bitmap_format');
  al_get_bitmap_height := GetProcAddress(LDllHandle, 'al_get_bitmap_height');
  al_get_bitmap_samples := GetProcAddress(LDllHandle, 'al_get_bitmap_samples');
  al_get_bitmap_width := GetProcAddress(LDllHandle, 'al_get_bitmap_width');
  al_get_bitmap_x := GetProcAddress(LDllHandle, 'al_get_bitmap_x');
  al_get_bitmap_y := GetProcAddress(LDllHandle, 'al_get_bitmap_y');
  al_get_blend_color := GetProcAddress(LDllHandle, 'al_get_blend_color');
  al_get_blender := GetProcAddress(LDllHandle, 'al_get_blender');
  al_get_channel_count := GetProcAddress(LDllHandle, 'al_get_channel_count');
  al_get_clipboard_text := GetProcAddress(LDllHandle, 'al_get_clipboard_text');
  al_get_clipping_rectangle := GetProcAddress(LDllHandle, 'al_get_clipping_rectangle');
  al_get_config_value := GetProcAddress(LDllHandle, 'al_get_config_value');
  al_get_cpu_count := GetProcAddress(LDllHandle, 'al_get_cpu_count');
  al_get_current_directory := GetProcAddress(LDllHandle, 'al_get_current_directory');
  al_get_current_display := GetProcAddress(LDllHandle, 'al_get_current_display');
  al_get_current_inverse_transform := GetProcAddress(LDllHandle, 'al_get_current_inverse_transform');
  al_get_current_projection_transform := GetProcAddress(LDllHandle, 'al_get_current_projection_transform');
  al_get_current_transform := GetProcAddress(LDllHandle, 'al_get_current_transform');
  al_get_default_menu_event_source := GetProcAddress(LDllHandle, 'al_get_default_menu_event_source');
  al_get_default_mixer := GetProcAddress(LDllHandle, 'al_get_default_mixer');
  al_get_default_shader_source := GetProcAddress(LDllHandle, 'al_get_default_shader_source');
  al_get_default_voice := GetProcAddress(LDllHandle, 'al_get_default_voice');
  al_get_display_event_source := GetProcAddress(LDllHandle, 'al_get_display_event_source');
  al_get_display_flags := GetProcAddress(LDllHandle, 'al_get_display_flags');
  al_get_display_format := GetProcAddress(LDllHandle, 'al_get_display_format');
  al_get_display_height := GetProcAddress(LDllHandle, 'al_get_display_height');
  al_get_display_menu := GetProcAddress(LDllHandle, 'al_get_display_menu');
  al_get_display_mode := GetProcAddress(LDllHandle, 'al_get_display_mode');
  al_get_display_option := GetProcAddress(LDllHandle, 'al_get_display_option');
  al_get_display_orientation := GetProcAddress(LDllHandle, 'al_get_display_orientation');
  al_get_display_refresh_rate := GetProcAddress(LDllHandle, 'al_get_display_refresh_rate');
  al_get_display_width := GetProcAddress(LDllHandle, 'al_get_display_width');
  al_get_errno := GetProcAddress(LDllHandle, 'al_get_errno');
  al_get_event_source_data := GetProcAddress(LDllHandle, 'al_get_event_source_data');
  al_get_fallback_font := GetProcAddress(LDllHandle, 'al_get_fallback_font');
  al_get_file_userdata := GetProcAddress(LDllHandle, 'al_get_file_userdata');
  al_get_first_config_entry := GetProcAddress(LDllHandle, 'al_get_first_config_entry');
  al_get_first_config_section := GetProcAddress(LDllHandle, 'al_get_first_config_section');
  al_get_font_ascent := GetProcAddress(LDllHandle, 'al_get_font_ascent');
  al_get_font_descent := GetProcAddress(LDllHandle, 'al_get_font_descent');
  al_get_font_line_height := GetProcAddress(LDllHandle, 'al_get_font_line_height');
  al_get_font_ranges := GetProcAddress(LDllHandle, 'al_get_font_ranges');
  al_get_fs_entry_atime := GetProcAddress(LDllHandle, 'al_get_fs_entry_atime');
  al_get_fs_entry_ctime := GetProcAddress(LDllHandle, 'al_get_fs_entry_ctime');
  al_get_fs_entry_mode := GetProcAddress(LDllHandle, 'al_get_fs_entry_mode');
  al_get_fs_entry_mtime := GetProcAddress(LDllHandle, 'al_get_fs_entry_mtime');
  al_get_fs_entry_name := GetProcAddress(LDllHandle, 'al_get_fs_entry_name');
  al_get_fs_entry_size := GetProcAddress(LDllHandle, 'al_get_fs_entry_size');
  al_get_fs_interface := GetProcAddress(LDllHandle, 'al_get_fs_interface');
  al_get_glyph := GetProcAddress(LDllHandle, 'al_get_glyph');
  al_get_glyph_advance := GetProcAddress(LDllHandle, 'al_get_glyph_advance');
  al_get_glyph_dimensions := GetProcAddress(LDllHandle, 'al_get_glyph_dimensions');
  al_get_glyph_width := GetProcAddress(LDllHandle, 'al_get_glyph_width');
  al_get_haptic_autocenter := GetProcAddress(LDllHandle, 'al_get_haptic_autocenter');
  al_get_haptic_capabilities := GetProcAddress(LDllHandle, 'al_get_haptic_capabilities');
  al_get_haptic_effect_duration := GetProcAddress(LDllHandle, 'al_get_haptic_effect_duration');
  al_get_haptic_from_display := GetProcAddress(LDllHandle, 'al_get_haptic_from_display');
  al_get_haptic_from_joystick := GetProcAddress(LDllHandle, 'al_get_haptic_from_joystick');
  al_get_haptic_from_keyboard := GetProcAddress(LDllHandle, 'al_get_haptic_from_keyboard');
  al_get_haptic_from_mouse := GetProcAddress(LDllHandle, 'al_get_haptic_from_mouse');
  al_get_haptic_from_touch_input := GetProcAddress(LDllHandle, 'al_get_haptic_from_touch_input');
  al_get_haptic_gain := GetProcAddress(LDllHandle, 'al_get_haptic_gain');
  al_get_index_buffer_size := GetProcAddress(LDllHandle, 'al_get_index_buffer_size');
  al_get_joystick := GetProcAddress(LDllHandle, 'al_get_joystick');
  al_get_joystick_active := GetProcAddress(LDllHandle, 'al_get_joystick_active');
  al_get_joystick_axis_name := GetProcAddress(LDllHandle, 'al_get_joystick_axis_name');
  al_get_joystick_button_name := GetProcAddress(LDllHandle, 'al_get_joystick_button_name');
  al_get_joystick_event_source := GetProcAddress(LDllHandle, 'al_get_joystick_event_source');
  al_get_joystick_name := GetProcAddress(LDllHandle, 'al_get_joystick_name');
  al_get_joystick_num_axes := GetProcAddress(LDllHandle, 'al_get_joystick_num_axes');
  al_get_joystick_num_buttons := GetProcAddress(LDllHandle, 'al_get_joystick_num_buttons');
  al_get_joystick_num_sticks := GetProcAddress(LDllHandle, 'al_get_joystick_num_sticks');
  al_get_joystick_state := GetProcAddress(LDllHandle, 'al_get_joystick_state');
  al_get_joystick_stick_flags := GetProcAddress(LDllHandle, 'al_get_joystick_stick_flags');
  al_get_joystick_stick_name := GetProcAddress(LDllHandle, 'al_get_joystick_stick_name');
  al_get_keyboard_event_source := GetProcAddress(LDllHandle, 'al_get_keyboard_event_source');
  al_get_keyboard_state := GetProcAddress(LDllHandle, 'al_get_keyboard_state');
  al_get_max_haptic_effects := GetProcAddress(LDllHandle, 'al_get_max_haptic_effects');
  al_get_menu_item_caption := GetProcAddress(LDllHandle, 'al_get_menu_item_caption');
  al_get_menu_item_flags := GetProcAddress(LDllHandle, 'al_get_menu_item_flags');
  al_get_menu_item_icon := GetProcAddress(LDllHandle, 'al_get_menu_item_icon');
  al_get_mixer_attached := GetProcAddress(LDllHandle, 'al_get_mixer_attached');
  al_get_mixer_channels := GetProcAddress(LDllHandle, 'al_get_mixer_channels');
  al_get_mixer_depth := GetProcAddress(LDllHandle, 'al_get_mixer_depth');
  al_get_mixer_frequency := GetProcAddress(LDllHandle, 'al_get_mixer_frequency');
  al_get_mixer_gain := GetProcAddress(LDllHandle, 'al_get_mixer_gain');
  al_get_mixer_playing := GetProcAddress(LDllHandle, 'al_get_mixer_playing');
  al_get_mixer_quality := GetProcAddress(LDllHandle, 'al_get_mixer_quality');
  al_get_monitor_dpi := GetProcAddress(LDllHandle, 'al_get_monitor_dpi');
  al_get_monitor_info := GetProcAddress(LDllHandle, 'al_get_monitor_info');
  al_get_monitor_refresh_rate := GetProcAddress(LDllHandle, 'al_get_monitor_refresh_rate');
  al_get_mouse_cursor_position := GetProcAddress(LDllHandle, 'al_get_mouse_cursor_position');
  al_get_mouse_emulation_mode := GetProcAddress(LDllHandle, 'al_get_mouse_emulation_mode');
  al_get_mouse_event_source := GetProcAddress(LDllHandle, 'al_get_mouse_event_source');
  al_get_mouse_num_axes := GetProcAddress(LDllHandle, 'al_get_mouse_num_axes');
  al_get_mouse_num_buttons := GetProcAddress(LDllHandle, 'al_get_mouse_num_buttons');
  al_get_mouse_state := GetProcAddress(LDllHandle, 'al_get_mouse_state');
  al_get_mouse_state_axis := GetProcAddress(LDllHandle, 'al_get_mouse_state_axis');
  al_get_mouse_wheel_precision := GetProcAddress(LDllHandle, 'al_get_mouse_wheel_precision');
  al_get_native_file_dialog_count := GetProcAddress(LDllHandle, 'al_get_native_file_dialog_count');
  al_get_native_file_dialog_path := GetProcAddress(LDllHandle, 'al_get_native_file_dialog_path');
  al_get_native_text_log_event_source := GetProcAddress(LDllHandle, 'al_get_native_text_log_event_source');
  al_get_new_bitmap_depth := GetProcAddress(LDllHandle, 'al_get_new_bitmap_depth');
  al_get_new_bitmap_flags := GetProcAddress(LDllHandle, 'al_get_new_bitmap_flags');
  al_get_new_bitmap_format := GetProcAddress(LDllHandle, 'al_get_new_bitmap_format');
  al_get_new_bitmap_samples := GetProcAddress(LDllHandle, 'al_get_new_bitmap_samples');
  al_get_new_display_adapter := GetProcAddress(LDllHandle, 'al_get_new_display_adapter');
  al_get_new_display_flags := GetProcAddress(LDllHandle, 'al_get_new_display_flags');
  al_get_new_display_option := GetProcAddress(LDllHandle, 'al_get_new_display_option');
  al_get_new_display_refresh_rate := GetProcAddress(LDllHandle, 'al_get_new_display_refresh_rate');
  al_get_new_file_interface := GetProcAddress(LDllHandle, 'al_get_new_file_interface');
  al_get_new_window_position := GetProcAddress(LDllHandle, 'al_get_new_window_position');
  al_get_new_window_title := GetProcAddress(LDllHandle, 'al_get_new_window_title');
  al_get_next_config_entry := GetProcAddress(LDllHandle, 'al_get_next_config_entry');
  al_get_next_config_section := GetProcAddress(LDllHandle, 'al_get_next_config_section');
  al_get_next_event := GetProcAddress(LDllHandle, 'al_get_next_event');
  al_get_num_audio_output_devices := GetProcAddress(LDllHandle, 'al_get_num_audio_output_devices');
  al_get_num_display_modes := GetProcAddress(LDllHandle, 'al_get_num_display_modes');
  al_get_num_joysticks := GetProcAddress(LDllHandle, 'al_get_num_joysticks');
  al_get_num_video_adapters := GetProcAddress(LDllHandle, 'al_get_num_video_adapters');
  al_get_opengl_extension_list := GetProcAddress(LDllHandle, 'al_get_opengl_extension_list');
  al_get_opengl_fbo := GetProcAddress(LDllHandle, 'al_get_opengl_fbo');
  al_get_opengl_proc_address := GetProcAddress(LDllHandle, 'al_get_opengl_proc_address');
  al_get_opengl_program_object := GetProcAddress(LDllHandle, 'al_get_opengl_program_object');
  al_get_opengl_texture := GetProcAddress(LDllHandle, 'al_get_opengl_texture');
  al_get_opengl_texture_position := GetProcAddress(LDllHandle, 'al_get_opengl_texture_position');
  al_get_opengl_texture_size := GetProcAddress(LDllHandle, 'al_get_opengl_texture_size');
  al_get_opengl_variant := GetProcAddress(LDllHandle, 'al_get_opengl_variant');
  al_get_opengl_version := GetProcAddress(LDllHandle, 'al_get_opengl_version');
  al_get_org_name := GetProcAddress(LDllHandle, 'al_get_org_name');
  al_get_parent_bitmap := GetProcAddress(LDllHandle, 'al_get_parent_bitmap');
  al_get_path_basename := GetProcAddress(LDllHandle, 'al_get_path_basename');
  al_get_path_component := GetProcAddress(LDllHandle, 'al_get_path_component');
  al_get_path_drive := GetProcAddress(LDllHandle, 'al_get_path_drive');
  al_get_path_extension := GetProcAddress(LDllHandle, 'al_get_path_extension');
  al_get_path_filename := GetProcAddress(LDllHandle, 'al_get_path_filename');
  al_get_path_num_components := GetProcAddress(LDllHandle, 'al_get_path_num_components');
  al_get_path_tail := GetProcAddress(LDllHandle, 'al_get_path_tail');
  al_get_pixel := GetProcAddress(LDllHandle, 'al_get_pixel');
  al_get_pixel_block_height := GetProcAddress(LDllHandle, 'al_get_pixel_block_height');
  al_get_pixel_block_size := GetProcAddress(LDllHandle, 'al_get_pixel_block_size');
  al_get_pixel_block_width := GetProcAddress(LDllHandle, 'al_get_pixel_block_width');
  al_get_pixel_format_bits := GetProcAddress(LDllHandle, 'al_get_pixel_format_bits');
  al_get_pixel_size := GetProcAddress(LDllHandle, 'al_get_pixel_size');
  al_get_ram_size := GetProcAddress(LDllHandle, 'al_get_ram_size');
  al_get_sample := GetProcAddress(LDllHandle, 'al_get_sample');
  al_get_sample_channels := GetProcAddress(LDllHandle, 'al_get_sample_channels');
  al_get_sample_data := GetProcAddress(LDllHandle, 'al_get_sample_data');
  al_get_sample_depth := GetProcAddress(LDllHandle, 'al_get_sample_depth');
  al_get_sample_frequency := GetProcAddress(LDllHandle, 'al_get_sample_frequency');
  al_get_sample_instance_attached := GetProcAddress(LDllHandle, 'al_get_sample_instance_attached');
  al_get_sample_instance_channels := GetProcAddress(LDllHandle, 'al_get_sample_instance_channels');
  al_get_sample_instance_depth := GetProcAddress(LDllHandle, 'al_get_sample_instance_depth');
  al_get_sample_instance_frequency := GetProcAddress(LDllHandle, 'al_get_sample_instance_frequency');
  al_get_sample_instance_gain := GetProcAddress(LDllHandle, 'al_get_sample_instance_gain');
  al_get_sample_instance_length := GetProcAddress(LDllHandle, 'al_get_sample_instance_length');
  al_get_sample_instance_pan := GetProcAddress(LDllHandle, 'al_get_sample_instance_pan');
  al_get_sample_instance_playing := GetProcAddress(LDllHandle, 'al_get_sample_instance_playing');
  al_get_sample_instance_playmode := GetProcAddress(LDllHandle, 'al_get_sample_instance_playmode');
  al_get_sample_instance_position := GetProcAddress(LDllHandle, 'al_get_sample_instance_position');
  al_get_sample_instance_speed := GetProcAddress(LDllHandle, 'al_get_sample_instance_speed');
  al_get_sample_instance_time := GetProcAddress(LDllHandle, 'al_get_sample_instance_time');
  al_get_sample_length := GetProcAddress(LDllHandle, 'al_get_sample_length');
  al_get_separate_bitmap_blender := GetProcAddress(LDllHandle, 'al_get_separate_bitmap_blender');
  al_get_separate_blender := GetProcAddress(LDllHandle, 'al_get_separate_blender');
  al_get_shader_log := GetProcAddress(LDllHandle, 'al_get_shader_log');
  al_get_shader_platform := GetProcAddress(LDllHandle, 'al_get_shader_platform');
  al_get_standard_path := GetProcAddress(LDllHandle, 'al_get_standard_path');
  al_get_system_config := GetProcAddress(LDllHandle, 'al_get_system_config');
  al_get_system_driver := GetProcAddress(LDllHandle, 'al_get_system_driver');
  al_get_system_id := GetProcAddress(LDllHandle, 'al_get_system_id');
  al_get_target_bitmap := GetProcAddress(LDllHandle, 'al_get_target_bitmap');
  al_get_text_dimensions := GetProcAddress(LDllHandle, 'al_get_text_dimensions');
  al_get_text_width := GetProcAddress(LDllHandle, 'al_get_text_width');
  al_get_thread_should_stop := GetProcAddress(LDllHandle, 'al_get_thread_should_stop');
  al_get_time := GetProcAddress(LDllHandle, 'al_get_time');
  al_get_timer_count := GetProcAddress(LDllHandle, 'al_get_timer_count');
  al_get_timer_event_source := GetProcAddress(LDllHandle, 'al_get_timer_event_source');
  al_get_timer_speed := GetProcAddress(LDllHandle, 'al_get_timer_speed');
  al_get_timer_started := GetProcAddress(LDllHandle, 'al_get_timer_started');
  al_get_touch_input_event_source := GetProcAddress(LDllHandle, 'al_get_touch_input_event_source');
  al_get_touch_input_mouse_emulation_event_source := GetProcAddress(LDllHandle, 'al_get_touch_input_mouse_emulation_event_source');
  al_get_touch_input_state := GetProcAddress(LDllHandle, 'al_get_touch_input_state');
  al_get_ustr_dimensions := GetProcAddress(LDllHandle, 'al_get_ustr_dimensions');
  al_get_ustr_width := GetProcAddress(LDllHandle, 'al_get_ustr_width');
  al_get_vertex_buffer_size := GetProcAddress(LDllHandle, 'al_get_vertex_buffer_size');
  al_get_video_audio_rate := GetProcAddress(LDllHandle, 'al_get_video_audio_rate');
  al_get_video_event_source := GetProcAddress(LDllHandle, 'al_get_video_event_source');
  al_get_video_fps := GetProcAddress(LDllHandle, 'al_get_video_fps');
  al_get_video_frame := GetProcAddress(LDllHandle, 'al_get_video_frame');
  al_get_video_position := GetProcAddress(LDllHandle, 'al_get_video_position');
  al_get_video_scaled_height := GetProcAddress(LDllHandle, 'al_get_video_scaled_height');
  al_get_video_scaled_width := GetProcAddress(LDllHandle, 'al_get_video_scaled_width');
  al_get_voice_channels := GetProcAddress(LDllHandle, 'al_get_voice_channels');
  al_get_voice_depth := GetProcAddress(LDllHandle, 'al_get_voice_depth');
  al_get_voice_frequency := GetProcAddress(LDllHandle, 'al_get_voice_frequency');
  al_get_voice_playing := GetProcAddress(LDllHandle, 'al_get_voice_playing');
  al_get_voice_position := GetProcAddress(LDllHandle, 'al_get_voice_position');
  al_get_win_window_handle := GetProcAddress(LDllHandle, 'al_get_win_window_handle');
  al_get_window_constraints := GetProcAddress(LDllHandle, 'al_get_window_constraints');
  al_get_window_position := GetProcAddress(LDllHandle, 'al_get_window_position');
  al_grab_font_from_bitmap := GetProcAddress(LDllHandle, 'al_grab_font_from_bitmap');
  al_grab_mouse := GetProcAddress(LDllHandle, 'al_grab_mouse');
  al_have_opengl_extension := GetProcAddress(LDllHandle, 'al_have_opengl_extension');
  al_hide_mouse_cursor := GetProcAddress(LDllHandle, 'al_hide_mouse_cursor');
  al_hold_bitmap_drawing := GetProcAddress(LDllHandle, 'al_hold_bitmap_drawing');
  al_horizontal_shear_transform := GetProcAddress(LDllHandle, 'al_horizontal_shear_transform');
  al_identify_bitmap := GetProcAddress(LDllHandle, 'al_identify_bitmap');
  al_identify_bitmap_f := GetProcAddress(LDllHandle, 'al_identify_bitmap_f');
  al_identify_sample := GetProcAddress(LDllHandle, 'al_identify_sample');
  al_identify_sample_f := GetProcAddress(LDllHandle, 'al_identify_sample_f');
  al_identify_video := GetProcAddress(LDllHandle, 'al_identify_video');
  al_identify_video_f := GetProcAddress(LDllHandle, 'al_identify_video_f');
  al_identity_transform := GetProcAddress(LDllHandle, 'al_identity_transform');
  al_inhibit_screensaver := GetProcAddress(LDllHandle, 'al_inhibit_screensaver');
  al_init_acodec_addon := GetProcAddress(LDllHandle, 'al_init_acodec_addon');
  al_init_font_addon := GetProcAddress(LDllHandle, 'al_init_font_addon');
  al_init_image_addon := GetProcAddress(LDllHandle, 'al_init_image_addon');
  al_init_native_dialog_addon := GetProcAddress(LDllHandle, 'al_init_native_dialog_addon');
  al_init_primitives_addon := GetProcAddress(LDllHandle, 'al_init_primitives_addon');
  al_init_timeout := GetProcAddress(LDllHandle, 'al_init_timeout');
  al_init_ttf_addon := GetProcAddress(LDllHandle, 'al_init_ttf_addon');
  al_init_user_event_source := GetProcAddress(LDllHandle, 'al_init_user_event_source');
  al_init_video_addon := GetProcAddress(LDllHandle, 'al_init_video_addon');
  al_insert_menu_item := GetProcAddress(LDllHandle, 'al_insert_menu_item');
  al_insert_path_component := GetProcAddress(LDllHandle, 'al_insert_path_component');
  al_install_audio := GetProcAddress(LDllHandle, 'al_install_audio');
  al_install_haptic := GetProcAddress(LDllHandle, 'al_install_haptic');
  al_install_joystick := GetProcAddress(LDllHandle, 'al_install_joystick');
  al_install_keyboard := GetProcAddress(LDllHandle, 'al_install_keyboard');
  al_install_mouse := GetProcAddress(LDllHandle, 'al_install_mouse');
  al_install_system := GetProcAddress(LDllHandle, 'al_install_system');
  al_install_touch_input := GetProcAddress(LDllHandle, 'al_install_touch_input');
  al_invert_transform := GetProcAddress(LDllHandle, 'al_invert_transform');
  al_is_acodec_addon_initialized := GetProcAddress(LDllHandle, 'al_is_acodec_addon_initialized');
  al_is_audio_installed := GetProcAddress(LDllHandle, 'al_is_audio_installed');
  al_is_audio_recorder_recording := GetProcAddress(LDllHandle, 'al_is_audio_recorder_recording');
  al_is_bitmap_drawing_held := GetProcAddress(LDllHandle, 'al_is_bitmap_drawing_held');
  al_is_bitmap_locked := GetProcAddress(LDllHandle, 'al_is_bitmap_locked');
  al_is_color_valid := GetProcAddress(LDllHandle, 'al_is_color_valid');
  al_is_compatible_bitmap := GetProcAddress(LDllHandle, 'al_is_compatible_bitmap');
  al_is_display_haptic := GetProcAddress(LDllHandle, 'al_is_display_haptic');
  al_is_event_queue_empty := GetProcAddress(LDllHandle, 'al_is_event_queue_empty');
  al_is_event_queue_paused := GetProcAddress(LDllHandle, 'al_is_event_queue_paused');
  al_is_event_source_registered := GetProcAddress(LDllHandle, 'al_is_event_source_registered');
  al_is_font_addon_initialized := GetProcAddress(LDllHandle, 'al_is_font_addon_initialized');
  al_is_haptic_active := GetProcAddress(LDllHandle, 'al_is_haptic_active');
  al_is_haptic_capable := GetProcAddress(LDllHandle, 'al_is_haptic_capable');
  al_is_haptic_effect_ok := GetProcAddress(LDllHandle, 'al_is_haptic_effect_ok');
  al_is_haptic_effect_playing := GetProcAddress(LDllHandle, 'al_is_haptic_effect_playing');
  al_is_haptic_installed := GetProcAddress(LDllHandle, 'al_is_haptic_installed');
  al_is_image_addon_initialized := GetProcAddress(LDllHandle, 'al_is_image_addon_initialized');
  al_is_joystick_haptic := GetProcAddress(LDllHandle, 'al_is_joystick_haptic');
  al_is_joystick_installed := GetProcAddress(LDllHandle, 'al_is_joystick_installed');
  al_is_keyboard_haptic := GetProcAddress(LDllHandle, 'al_is_keyboard_haptic');
  al_is_keyboard_installed := GetProcAddress(LDllHandle, 'al_is_keyboard_installed');
  al_is_mouse_haptic := GetProcAddress(LDllHandle, 'al_is_mouse_haptic');
  al_is_mouse_installed := GetProcAddress(LDllHandle, 'al_is_mouse_installed');
  al_is_native_dialog_addon_initialized := GetProcAddress(LDllHandle, 'al_is_native_dialog_addon_initialized');
  al_is_primitives_addon_initialized := GetProcAddress(LDllHandle, 'al_is_primitives_addon_initialized');
  al_is_sub_bitmap := GetProcAddress(LDllHandle, 'al_is_sub_bitmap');
  al_is_system_installed := GetProcAddress(LDllHandle, 'al_is_system_installed');
  al_is_touch_input_haptic := GetProcAddress(LDllHandle, 'al_is_touch_input_haptic');
  al_is_touch_input_installed := GetProcAddress(LDllHandle, 'al_is_touch_input_installed');
  al_is_ttf_addon_initialized := GetProcAddress(LDllHandle, 'al_is_ttf_addon_initialized');
  al_is_video_addon_initialized := GetProcAddress(LDllHandle, 'al_is_video_addon_initialized');
  al_is_video_playing := GetProcAddress(LDllHandle, 'al_is_video_playing');
  al_join_paths := GetProcAddress(LDllHandle, 'al_join_paths');
  al_join_thread := GetProcAddress(LDllHandle, 'al_join_thread');
  al_key_down := GetProcAddress(LDllHandle, 'al_key_down');
  al_keycode_to_name := GetProcAddress(LDllHandle, 'al_keycode_to_name');
  al_load_audio_stream := GetProcAddress(LDllHandle, 'al_load_audio_stream');
  al_load_audio_stream_f := GetProcAddress(LDllHandle, 'al_load_audio_stream_f');
  al_load_bitmap := GetProcAddress(LDllHandle, 'al_load_bitmap');
  al_load_bitmap_f := GetProcAddress(LDllHandle, 'al_load_bitmap_f');
  al_load_bitmap_flags := GetProcAddress(LDllHandle, 'al_load_bitmap_flags');
  al_load_bitmap_flags_f := GetProcAddress(LDllHandle, 'al_load_bitmap_flags_f');
  al_load_bitmap_font := GetProcAddress(LDllHandle, 'al_load_bitmap_font');
  al_load_bitmap_font_flags := GetProcAddress(LDllHandle, 'al_load_bitmap_font_flags');
  al_load_config_file := GetProcAddress(LDllHandle, 'al_load_config_file');
  al_load_config_file_f := GetProcAddress(LDllHandle, 'al_load_config_file_f');
  al_load_font := GetProcAddress(LDllHandle, 'al_load_font');
  al_load_sample := GetProcAddress(LDllHandle, 'al_load_sample');
  al_load_sample_f := GetProcAddress(LDllHandle, 'al_load_sample_f');
  al_load_ttf_font := GetProcAddress(LDllHandle, 'al_load_ttf_font');
  al_load_ttf_font_f := GetProcAddress(LDllHandle, 'al_load_ttf_font_f');
  al_load_ttf_font_stretch := GetProcAddress(LDllHandle, 'al_load_ttf_font_stretch');
  al_load_ttf_font_stretch_f := GetProcAddress(LDllHandle, 'al_load_ttf_font_stretch_f');
  al_lock_bitmap := GetProcAddress(LDllHandle, 'al_lock_bitmap');
  al_lock_bitmap_blocked := GetProcAddress(LDllHandle, 'al_lock_bitmap_blocked');
  al_lock_bitmap_region := GetProcAddress(LDllHandle, 'al_lock_bitmap_region');
  al_lock_bitmap_region_blocked := GetProcAddress(LDllHandle, 'al_lock_bitmap_region_blocked');
  al_lock_index_buffer := GetProcAddress(LDllHandle, 'al_lock_index_buffer');
  al_lock_mutex := GetProcAddress(LDllHandle, 'al_lock_mutex');
  al_lock_sample_id := GetProcAddress(LDllHandle, 'al_lock_sample_id');
  al_lock_vertex_buffer := GetProcAddress(LDllHandle, 'al_lock_vertex_buffer');
  al_make_directory := GetProcAddress(LDllHandle, 'al_make_directory');
  al_make_path_canonical := GetProcAddress(LDllHandle, 'al_make_path_canonical');
  al_make_temp_file := GetProcAddress(LDllHandle, 'al_make_temp_file');
  al_malloc_with_context := GetProcAddress(LDllHandle, 'al_malloc_with_context');
  al_map_rgb := GetProcAddress(LDllHandle, 'al_map_rgb');
  al_map_rgb_f := GetProcAddress(LDllHandle, 'al_map_rgb_f');
  al_map_rgba := GetProcAddress(LDllHandle, 'al_map_rgba');
  al_map_rgba_f := GetProcAddress(LDllHandle, 'al_map_rgba_f');
  al_merge_config := GetProcAddress(LDllHandle, 'al_merge_config');
  al_merge_config_into := GetProcAddress(LDllHandle, 'al_merge_config_into');
  al_mouse_button_down := GetProcAddress(LDllHandle, 'al_mouse_button_down');
  al_open_directory := GetProcAddress(LDllHandle, 'al_open_directory');
  al_open_fs_entry := GetProcAddress(LDllHandle, 'al_open_fs_entry');
  al_open_memfile := GetProcAddress(LDllHandle, 'al_open_memfile');
  al_open_native_text_log := GetProcAddress(LDllHandle, 'al_open_native_text_log');
  al_open_video := GetProcAddress(LDllHandle, 'al_open_video');
  al_orthographic_transform := GetProcAddress(LDllHandle, 'al_orthographic_transform');
  al_path_cstr := GetProcAddress(LDllHandle, 'al_path_cstr');
  al_path_ustr := GetProcAddress(LDllHandle, 'al_path_ustr');
  al_pause_event_queue := GetProcAddress(LDllHandle, 'al_pause_event_queue');
  al_peek_next_event := GetProcAddress(LDllHandle, 'al_peek_next_event');
  al_perspective_transform := GetProcAddress(LDllHandle, 'al_perspective_transform');
  al_play_haptic_effect := GetProcAddress(LDllHandle, 'al_play_haptic_effect');
  al_play_sample := GetProcAddress(LDllHandle, 'al_play_sample');
  al_play_sample_instance := GetProcAddress(LDllHandle, 'al_play_sample_instance');
  al_popup_menu := GetProcAddress(LDllHandle, 'al_popup_menu');
  al_premul_rgba := GetProcAddress(LDllHandle, 'al_premul_rgba');
  al_premul_rgba_f := GetProcAddress(LDllHandle, 'al_premul_rgba_f');
  al_put_blended_pixel := GetProcAddress(LDllHandle, 'al_put_blended_pixel');
  al_put_pixel := GetProcAddress(LDllHandle, 'al_put_pixel');
  al_read_directory := GetProcAddress(LDllHandle, 'al_read_directory');
  al_realloc_with_context := GetProcAddress(LDllHandle, 'al_realloc_with_context');
  al_rebase_path := GetProcAddress(LDllHandle, 'al_rebase_path');
  al_reconfigure_joysticks := GetProcAddress(LDllHandle, 'al_reconfigure_joysticks');
  al_ref_buffer := GetProcAddress(LDllHandle, 'al_ref_buffer');
  al_ref_cstr := GetProcAddress(LDllHandle, 'al_ref_cstr');
  al_ref_ustr := GetProcAddress(LDllHandle, 'al_ref_ustr');
  al_register_assert_handler := GetProcAddress(LDllHandle, 'al_register_assert_handler');
  al_register_audio_stream_loader := GetProcAddress(LDllHandle, 'al_register_audio_stream_loader');
  al_register_audio_stream_loader_f := GetProcAddress(LDllHandle, 'al_register_audio_stream_loader_f');
  al_register_bitmap_identifier := GetProcAddress(LDllHandle, 'al_register_bitmap_identifier');
  al_register_bitmap_loader := GetProcAddress(LDllHandle, 'al_register_bitmap_loader');
  al_register_bitmap_loader_f := GetProcAddress(LDllHandle, 'al_register_bitmap_loader_f');
  al_register_bitmap_saver := GetProcAddress(LDllHandle, 'al_register_bitmap_saver');
  al_register_bitmap_saver_f := GetProcAddress(LDllHandle, 'al_register_bitmap_saver_f');
  al_register_event_source := GetProcAddress(LDllHandle, 'al_register_event_source');
  al_register_font_loader := GetProcAddress(LDllHandle, 'al_register_font_loader');
  al_register_sample_identifier := GetProcAddress(LDllHandle, 'al_register_sample_identifier');
  al_register_sample_loader := GetProcAddress(LDllHandle, 'al_register_sample_loader');
  al_register_sample_loader_f := GetProcAddress(LDllHandle, 'al_register_sample_loader_f');
  al_register_sample_saver := GetProcAddress(LDllHandle, 'al_register_sample_saver');
  al_register_sample_saver_f := GetProcAddress(LDllHandle, 'al_register_sample_saver_f');
  al_register_trace_handler := GetProcAddress(LDllHandle, 'al_register_trace_handler');
  al_release_haptic := GetProcAddress(LDllHandle, 'al_release_haptic');
  al_release_haptic_effect := GetProcAddress(LDllHandle, 'al_release_haptic_effect');
  al_release_joystick := GetProcAddress(LDllHandle, 'al_release_joystick');
  al_remove_config_key := GetProcAddress(LDllHandle, 'al_remove_config_key');
  al_remove_config_section := GetProcAddress(LDllHandle, 'al_remove_config_section');
  al_remove_display_menu := GetProcAddress(LDllHandle, 'al_remove_display_menu');
  al_remove_filename := GetProcAddress(LDllHandle, 'al_remove_filename');
  al_remove_fs_entry := GetProcAddress(LDllHandle, 'al_remove_fs_entry');
  al_remove_menu_item := GetProcAddress(LDllHandle, 'al_remove_menu_item');
  al_remove_opengl_fbo := GetProcAddress(LDllHandle, 'al_remove_opengl_fbo');
  al_remove_path_component := GetProcAddress(LDllHandle, 'al_remove_path_component');
  al_reparent_bitmap := GetProcAddress(LDllHandle, 'al_reparent_bitmap');
  al_replace_path_component := GetProcAddress(LDllHandle, 'al_replace_path_component');
  al_reserve_samples := GetProcAddress(LDllHandle, 'al_reserve_samples');
  al_reset_bitmap_blender := GetProcAddress(LDllHandle, 'al_reset_bitmap_blender');
  al_reset_clipping_rectangle := GetProcAddress(LDllHandle, 'al_reset_clipping_rectangle');
  al_reset_new_display_options := GetProcAddress(LDllHandle, 'al_reset_new_display_options');
  al_resize_display := GetProcAddress(LDllHandle, 'al_resize_display');
  al_rest := GetProcAddress(LDllHandle, 'al_rest');
  al_restore_default_mixer := GetProcAddress(LDllHandle, 'al_restore_default_mixer');
  al_restore_state := GetProcAddress(LDllHandle, 'al_restore_state');
  al_resume_timer := GetProcAddress(LDllHandle, 'al_resume_timer');
  al_rewind_audio_stream := GetProcAddress(LDllHandle, 'al_rewind_audio_stream');
  al_rotate_transform := GetProcAddress(LDllHandle, 'al_rotate_transform');
  al_rotate_transform_3d := GetProcAddress(LDllHandle, 'al_rotate_transform_3d');
  al_rumble_haptic := GetProcAddress(LDllHandle, 'al_rumble_haptic');
  al_run_detached_thread := GetProcAddress(LDllHandle, 'al_run_detached_thread');
  al_save_bitmap := GetProcAddress(LDllHandle, 'al_save_bitmap');
  al_save_bitmap_f := GetProcAddress(LDllHandle, 'al_save_bitmap_f');
  al_save_config_file := GetProcAddress(LDllHandle, 'al_save_config_file');
  al_save_config_file_f := GetProcAddress(LDllHandle, 'al_save_config_file_f');
  al_save_sample := GetProcAddress(LDllHandle, 'al_save_sample');
  al_save_sample_f := GetProcAddress(LDllHandle, 'al_save_sample_f');
  al_scale_transform := GetProcAddress(LDllHandle, 'al_scale_transform');
  al_scale_transform_3d := GetProcAddress(LDllHandle, 'al_scale_transform_3d');
  al_seek_audio_stream_secs := GetProcAddress(LDllHandle, 'al_seek_audio_stream_secs');
  al_seek_video := GetProcAddress(LDllHandle, 'al_seek_video');
  al_set_app_name := GetProcAddress(LDllHandle, 'al_set_app_name');
  al_set_audio_stream_channel_matrix := GetProcAddress(LDllHandle, 'al_set_audio_stream_channel_matrix');
  al_set_audio_stream_fragment := GetProcAddress(LDllHandle, 'al_set_audio_stream_fragment');
  al_set_audio_stream_gain := GetProcAddress(LDllHandle, 'al_set_audio_stream_gain');
  al_set_audio_stream_loop_secs := GetProcAddress(LDllHandle, 'al_set_audio_stream_loop_secs');
  al_set_audio_stream_pan := GetProcAddress(LDllHandle, 'al_set_audio_stream_pan');
  al_set_audio_stream_playing := GetProcAddress(LDllHandle, 'al_set_audio_stream_playing');
  al_set_audio_stream_playmode := GetProcAddress(LDllHandle, 'al_set_audio_stream_playmode');
  al_set_audio_stream_speed := GetProcAddress(LDllHandle, 'al_set_audio_stream_speed');
  al_set_bitmap_blend_color := GetProcAddress(LDllHandle, 'al_set_bitmap_blend_color');
  al_set_bitmap_blender := GetProcAddress(LDllHandle, 'al_set_bitmap_blender');
  al_set_blend_color := GetProcAddress(LDllHandle, 'al_set_blend_color');
  al_set_blender := GetProcAddress(LDllHandle, 'al_set_blender');
  al_set_clipboard_text := GetProcAddress(LDllHandle, 'al_set_clipboard_text');
  al_set_clipping_rectangle := GetProcAddress(LDllHandle, 'al_set_clipping_rectangle');
  al_set_config_value := GetProcAddress(LDllHandle, 'al_set_config_value');
  al_set_current_opengl_context := GetProcAddress(LDllHandle, 'al_set_current_opengl_context');
  al_set_default_mixer := GetProcAddress(LDllHandle, 'al_set_default_mixer');
  al_set_default_voice := GetProcAddress(LDllHandle, 'al_set_default_voice');
  al_set_display_flag := GetProcAddress(LDllHandle, 'al_set_display_flag');
  al_set_display_icon := GetProcAddress(LDllHandle, 'al_set_display_icon');
  al_set_display_icons := GetProcAddress(LDllHandle, 'al_set_display_icons');
  al_set_display_menu := GetProcAddress(LDllHandle, 'al_set_display_menu');
  al_set_display_option := GetProcAddress(LDllHandle, 'al_set_display_option');
  al_set_errno := GetProcAddress(LDllHandle, 'al_set_errno');
  al_set_event_source_data := GetProcAddress(LDllHandle, 'al_set_event_source_data');
  al_set_exe_name := GetProcAddress(LDllHandle, 'al_set_exe_name');
  al_set_fallback_font := GetProcAddress(LDllHandle, 'al_set_fallback_font');
  al_set_fs_interface := GetProcAddress(LDllHandle, 'al_set_fs_interface');
  al_set_haptic_autocenter := GetProcAddress(LDllHandle, 'al_set_haptic_autocenter');
  al_set_haptic_gain := GetProcAddress(LDllHandle, 'al_set_haptic_gain');
  al_set_keyboard_leds := GetProcAddress(LDllHandle, 'al_set_keyboard_leds');
  al_set_memory_interface := GetProcAddress(LDllHandle, 'al_set_memory_interface');
  al_set_menu_item_caption := GetProcAddress(LDllHandle, 'al_set_menu_item_caption');
  al_set_menu_item_flags := GetProcAddress(LDllHandle, 'al_set_menu_item_flags');
  al_set_menu_item_icon := GetProcAddress(LDllHandle, 'al_set_menu_item_icon');
  al_set_mixer_frequency := GetProcAddress(LDllHandle, 'al_set_mixer_frequency');
  al_set_mixer_gain := GetProcAddress(LDllHandle, 'al_set_mixer_gain');
  al_set_mixer_playing := GetProcAddress(LDllHandle, 'al_set_mixer_playing');
  al_set_mixer_postprocess_callback := GetProcAddress(LDllHandle, 'al_set_mixer_postprocess_callback');
  al_set_mixer_quality := GetProcAddress(LDllHandle, 'al_set_mixer_quality');
  al_set_mouse_axis := GetProcAddress(LDllHandle, 'al_set_mouse_axis');
  al_set_mouse_cursor := GetProcAddress(LDllHandle, 'al_set_mouse_cursor');
  al_set_mouse_emulation_mode := GetProcAddress(LDllHandle, 'al_set_mouse_emulation_mode');
  al_set_mouse_w := GetProcAddress(LDllHandle, 'al_set_mouse_w');
  al_set_mouse_wheel_precision := GetProcAddress(LDllHandle, 'al_set_mouse_wheel_precision');
  al_set_mouse_xy := GetProcAddress(LDllHandle, 'al_set_mouse_xy');
  al_set_mouse_z := GetProcAddress(LDllHandle, 'al_set_mouse_z');
  al_set_new_bitmap_depth := GetProcAddress(LDllHandle, 'al_set_new_bitmap_depth');
  al_set_new_bitmap_flags := GetProcAddress(LDllHandle, 'al_set_new_bitmap_flags');
  al_set_new_bitmap_format := GetProcAddress(LDllHandle, 'al_set_new_bitmap_format');
  al_set_new_bitmap_samples := GetProcAddress(LDllHandle, 'al_set_new_bitmap_samples');
  al_set_new_display_adapter := GetProcAddress(LDllHandle, 'al_set_new_display_adapter');
  al_set_new_display_flags := GetProcAddress(LDllHandle, 'al_set_new_display_flags');
  al_set_new_display_option := GetProcAddress(LDllHandle, 'al_set_new_display_option');
  al_set_new_display_refresh_rate := GetProcAddress(LDllHandle, 'al_set_new_display_refresh_rate');
  al_set_new_file_interface := GetProcAddress(LDllHandle, 'al_set_new_file_interface');
  al_set_new_window_position := GetProcAddress(LDllHandle, 'al_set_new_window_position');
  al_set_new_window_title := GetProcAddress(LDllHandle, 'al_set_new_window_title');
  al_set_org_name := GetProcAddress(LDllHandle, 'al_set_org_name');
  al_set_path_drive := GetProcAddress(LDllHandle, 'al_set_path_drive');
  al_set_path_extension := GetProcAddress(LDllHandle, 'al_set_path_extension');
  al_set_path_filename := GetProcAddress(LDllHandle, 'al_set_path_filename');
  al_set_physfs_file_interface := GetProcAddress(LDllHandle, 'al_set_physfs_file_interface');
  al_set_render_state := GetProcAddress(LDllHandle, 'al_set_render_state');
  al_set_sample := GetProcAddress(LDllHandle, 'al_set_sample');
  al_set_sample_instance_channel_matrix := GetProcAddress(LDllHandle, 'al_set_sample_instance_channel_matrix');
  al_set_sample_instance_gain := GetProcAddress(LDllHandle, 'al_set_sample_instance_gain');
  al_set_sample_instance_length := GetProcAddress(LDllHandle, 'al_set_sample_instance_length');
  al_set_sample_instance_pan := GetProcAddress(LDllHandle, 'al_set_sample_instance_pan');
  al_set_sample_instance_playing := GetProcAddress(LDllHandle, 'al_set_sample_instance_playing');
  al_set_sample_instance_playmode := GetProcAddress(LDllHandle, 'al_set_sample_instance_playmode');
  al_set_sample_instance_position := GetProcAddress(LDllHandle, 'al_set_sample_instance_position');
  al_set_sample_instance_speed := GetProcAddress(LDllHandle, 'al_set_sample_instance_speed');
  al_set_separate_bitmap_blender := GetProcAddress(LDllHandle, 'al_set_separate_bitmap_blender');
  al_set_separate_blender := GetProcAddress(LDllHandle, 'al_set_separate_blender');
  al_set_shader_bool := GetProcAddress(LDllHandle, 'al_set_shader_bool');
  al_set_shader_float := GetProcAddress(LDllHandle, 'al_set_shader_float');
  al_set_shader_float_vector := GetProcAddress(LDllHandle, 'al_set_shader_float_vector');
  al_set_shader_int := GetProcAddress(LDllHandle, 'al_set_shader_int');
  al_set_shader_int_vector := GetProcAddress(LDllHandle, 'al_set_shader_int_vector');
  al_set_shader_matrix := GetProcAddress(LDllHandle, 'al_set_shader_matrix');
  al_set_shader_sampler := GetProcAddress(LDllHandle, 'al_set_shader_sampler');
  al_set_standard_file_interface := GetProcAddress(LDllHandle, 'al_set_standard_file_interface');
  al_set_standard_fs_interface := GetProcAddress(LDllHandle, 'al_set_standard_fs_interface');
  al_set_system_mouse_cursor := GetProcAddress(LDllHandle, 'al_set_system_mouse_cursor');
  al_set_target_backbuffer := GetProcAddress(LDllHandle, 'al_set_target_backbuffer');
  al_set_target_bitmap := GetProcAddress(LDllHandle, 'al_set_target_bitmap');
  al_set_thread_should_stop := GetProcAddress(LDllHandle, 'al_set_thread_should_stop');
  al_set_timer_count := GetProcAddress(LDllHandle, 'al_set_timer_count');
  al_set_timer_speed := GetProcAddress(LDllHandle, 'al_set_timer_speed');
  al_set_video_playing := GetProcAddress(LDllHandle, 'al_set_video_playing');
  al_set_voice_playing := GetProcAddress(LDllHandle, 'al_set_voice_playing');
  al_set_voice_position := GetProcAddress(LDllHandle, 'al_set_voice_position');
  al_set_window_constraints := GetProcAddress(LDllHandle, 'al_set_window_constraints');
  al_set_window_position := GetProcAddress(LDllHandle, 'al_set_window_position');
  al_set_window_title := GetProcAddress(LDllHandle, 'al_set_window_title');
  al_show_mouse_cursor := GetProcAddress(LDllHandle, 'al_show_mouse_cursor');
  al_show_native_file_dialog := GetProcAddress(LDllHandle, 'al_show_native_file_dialog');
  al_show_native_message_box := GetProcAddress(LDllHandle, 'al_show_native_message_box');
  al_shutdown_font_addon := GetProcAddress(LDllHandle, 'al_shutdown_font_addon');
  al_shutdown_image_addon := GetProcAddress(LDllHandle, 'al_shutdown_image_addon');
  al_shutdown_native_dialog_addon := GetProcAddress(LDllHandle, 'al_shutdown_native_dialog_addon');
  al_shutdown_primitives_addon := GetProcAddress(LDllHandle, 'al_shutdown_primitives_addon');
  al_shutdown_ttf_addon := GetProcAddress(LDllHandle, 'al_shutdown_ttf_addon');
  al_shutdown_video_addon := GetProcAddress(LDllHandle, 'al_shutdown_video_addon');
  al_signal_cond := GetProcAddress(LDllHandle, 'al_signal_cond');
  al_start_audio_recorder := GetProcAddress(LDllHandle, 'al_start_audio_recorder');
  al_start_thread := GetProcAddress(LDllHandle, 'al_start_thread');
  al_start_timer := GetProcAddress(LDllHandle, 'al_start_timer');
  al_start_video := GetProcAddress(LDllHandle, 'al_start_video');
  al_start_video_with_voice := GetProcAddress(LDllHandle, 'al_start_video_with_voice');
  al_stop_audio_recorder := GetProcAddress(LDllHandle, 'al_stop_audio_recorder');
  al_stop_haptic_effect := GetProcAddress(LDllHandle, 'al_stop_haptic_effect');
  al_stop_sample := GetProcAddress(LDllHandle, 'al_stop_sample');
  al_stop_sample_instance := GetProcAddress(LDllHandle, 'al_stop_sample_instance');
  al_stop_samples := GetProcAddress(LDllHandle, 'al_stop_samples');
  al_stop_timer := GetProcAddress(LDllHandle, 'al_stop_timer');
  al_store_state := GetProcAddress(LDllHandle, 'al_store_state');
  al_toggle_menu_item_flags := GetProcAddress(LDllHandle, 'al_toggle_menu_item_flags');
  al_transform_coordinates := GetProcAddress(LDllHandle, 'al_transform_coordinates');
  al_transform_coordinates_3d := GetProcAddress(LDllHandle, 'al_transform_coordinates_3d');
  al_transform_coordinates_3d_projective := GetProcAddress(LDllHandle, 'al_transform_coordinates_3d_projective');
  al_transform_coordinates_4d := GetProcAddress(LDllHandle, 'al_transform_coordinates_4d');
  al_translate_transform := GetProcAddress(LDllHandle, 'al_translate_transform');
  al_translate_transform_3d := GetProcAddress(LDllHandle, 'al_translate_transform_3d');
  al_transpose_transform := GetProcAddress(LDllHandle, 'al_transpose_transform');
  al_triangulate_polygon := GetProcAddress(LDllHandle, 'al_triangulate_polygon');
  al_ungrab_mouse := GetProcAddress(LDllHandle, 'al_ungrab_mouse');
  al_uninstall_audio := GetProcAddress(LDllHandle, 'al_uninstall_audio');
  al_uninstall_haptic := GetProcAddress(LDllHandle, 'al_uninstall_haptic');
  al_uninstall_joystick := GetProcAddress(LDllHandle, 'al_uninstall_joystick');
  al_uninstall_keyboard := GetProcAddress(LDllHandle, 'al_uninstall_keyboard');
  al_uninstall_mouse := GetProcAddress(LDllHandle, 'al_uninstall_mouse');
  al_uninstall_system := GetProcAddress(LDllHandle, 'al_uninstall_system');
  al_uninstall_touch_input := GetProcAddress(LDllHandle, 'al_uninstall_touch_input');
  al_unlock_bitmap := GetProcAddress(LDllHandle, 'al_unlock_bitmap');
  al_unlock_index_buffer := GetProcAddress(LDllHandle, 'al_unlock_index_buffer');
  al_unlock_mutex := GetProcAddress(LDllHandle, 'al_unlock_mutex');
  al_unlock_sample_id := GetProcAddress(LDllHandle, 'al_unlock_sample_id');
  al_unlock_vertex_buffer := GetProcAddress(LDllHandle, 'al_unlock_vertex_buffer');
  al_unmap_rgb := GetProcAddress(LDllHandle, 'al_unmap_rgb');
  al_unmap_rgb_f := GetProcAddress(LDllHandle, 'al_unmap_rgb_f');
  al_unmap_rgba := GetProcAddress(LDllHandle, 'al_unmap_rgba');
  al_unmap_rgba_f := GetProcAddress(LDllHandle, 'al_unmap_rgba_f');
  al_unref_user_event := GetProcAddress(LDllHandle, 'al_unref_user_event');
  al_unregister_event_source := GetProcAddress(LDllHandle, 'al_unregister_event_source');
  al_update_display_region := GetProcAddress(LDllHandle, 'al_update_display_region');
  al_update_fs_entry := GetProcAddress(LDllHandle, 'al_update_fs_entry');
  al_upload_and_play_haptic_effect := GetProcAddress(LDllHandle, 'al_upload_and_play_haptic_effect');
  al_upload_haptic_effect := GetProcAddress(LDllHandle, 'al_upload_haptic_effect');
  al_use_projection_transform := GetProcAddress(LDllHandle, 'al_use_projection_transform');
  al_use_shader := GetProcAddress(LDllHandle, 'al_use_shader');
  al_use_transform := GetProcAddress(LDllHandle, 'al_use_transform');
  al_ustr_append := GetProcAddress(LDllHandle, 'al_ustr_append');
  al_ustr_append_chr := GetProcAddress(LDllHandle, 'al_ustr_append_chr');
  al_ustr_append_cstr := GetProcAddress(LDllHandle, 'al_ustr_append_cstr');
  al_ustr_appendf := GetProcAddress(LDllHandle, 'al_ustr_appendf');
  al_ustr_assign := GetProcAddress(LDllHandle, 'al_ustr_assign');
  al_ustr_assign_cstr := GetProcAddress(LDllHandle, 'al_ustr_assign_cstr');
  al_ustr_assign_substr := GetProcAddress(LDllHandle, 'al_ustr_assign_substr');
  al_ustr_compare := GetProcAddress(LDllHandle, 'al_ustr_compare');
  al_ustr_dup := GetProcAddress(LDllHandle, 'al_ustr_dup');
  al_ustr_dup_substr := GetProcAddress(LDllHandle, 'al_ustr_dup_substr');
  al_ustr_empty_string := GetProcAddress(LDllHandle, 'al_ustr_empty_string');
  al_ustr_encode_utf16 := GetProcAddress(LDllHandle, 'al_ustr_encode_utf16');
  al_ustr_equal := GetProcAddress(LDllHandle, 'al_ustr_equal');
  al_ustr_find_chr := GetProcAddress(LDllHandle, 'al_ustr_find_chr');
  al_ustr_find_cset := GetProcAddress(LDllHandle, 'al_ustr_find_cset');
  al_ustr_find_cset_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_cset_cstr');
  al_ustr_find_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_cstr');
  al_ustr_find_replace := GetProcAddress(LDllHandle, 'al_ustr_find_replace');
  al_ustr_find_replace_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_replace_cstr');
  al_ustr_find_set := GetProcAddress(LDllHandle, 'al_ustr_find_set');
  al_ustr_find_set_cstr := GetProcAddress(LDllHandle, 'al_ustr_find_set_cstr');
  al_ustr_find_str := GetProcAddress(LDllHandle, 'al_ustr_find_str');
  al_ustr_free := GetProcAddress(LDllHandle, 'al_ustr_free');
  al_ustr_get := GetProcAddress(LDllHandle, 'al_ustr_get');
  al_ustr_get_next := GetProcAddress(LDllHandle, 'al_ustr_get_next');
  al_ustr_has_prefix := GetProcAddress(LDllHandle, 'al_ustr_has_prefix');
  al_ustr_has_prefix_cstr := GetProcAddress(LDllHandle, 'al_ustr_has_prefix_cstr');
  al_ustr_has_suffix := GetProcAddress(LDllHandle, 'al_ustr_has_suffix');
  al_ustr_has_suffix_cstr := GetProcAddress(LDllHandle, 'al_ustr_has_suffix_cstr');
  al_ustr_insert := GetProcAddress(LDllHandle, 'al_ustr_insert');
  al_ustr_insert_chr := GetProcAddress(LDllHandle, 'al_ustr_insert_chr');
  al_ustr_insert_cstr := GetProcAddress(LDllHandle, 'al_ustr_insert_cstr');
  al_ustr_length := GetProcAddress(LDllHandle, 'al_ustr_length');
  al_ustr_ltrim_ws := GetProcAddress(LDllHandle, 'al_ustr_ltrim_ws');
  al_ustr_ncompare := GetProcAddress(LDllHandle, 'al_ustr_ncompare');
  al_ustr_new := GetProcAddress(LDllHandle, 'al_ustr_new');
  al_ustr_new_from_buffer := GetProcAddress(LDllHandle, 'al_ustr_new_from_buffer');
  al_ustr_new_from_utf16 := GetProcAddress(LDllHandle, 'al_ustr_new_from_utf16');
  al_ustr_newf := GetProcAddress(LDllHandle, 'al_ustr_newf');
  al_ustr_next := GetProcAddress(LDllHandle, 'al_ustr_next');
  al_ustr_offset := GetProcAddress(LDllHandle, 'al_ustr_offset');
  al_ustr_prev := GetProcAddress(LDllHandle, 'al_ustr_prev');
  al_ustr_prev_get := GetProcAddress(LDllHandle, 'al_ustr_prev_get');
  al_ustr_remove_chr := GetProcAddress(LDllHandle, 'al_ustr_remove_chr');
  al_ustr_remove_range := GetProcAddress(LDllHandle, 'al_ustr_remove_range');
  al_ustr_replace_range := GetProcAddress(LDllHandle, 'al_ustr_replace_range');
  al_ustr_rfind_chr := GetProcAddress(LDllHandle, 'al_ustr_rfind_chr');
  al_ustr_rfind_cstr := GetProcAddress(LDllHandle, 'al_ustr_rfind_cstr');
  al_ustr_rfind_str := GetProcAddress(LDllHandle, 'al_ustr_rfind_str');
  al_ustr_rtrim_ws := GetProcAddress(LDllHandle, 'al_ustr_rtrim_ws');
  al_ustr_set_chr := GetProcAddress(LDllHandle, 'al_ustr_set_chr');
  al_ustr_size := GetProcAddress(LDllHandle, 'al_ustr_size');
  al_ustr_size_utf16 := GetProcAddress(LDllHandle, 'al_ustr_size_utf16');
  al_ustr_to_buffer := GetProcAddress(LDllHandle, 'al_ustr_to_buffer');
  al_ustr_trim_ws := GetProcAddress(LDllHandle, 'al_ustr_trim_ws');
  al_ustr_truncate := GetProcAddress(LDllHandle, 'al_ustr_truncate');
  al_ustr_vappendf := GetProcAddress(LDllHandle, 'al_ustr_vappendf');
  al_utf16_encode := GetProcAddress(LDllHandle, 'al_utf16_encode');
  al_utf16_width := GetProcAddress(LDllHandle, 'al_utf16_width');
  al_utf8_encode := GetProcAddress(LDllHandle, 'al_utf8_encode');
  al_utf8_width := GetProcAddress(LDllHandle, 'al_utf8_width');
  al_vertical_shear_transform := GetProcAddress(LDllHandle, 'al_vertical_shear_transform');
  al_vfprintf := GetProcAddress(LDllHandle, 'al_vfprintf');
  al_wait_cond := GetProcAddress(LDllHandle, 'al_wait_cond');
  al_wait_cond_until := GetProcAddress(LDllHandle, 'al_wait_cond_until');
  al_wait_for_event := GetProcAddress(LDllHandle, 'al_wait_for_event');
  al_wait_for_event_timed := GetProcAddress(LDllHandle, 'al_wait_for_event_timed');
  al_wait_for_event_until := GetProcAddress(LDllHandle, 'al_wait_for_event_until');
  al_wait_for_vsync := GetProcAddress(LDllHandle, 'al_wait_for_vsync');
  al_win_add_window_callback := GetProcAddress(LDllHandle, 'al_win_add_window_callback');
  al_win_remove_window_callback := GetProcAddress(LDllHandle, 'al_win_remove_window_callback');
  PHYSFS_addToSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_addToSearchPath');
  PHYSFS_caseFold := GetProcAddress(LDllHandle, 'PHYSFS_caseFold');
  PHYSFS_close := GetProcAddress(LDllHandle, 'PHYSFS_close');
  PHYSFS_deinit := GetProcAddress(LDllHandle, 'PHYSFS_deinit');
  PHYSFS_delete := GetProcAddress(LDllHandle, 'PHYSFS_delete');
  PHYSFS_deregisterArchiver := GetProcAddress(LDllHandle, 'PHYSFS_deregisterArchiver');
  PHYSFS_enumerate := GetProcAddress(LDllHandle, 'PHYSFS_enumerate');
  PHYSFS_enumerateFiles := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFiles');
  PHYSFS_enumerateFilesCallback := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFilesCallback');
  PHYSFS_eof := GetProcAddress(LDllHandle, 'PHYSFS_eof');
  PHYSFS_exists := GetProcAddress(LDllHandle, 'PHYSFS_exists');
  PHYSFS_fileLength := GetProcAddress(LDllHandle, 'PHYSFS_fileLength');
  PHYSFS_flush := GetProcAddress(LDllHandle, 'PHYSFS_flush');
  PHYSFS_freeList := GetProcAddress(LDllHandle, 'PHYSFS_freeList');
  PHYSFS_getAllocator := GetProcAddress(LDllHandle, 'PHYSFS_getAllocator');
  PHYSFS_getBaseDir := GetProcAddress(LDllHandle, 'PHYSFS_getBaseDir');
  PHYSFS_getCdRomDirs := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirs');
  PHYSFS_getCdRomDirsCallback := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirsCallback');
  PHYSFS_getDirSeparator := GetProcAddress(LDllHandle, 'PHYSFS_getDirSeparator');
  PHYSFS_getErrorByCode := GetProcAddress(LDllHandle, 'PHYSFS_getErrorByCode');
  PHYSFS_getLastError := GetProcAddress(LDllHandle, 'PHYSFS_getLastError');
  PHYSFS_getLastErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_getLastErrorCode');
  PHYSFS_getLastModTime := GetProcAddress(LDllHandle, 'PHYSFS_getLastModTime');
  PHYSFS_getLinkedVersion := GetProcAddress(LDllHandle, 'PHYSFS_getLinkedVersion');
  PHYSFS_getMountPoint := GetProcAddress(LDllHandle, 'PHYSFS_getMountPoint');
  PHYSFS_getPrefDir := GetProcAddress(LDllHandle, 'PHYSFS_getPrefDir');
  PHYSFS_getRealDir := GetProcAddress(LDllHandle, 'PHYSFS_getRealDir');
  PHYSFS_getSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPath');
  PHYSFS_getSearchPathCallback := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPathCallback');
  PHYSFS_getUserDir := GetProcAddress(LDllHandle, 'PHYSFS_getUserDir');
  PHYSFS_getWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_getWriteDir');
  PHYSFS_init := GetProcAddress(LDllHandle, 'PHYSFS_init');
  PHYSFS_isDirectory := GetProcAddress(LDllHandle, 'PHYSFS_isDirectory');
  PHYSFS_isInit := GetProcAddress(LDllHandle, 'PHYSFS_isInit');
  PHYSFS_isSymbolicLink := GetProcAddress(LDllHandle, 'PHYSFS_isSymbolicLink');
  PHYSFS_mkdir := GetProcAddress(LDllHandle, 'PHYSFS_mkdir');
  PHYSFS_mount := GetProcAddress(LDllHandle, 'PHYSFS_mount');
  PHYSFS_mountHandle := GetProcAddress(LDllHandle, 'PHYSFS_mountHandle');
  PHYSFS_mountIo := GetProcAddress(LDllHandle, 'PHYSFS_mountIo');
  PHYSFS_mountMemory := GetProcAddress(LDllHandle, 'PHYSFS_mountMemory');
  PHYSFS_openAppend := GetProcAddress(LDllHandle, 'PHYSFS_openAppend');
  PHYSFS_openRead := GetProcAddress(LDllHandle, 'PHYSFS_openRead');
  PHYSFS_openWrite := GetProcAddress(LDllHandle, 'PHYSFS_openWrite');
  PHYSFS_permitSymbolicLinks := GetProcAddress(LDllHandle, 'PHYSFS_permitSymbolicLinks');
  PHYSFS_read := GetProcAddress(LDllHandle, 'PHYSFS_read');
  PHYSFS_readBytes := GetProcAddress(LDllHandle, 'PHYSFS_readBytes');
  PHYSFS_readSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE16');
  PHYSFS_readSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE32');
  PHYSFS_readSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE64');
  PHYSFS_readSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE16');
  PHYSFS_readSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE32');
  PHYSFS_readSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE64');
  PHYSFS_readUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE16');
  PHYSFS_readUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE32');
  PHYSFS_readUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE64');
  PHYSFS_readULE16 := GetProcAddress(LDllHandle, 'PHYSFS_readULE16');
  PHYSFS_readULE32 := GetProcAddress(LDllHandle, 'PHYSFS_readULE32');
  PHYSFS_readULE64 := GetProcAddress(LDllHandle, 'PHYSFS_readULE64');
  PHYSFS_registerArchiver := GetProcAddress(LDllHandle, 'PHYSFS_registerArchiver');
  PHYSFS_removeFromSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_removeFromSearchPath');
  PHYSFS_seek := GetProcAddress(LDllHandle, 'PHYSFS_seek');
  PHYSFS_setAllocator := GetProcAddress(LDllHandle, 'PHYSFS_setAllocator');
  PHYSFS_setBuffer := GetProcAddress(LDllHandle, 'PHYSFS_setBuffer');
  PHYSFS_setErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_setErrorCode');
  PHYSFS_setSaneConfig := GetProcAddress(LDllHandle, 'PHYSFS_setSaneConfig');
  PHYSFS_setWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_setWriteDir');
  PHYSFS_stat := GetProcAddress(LDllHandle, 'PHYSFS_stat');
  PHYSFS_supportedArchiveTypes := GetProcAddress(LDllHandle, 'PHYSFS_supportedArchiveTypes');
  PHYSFS_swapSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE16');
  PHYSFS_swapSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE32');
  PHYSFS_swapSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE64');
  PHYSFS_swapSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE16');
  PHYSFS_swapSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE32');
  PHYSFS_swapSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE64');
  PHYSFS_swapUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE16');
  PHYSFS_swapUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE32');
  PHYSFS_swapUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE64');
  PHYSFS_swapULE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE16');
  PHYSFS_swapULE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE32');
  PHYSFS_swapULE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE64');
  PHYSFS_symbolicLinksPermitted := GetProcAddress(LDllHandle, 'PHYSFS_symbolicLinksPermitted');
  PHYSFS_tell := GetProcAddress(LDllHandle, 'PHYSFS_tell');
  PHYSFS_ucs4stricmp := GetProcAddress(LDllHandle, 'PHYSFS_ucs4stricmp');
  PHYSFS_unmount := GetProcAddress(LDllHandle, 'PHYSFS_unmount');
  PHYSFS_utf16stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf16stricmp');
  PHYSFS_utf8FromLatin1 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromLatin1');
  PHYSFS_utf8FromUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs2');
  PHYSFS_utf8FromUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs4');
  PHYSFS_utf8FromUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUtf16');
  PHYSFS_utf8stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf8stricmp');
  PHYSFS_utf8ToUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs2');
  PHYSFS_utf8ToUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs4');
  PHYSFS_utf8ToUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUtf16');
  PHYSFS_write := GetProcAddress(LDllHandle, 'PHYSFS_write');
  PHYSFS_writeBytes := GetProcAddress(LDllHandle, 'PHYSFS_writeBytes');
  PHYSFS_writeSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE16');
  PHYSFS_writeSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE32');
  PHYSFS_writeSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE64');
  PHYSFS_writeSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE16');
  PHYSFS_writeSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE32');
  PHYSFS_writeSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE64');
  PHYSFS_writeUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE16');
  PHYSFS_writeUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE32');
  PHYSFS_writeUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE64');
  PHYSFS_writeULE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE16');
  PHYSFS_writeULE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE32');
  PHYSFS_writeULE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE64');
  zipClose := GetProcAddress(LDllHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(LDllHandle, 'zipCloseFileInZip');
  zipOpen := GetProcAddress(LDllHandle, 'zipOpen');
  zipOpenNewFileInZip3 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip3');
  zipWriteInFileInZip := GetProcAddress(LDllHandle, 'zipWriteInFileInZip');
end;

procedure UnloadDLL;
begin
  FreeLibrary(LDllHandle);
  TFile.Delete(LDllName);
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
